{
	"name": "skill",
	"columns": [
		{
			"typeStr": "14",
			"name": "icon"
		},
		{
			"typeStr": "0",
			"name": "id"
		},
		{
			"typeStr": "1",
			"name": "name",
			"display": null,
			"kind": "localizable"
		},
		{
			"typeStr": "1",
			"name": "desc",
			"kind": "localizable"
		},
		{
			"typeStr": "5:TargetUnit,Precision,Passive,Move,Immediate,Zone,WorldPassive",
			"name": "mode"
		},
		{
			"typeStr": "17",
			"name": "range"
		},
		{
			"typeStr": "4",
			"name": "minDmg",
			"opt": true
		},
		{
			"typeStr": "4",
			"name": "maxDmg",
			"opt": true
		},
		{
			"typeStr": "17",
			"name": "props"
		},
		{
			"typeStr": "1",
			"name": "script",
			"kind": "script"
		},
		{
			"typeStr": "8",
			"name": "levels",
			"opt": true
		},
		{
			"typeStr": "1",
			"name": "notes",
			"editor": {
				"categories": [
					"todoInfo"
				]
			}
		},
		{
			"typeStr": "5:TODO,Coded,Ok,Wait",
			"name": "done"
		},
		{
			"typeStr": "2",
			"name": "iconeDone",
			"editor": {
				"categories": [
					"todoInfo"
				]
			}
		}
	],
	"lines": [
		{
			"id": "AA_DefaultSkill",
			"name": "Skill par defaut",
			"desc": "DOIT ETRE REMPLACE",
			"mode": 0,
			"range": {},
			"props": {},
			"script": "",
			"notes": "Ne doit jamais etre référencé avant une release",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/TXT_OW_UI_ICONS_48PX.png",
				"size": 48,
				"x": 19,
				"y": 4
			},
			"group": 0,
			"done": 2,
			"__ignoreLoc__": true
		},
		{
			"id": "Move",
			"name": "Déplacement",
			"mode": 3,
			"props": {
				"defaultAction": false,
				"usableWhenDying": true
			},
			"desc": "Se déplace jusqu'au point ciblé.",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 0,
				"y": 0
			},
			"script": "",
			"range": {},
			"notes": "",
			"iconeDone": true,
			"group": 0,
			"done": 2
		},
		{
			"id": "Disengage",
			"name": "Désengagement",
			"desc": "Se désengage. Déclenche une attaque d'opportunité de l'adversaire.",
			"mode": 4,
			"range": {},
			"props": {
				"vars": {
					"allowed": true
				},
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				],
				"defaultAction": false
			},
			"script": "function onSkill() {\n\tskill.unit.disengage(true);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 11,
				"y": 2
			},
			"iconeDone": true,
			"group": 0,
			"done": 2
		},
		{
			"id": "OpportunityAttack",
			"name": "Attaque d'opportunité",
			"desc": "Inflige [DMG] à la cible.",
			"mode": 0,
			"range": {
				"baseDistance": 99
			},
			"props": {
				"dmgAttribute": 2,
				"defaultAction": false
			},
			"script": "",
			"minDmg": 10,
			"notes": "",
			"iconeDone": true,
			"group": 0,
			"done": 2
		},
		{
			"id": "PunchOpportunityAttack",
			"name": "",
			"desc": "",
			"mode": 0,
			"range": {
				"baseDistance": 99
			},
			"props": {
				"useWithoutWeapon": true,
				"specialAnim": "Punch",
				"dmgAttribute": 2,
				"isAttack": true,
				"defaultAction": true
			},
			"script": "",
			"notes": "Disarmed Opportunity Attack",
			"minDmg": 3,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 0,
			"levels": [],
			"done": 2
		},
		{
			"id": "Recover",
			"name": "Récupération",
			"desc": "Retire [Stun].",
			"mode": 4,
			"range": {},
			"props": {
				"needDisengaged": true,
				"defaultAction": false,
				"tooltipStatus": [
					{
						"st": "Stun"
					}
				]
			},
			"script": "function onSkill() {\n\tskill.unit.consumeStatus(Status.Stun);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 2
			},
			"iconeDone": true,
			"group": 0,
			"levels": [],
			"done": 2
		},
		{
			"id": "KnockOut",
			"name": "Assommer",
			"desc": "Assomme un ennemi engagé avec un allié.\nIl sera fait prisonnier à la fin du combat.",
			"mode": 0,
			"range": {},
			"props": {
				"needDisengaged": true,
				"temporaryUsage": true,
				"defaultAction": true,
				"specialAnim": "KnockoutAttack",
				"vars": {
					"allowed": false
				}
			},
			"script": "function onBeginAction() {\n\tvars.allowed = false;\n\tfor( u in getFoes(skill.unit) )\n\t\tif( canCaptureTarget(u) ) {\n\t\t\tvars.allowed = true;\n\t\t\tbreak;\n\t\t}\n}\n\nfunction onEval(s) {\n\tif( !canCaptureTarget(s.target) ){\n\t\tdontAllow();\n\t}\n}\n\nfunction onSkill() {\n\tcapture();\n}\n\n@sync function canCaptureTarget(t){\n\tvar canCapture = skill.unit.canCapture(t, true);\n\tvar canUseBelt = t.isAnimal && !t.isGhost && skill.unit.hasSkill(Skill.BeltAccHunt);\n\treturn canCapture && !canUseBelt;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 10,
				"y": 2
			},
			"levels": [],
			"iconeDone": true,
			"group": 0,
			"done": 2
		},
		{
			"id": "BraveVictory",
			"name": "Victoire valeureuse",
			"desc": "Chaque fois que cette unité tue un ennemi, obtenez <apt>::value1::</apt>.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"globalEvents": true
			},
			"script": "function onDeath(a) {\n\tif( a.target.side != skill.unit.side && a.unit == skill.unit ) {\n\t\tskill.unit.gainsActionPoint(vars.value1);\n\t\tspawnFx();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 7
			},
			"iconeDone": true,
			"group": 0,
			"done": 2
		},
		{
			"id": "BraveSupport",
			"name": "Soutien valeureux",
			"desc": "Chaque fois que cette unité termine son tour adjacent à un allié sans être engagée, obtenez <apt>::value1::</apt>.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"melee": false,
					"value1": 1
				}
			},
			"script": "function onBeginRound() {\n\tvars.melee = false;\n}\n\nfunction onEndTurn() {\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) && !skill.unit.isEngaged() ) {\n\t\t\tvars.melee = true;\n\t\t}\n\t}\n\tif( vars.melee ) {\n\t\tskill.unit.gainsActionPoint(vars.value1);\n\t\tspawnFx();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 11,
				"y": 7
			},
			"iconeDone": true,
			"group": 0,
			"done": 2
		},
		{
			"id": "BraveDuel",
			"name": "Duel valeureux",
			"desc": "Chaque fois que cette unité s'engage, obtenez <apt>::value1::</apt>.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"engaged": false,
					"value1": 1
				},
				"globalEvents": true
			},
			"script": "function onBeginAction() {\n\tif( !skill.unit.isEngaged() ) {\n\t\tvars.engaged = false;\n\t}\n}\n\nfunction onSkillPlayed(s) {\n\tif( skill.unit.isEngaged() && !vars.engaged ) {\n\t\tvars.engaged = true;\n\t\tskill.unit.gainsActionPoint(vars.value1);\n\t\tspawnFx();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 17,
				"y": 7
			},
			"levels": [],
			"iconeDone": true,
			"group": 0,
			"done": 2
		},
		{
			"id": "BraveCleave",
			"name": "Enchaînement valeureux",
			"desc": "Chaque fois qu'une attaque touche plusieurs ennemis, obtenez <apt>::value1::</apt>.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				}
			},
			"script": "function onSkillPlayed(s) {\n\tvar arr = [];\n\tfor( t in s.getTargets() ) {\n\t\tif( t.dmg > 0 ) {\n\t\t\tarr.push(t.target);\n\t\t}\n\t}\n\tif( arr.length >= 2 ) {\n\t\tspawnFx();\n\t\tskill.unit.gainsActionPoint(vars.value1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 3,
				"y": 16
			},
			"iconeDone": true,
			"group": 0,
			"done": 2
		},
		{
			"id": "BraveBoldness",
			"name": "Audace valeureuse",
			"desc": "Chaque fois que cette unité termine son tour adjacent à un ennemi sans être engagée, obtenez <apt>::value1::</apt>.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"melee": false,
					"value1": 1
				}
			},
			"script": "function onBeginRound() {\n\tvars.melee = false;\n}\n\nfunction onEndTurn() {\n\tfor( u in getFoes(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) && !skill.unit.isEngaged() ) {\n\t\t\tvars.melee = true;\n\t\t}\n\t}\n\tif( vars.melee ) {\n\t\tskill.unit.gainsActionPoint(vars.value1);\n\t\tspawnFx();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 17
			},
			"iconeDone": true,
			"group": 0,
			"done": 2
		},
		{
			"id": "CaptainSkill",
			"name": "Motivation des troupes",
			"desc": "Obtenez <apt>::value1::</apt> pour chaque allié dans la zone.\n\nUtilisable une fois par combat.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 4,
				"allowedTargets": 1,
				"baseDistance": 0
			},
			"props": {
				"vars": {
					"value1": 1
				},
				"apCost": 0,
				"cursor": "CursorHelp",
				"specialAnim": "Taunt",
				"scaledValueAttribute": 0,
				"oncePerFight": true,
				"useWithoutWeapon": true,
				"extraFx": "prefabs/fx/fight/BuffCry/BuffCryBlue.fx"
			},
			"script": "function onSkill() {\n\tplay();\n\tvar ctr = 0;\n\tfor( t in skill.getTargets() )\n\t\tctr += vars.value1;\n\tskill.unit.gainsActionPoint(ctr);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 0,
				"y": 14
			},
			"iconeDone": true,
			"group": 0,
			"done": 2
		},
		{
			"id": "LieutenantSkill",
			"name": "Ordre tactique",
			"desc": "Les alliés présents autour de cette unité gagnent le statut [Ordered].\n\nUtilisable une fois par combat.",
			"mode": 5,
			"range": {
				"allowedTargets": 1,
				"type": 0,
				"baseDistance": 0,
				"radius": 3
			},
			"props": {
				"apCost": 1,
				"tooltipStatus": [
					{
						"st": "Ordered"
					}
				],
				"oncePerFight": true,
				"useWithoutWeapon": true,
				"extraFx": "prefabs/fx/fight/BuffCry/BuffCryRed.fx"
			},
			"script": "function onSkill() {\n\tfor(t in skill.getTargets())\n\t\tt.target.addStatus(Status.Ordered);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 9,
				"y": 15
			},
			"iconeDone": true,
			"group": 0,
			"done": 2
		},
		{
			"id": "Wip",
			"name": "????",
			"desc": "Bientôt disponible.",
			"mode": 0,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/TXT_OW_UI_ICONS_48PX.png",
				"size": 48,
				"x": 5,
				"y": 3
			},
			"iconeDone": true,
			"group": 0,
			"done": 2
		},
		{
			"id": "Flee",
			"name": "Fuir",
			"desc": "Fuir le combat.",
			"mode": 4,
			"range": {},
			"props": {
				"needDisengaged": true,
				"vars": {
					"allowed": false
				},
				"usableWhenDying": true
			},
			"script": "function onBeginAction() {\n\tvars.allowed = skill.unit.canFlee();\n}\n\nfunction onEval(s) {\n\tif( !skill.unit.canFlee() ) dontAllow();\n}\n\nfunction onSkill() {\n\tflee();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 1,
				"y": 15
			},
			"minDmg": 1,
			"levels": [],
			"iconeDone": true,
			"group": 1,
			"done": 2
		},
		{
			"id": "ForsakenBattleSearchIssue",
			"name": "Trouver une issue",
			"desc": "Cette unité essaie de trouver une issue pour quitter le bâtiment.\nChaque utilisation successive lors d'un même round réduit son efficacité.",
			"mode": 4,
			"range": {},
			"props": {
				"needDisengaged": true,
				"specialAnim": "Search",
				"vars": {
					"value1": 20,
					"value2": 0.5
				}
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 0,
				"y": 7
			},
			"minDmg": 1,
			"iconeDone": true,
			"group": 1,
			"done": 2
		},
		{
			"id": "Wrath",
			"name": "Courroux",
			"desc": "Inflige [DMG] à la cible s'il lui reste moins de la moitié de sa [Health].\n\n[DeadlyBlow] : Cette unité gagne [Fury].",
			"mode": 0,
			"range": {},
			"props": {
				"apCost": 1,
				"vars": {
					"value1": 50,
					"allowed": false
				},
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				],
				"dmgAttribute": 2,
				"specialAnim": "AttackPower"
			},
			"script": "function onBeginAction() {\n\tvars.allowed = false;\n\tfor( u in getFoes(skill.unit) ) {\n\t\tvar p = 100 * (u.health / u.stats.health);\n\t\tif( p <= vars.value1 && u.isMelee(skill.unit) ) {\n\t\t\tvars.allowed = true;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction onEval(a) {\n\tvar p = 100 * (a.target.health / a.target.stats.health);\n\tif( p > vars.value1 ) {\n\t\tdontAllow();\n\t}\n}\n\nfunction onPostSkill() {\n\tfor( t in skill.getTargets() ) {\n\t\tif( !t.target.isAlive() ) {\n\t\t\tskill.unit.addStatus(Status.Fury);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 14,
				"y": 1
			},
			"minDmg": 5.5,
			"levels": [],
			"iconeDone": true,
			"maxDmg": 7,
			"group": 2,
			"done": 2
		},
		{
			"id": "FirstAid",
			"name": "Premiers soins",
			"desc": "Soigne un allié [Dying] et lui fait gagner ::value1::% de sa [Health] maximum.\nLui retire toutes les applications de [Poison], [Bleeding] et [Burning].",
			"mode": 0,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"specialAnim": "Heal",
				"apCost": 1,
				"vars": {
					"value1": 10
				},
				"needDisengaged": true,
				"cursor": "CursorHeal",
				"healPreview": 0.1,
				"useWithoutWeapon": true
			},
			"script": "function onSkill() {\n\tfor( t in skill.getTargets() ) {\n\t\tt.target.gainsHealth( ceil(t.target.stats.health*vars.value1/100) , null);\n\n\t\tvar cancelStatus = false;\n\t\tfor( st in t.target.getAllStatus() ) {\n\t\t\tif( st.kind == Status.Poison || st.kind == Status.Bleeding || st.kind == Status.Burning ) {\n\t\t\t\tst.cancel();\n\t\t\t\tcancelStatus = true;\n\t\t\t}\n\t\t}\n\t\tt.target.gainsHealth( 0 , cancelStatus ? true : null);\n\t}\n\tplay();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 1
			},
			"iconeDone": true,
			"group": 2,
			"done": 2
		},
		{
			"id": "Dash",
			"name": "Course",
			"desc": "Se désengage et se déplace en ligne droite jusqu'à ::value1:: mètres entre les unités.",
			"mode": 3,
			"range": {
				"flags": 1,
				"baseDistance": 5
			},
			"props": {
				"apCost": 1,
				"vars": {
					"value1": 5
				}
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 11,
				"y": 1
			},
			"iconeDone": true,
			"group": 2,
			"done": 2
		},
		{
			"id": "Taunt",
			"name": "Provocation",
			"desc": "Force la cible à s'engager et lui applique [Weakening] pendant ::value1:: rounds.",
			"mode": 0,
			"range": {},
			"props": {
				"apCost": 1,
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Weakening"
					}
				],
				"specialAnim": "Taunt",
				"useWithoutWeapon": true,
				"extraFx": "prefabs/fx/fight/BuffCry/BuffCryRed.fx"
			},
			"script": "function onSkill() {\n\tfor( t in skill.getTargets() ) {\n\t\tt.target.addStatus(Status.Weakening, vars.value1, true);\n\t\tif( t.target.engagedUnit != skill.unit && !t.target.hasStatus(Status.Dying)) {\n\t\t\tt.target.disengage(false);\n\t\t\tt.target.engage(skill.unit);\n\t\t}\n\t}\n\tplay();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 16,
				"y": 1
			},
			"iconeDone": true,
			"group": 2,
			"done": 2
		},
		{
			"id": "Aim",
			"name": "Visée",
			"desc": "Gagne [Deftness].",
			"mode": 4,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Deftness"
					}
				],
				"apCost": 1,
				"useWithoutWeapon": true,
				"needDisengaged": true
			},
			"script": "function onSkill() {\n\tskill.unit.addStatus(Status.Deftness);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 17,
				"y": 1
			},
			"levels": [],
			"iconeDone": true,
			"group": 2,
			"done": 2
		},
		{
			"id": "Cleave",
			"name": "Enchaînement",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.",
			"mode": 5,
			"range": {
				"radius": 2,
				"angle": 160,
				"type": 1,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"specialAnim": "AttackWide",
				"defaultAction": true
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 11,
				"y": 3
			},
			"minDmg": 9,
			"iconeDone": true,
			"group": 3,
			"done": 2
		},
		{
			"id": "Slice",
			"name": "Taillade",
			"desc": "Inflige [DMG] à la cible.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 0
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 3,
			"done": 2
		},
		{
			"id": "Impalement",
			"name": "Empalement",
			"desc": "Inflige [DMG] à la cible et la repousse de ::value1:: mètres.\nLes dégâts sont doublés si elle est à distance.",
			"mode": 0,
			"range": {
				"baseDistance": 3
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 1,
					"value2": 100
				},
				"tooltipStatus": [
					{
						"st": "Pushback"
					}
				],
				"isAttack": true,
				"defaultAction": true,
				"flags": 0
			},
			"script": "function onEval(a) {\n\tfor( t in skill.getTargets() ) {\n\t\tif( !t.target.isMelee(skill.unit) ) {\n\t\t\tt.baseDamageBonus += vars.value2;\n\t\t}\n\t}\n}\n\nfunction onHit(a) {\n\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n}\n\nfunction getPushback( a ) {\n\treturn vars.value1;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 14,
				"y": 0
			},
			"minDmg": 4.5,
			"maxDmg": 5.5,
			"iconeDone": true,
			"group": 3,
			"done": 2
		},
		{
			"id": "Grinding",
			"name": "Enfoncement",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\nLes dégâts sont augmentés de ::value1::% contre celles ayant encore de l'[Armor].",
			"mode": 5,
			"range": {
				"radius": 2,
				"angle": 160,
				"type": 1,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 50
				},
				"isAttack": true,
				"specialAnim": "AttackWide",
				"defaultAction": true
			},
			"script": "function onEval(a) {\n\tif( a.target.armor > 0 ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 3
			},
			"minDmg": 7,
			"iconeDone": true,
			"group": 3,
			"done": 2
		},
		{
			"id": "Crushing",
			"name": "Écrasement",
			"desc": "Inflige [DMG] à la cible.\nLes dégâts sont augmentés de ::value1::% si elle a encore de l'[Armor].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 50
				},
				"isAttack": true,
				"defaultAction": true
			},
			"script": "function onEval(a) {\n\tif( a.target.armor > 0 ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 18,
				"y": 0
			},
			"minDmg": 6,
			"maxDmg": 8,
			"iconeDone": true,
			"group": 3,
			"done": 2
		},
		{
			"id": "Mutilation",
			"name": "Mutilation",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\n\n[CapaCritical] : Applique [Bleeding].",
			"mode": 5,
			"range": {
				"radius": 2,
				"angle": 160,
				"type": 1,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"isAttack": true,
				"specialAnim": "AttackWide",
				"defaultAction": true
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 3
			},
			"minDmg": 9,
			"iconeDone": true,
			"group": 3,
			"done": 2
		},
		{
			"id": "Gash",
			"name": "Entaille",
			"desc": "Inflige [DMG] à la cible.\n\n[CapaCritical] : Applique [Bleeding].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"isAttack": true,
				"defaultAction": true
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 16,
				"y": 0
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 3,
			"done": 2
		},
		{
			"id": "Stab",
			"name": "Coup de poignard",
			"desc": "Inflige [DMG] à la cible.\n\n[Backstab] : ::value1::% de chance de coup critique supplémentaire.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 1,
				"vars": {
					"value1": 30
				},
				"isAttack": true,
				"defaultAction": true
			},
			"script": "function onEval(a) {\n\tif( a.backstab ) {\n\t\ta.criticalHitPercent += vars.value1;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 17,
				"y": 0
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 3,
			"done": 2
		},
		{
			"id": "Shot",
			"name": "Tir",
			"desc": "Inflige [DMG] à la cible.",
			"mode": 1,
			"range": {
				"baseDistance": 9
			},
			"props": {
				"dmgAttribute": 1,
				"needDisengaged": true,
				"isAttack": true,
				"defaultAction": true,
				"extraFx": "prefabs/fx/fight/Attack/Attack_B.fx"
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 0
			},
			"minDmg": 6,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 3,
			"done": 2
		},
		{
			"id": "Punch",
			"name": "Coup de poing",
			"desc": "Inflige [DMG] à la cible.",
			"mode": 0,
			"range": {},
			"props": {
				"useWithoutWeapon": true,
				"specialAnim": "Punch",
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 1
			},
			"minDmg": 3,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 3,
			"done": 2
		},
		{
			"id": "DefensivePosture",
			"name": "Posture défensive",
			"desc": "L'unité gagne [Deflection]. Si elle est engagée, obtenez <apt>::value1::</apt>.",
			"mode": 4,
			"range": {},
			"props": {
				"specialAnim": "Taunt",
				"tooltipStatus": [
					{
						"st": "Deflection"
					}
				],
				"vars": {
					"value1": 1
				},
				"useWithoutWeapon": true,
				"defaultAction": true
			},
			"script": "function onSkill() {\n\tskill.unit.addStatus(Status.Deflection);\n\tif( skill.unit.isEngaged() ) {\n\t\tskill.unit.gainsActionPoint(vars.value1);\n\t}\n\tplay();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 7
			},
			"iconeDone": true,
			"group": 3,
			"done": 2
		},
		{
			"id": "OpportunityStrategy",
			"name": "Opportunisme",
			"desc": "[DamageBonusPercent] des attaques d'opportunité augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				},
				"defaultAction": true,
				"strategyTier": 1,
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onSkillEval(a) {\n\tif( a.kind == Skill.OpportunityAttack) {\n\t\tfor( t in a.getTargets() ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 0
			},
			"iconeDone": true,
			"group": 4,
			"done": 2
		},
		{
			"id": "SupportedStrategy",
			"name": "Support",
			"desc": "Augmente le bonus apporté par [Supported] de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				},
				"tooltipStatus": [
					{
						"st": "Supported"
					}
				],
				"defaultAction": true,
				"strategyTier": 1
			},
			"script": "",
			"notes": "Implemented in code",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 0
			},
			"iconeDone": true,
			"group": 4,
			"done": 2
		},
		{
			"id": "SurroundedStrategy",
			"name": "Encerclement",
			"desc": "Augmente le malus provoqué par [Surrounded] de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				},
				"tooltipStatus": [
					{
						"st": "Surrounded"
					}
				],
				"defaultAction": true,
				"strategyTier": 1
			},
			"script": "",
			"notes": "Implemented in code",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 3,
				"y": 0
			},
			"iconeDone": true,
			"group": 4,
			"done": 2
		},
		{
			"id": "DomptingStrategy",
			"name": "Dressage",
			"desc": "[DamageBonusPercent] des animaux augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				},
				"strategyTier": 1
			},
			"script": "function onSkillEval(a) {\n\tif( skill.unit.isAnimal ) {\n\t\tfor( t in a.getTargets() ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 0
			},
			"iconeDone": true,
			"group": 4,
			"done": 2
		},
		{
			"id": "PrecisionStrategy",
			"name": "Recul",
			"desc": "[DamageBonusPercent] des compétences de Tir augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"unlockLevel": 1,
				"vars": {
					"value1": 20
				},
				"strategyTier": 1
			},
			"script": "function onSkillEval(a) {\n\tif( a.isPrecisionSkill()) {\n\t\tfor( t in a.getTargets() ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 5,
				"y": 0
			},
			"iconeDone": true,
			"group": 4,
			"done": 2
		},
		{
			"id": "StrategicRetreat",
			"name": "Retraite stratégique",
			"desc": "Battre en retraite donne -::value1::% de conséquences négatives.",
			"mode": 2,
			"range": {},
			"props": {
				"defaultAction": true,
				"strategyTier": 2,
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "Implemented in code",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 19,
				"y": 8
			},
			"group": 4,
			"done": 2
		},
		{
			"id": "Deploy",
			"name": "Déploiement",
			"desc": "Ajoute ::value1::% d’emplacements de déploiement supplémentaires au début de la bataille.",
			"mode": 2,
			"range": {},
			"props": {
				"defaultAction": true,
				"strategyTier": 2,
				"vars": {
					"value1": 20
				}
			},
			"script": "",
			"notes": "Implemented in code",
			"iconeDone": true,
			"group": 4,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 19,
				"y": 9
			},
			"done": 2
		},
		{
			"id": "PreserveTroups",
			"name": "Préserver les troupes",
			"desc": "Les personnages mourants n’ont pas de réduction de mouvement et ont ::value1::% de chance d’esquiver une attaque.",
			"mode": 2,
			"range": {},
			"props": {
				"defaultAction": true,
				"strategyTier": 2,
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "Implemented in code",
			"iconeDone": true,
			"group": 4,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 19,
				"y": 10
			},
			"done": 2
		},
		{
			"id": "Coordinate",
			"name": "Coordination",
			"desc": "Les attaques qui peuvent affecter les alliés ont ::value1::% de chances de ne pas les affecter.",
			"mode": 2,
			"range": {},
			"props": {
				"defaultAction": true,
				"strategyTier": 3,
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "Implemented in code",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 19,
				"y": 12
			},
			"group": 4,
			"done": 2
		},
		{
			"id": "Regroup",
			"name": "Regroupement",
			"desc": "Lors de la préparation d’une bataille, les points de placements alliés sont plus proches les uns des autres.",
			"mode": 2,
			"range": {},
			"props": {
				"defaultAction": true,
				"strategyTier": 3
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 4,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 19,
				"y": 11
			},
			"done": 2
		},
		{
			"id": "Repositioning",
			"name": "Repositionnement",
			"desc": "Chaque compagnon gagne la compétence <skill>SkillRepositioning</skill>.",
			"mode": 2,
			"range": {},
			"props": {
				"defaultAction": true,
				"strategyTier": 3,
				"flags": 256
			},
			"script": "",
			"notes": "Implemented in code",
			"iconeDone": true,
			"group": 4,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 19,
				"y": 13
			},
			"done": 2
		},
		{
			"id": "SkillRepositioning",
			"name": "Se repositionner",
			"desc": "Réinitialise le mouvement.\nCette unité ne peut plus utiliser de compétences ou d’actions de base.",
			"mode": 4,
			"range": {},
			"props": {
				"useWithoutWeapon": true
			},
			"script": "function onSkill() {\n\tskill.unit.addStatus(Status.Repositioning);\n\tskill.unit.reloadMovePoints();\n}\n\nfunction onEndTurn() {\n\tskill.unit.consumeStatus(Status.Repositioning);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 4,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 12
			},
			"done": 2
		},
		{
			"id": "Intervention",
			"name": "Intervention",
			"desc": "L'unité peut échanger sa place avec un allié adjacent engagé. L'unité devient engagée et effectue une attaque d’opportunité.",
			"mode": 0,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"apCost": 1,
				"needDisengaged": true,
				"cursor": "CursorHelp",
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onEval(a) {\n\tif( !a.target.isEngaged() || a.target.isAnimal || !a.target.canMove() ) {\n\t\tdontAllow();\n\t}\n}\n\nfunction onSkill() {\n\tvar target = skill.target;\n\tvar prevEngaged = target.engagedUnit;\n\ttarget.disengage(false);\n\n\tvar prevPos = target.getPosition();\n\tvar currentPos = skill.unit.getPosition();\n\tskill.unit.swapPositionWith(target, 0);\n\n\tskill.unit.engage(prevEngaged);\n\tskill.unit.opportunityAttack(prevEngaged, skill);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 18
			},
			"iconeDone": true,
			"group": 5,
			"done": 2
		},
		{
			"id": "Anticipation",
			"name": "Anticipation",
			"desc": "Quand l'unité se fait engager, ::value1::% de chances de ne pas se faire engager et d’effectuer une attaque d’opportunité vers l'attaquant.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "",
			"notes": "hard coded",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 9,
				"y": 17
			},
			"iconeDone": true,
			"group": 5,
			"done": 2
		},
		{
			"id": "DefensiveRiposte",
			"name": "Riposte défensive",
			"desc": "Lorsque l'unité se désengage, ::value1::% de chances que l’unité effectue une attaque d’opportunité à la place d’en subir une.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "",
			"notes": "hard coded",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 16
			},
			"iconeDone": true,
			"group": 5,
			"done": 2
		},
		{
			"id": "Swiftness",
			"name": "Rapidité",
			"desc": "L'unité a ::value1::% de chance d’esquiver les attaques à distance et les attaques de zone.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 40
				}
			},
			"script": "",
			"notes": "hard coded",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 8,
				"y": 17
			},
			"iconeDone": true,
			"group": 5,
			"done": 2
		},
		{
			"id": "LoneWolf",
			"name": "Loup Solitaire",
			"desc": "Tant qu'elle n’a pas d’unité alliée à ::value1:: mètres autour d’elle, l'unité gagne le statut [LoneWolf].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 5
				},
				"tooltipStatus": [
					{
						"st": "LoneWolf"
					}
				]
			},
			"script": "function onBeginAction() {\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( getDistance(skill.unit, u) <= vars.value1 ) {\n\t\t\tskill.unit.consumeStatus(Status.LoneWolf);\n\t\t\treturn;\n\t\t}\n\t}\n\tskill.unit.addStatus(Status.LoneWolf);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 17
			},
			"iconeDone": true,
			"group": 5,
			"done": 2
		},
		{
			"id": "Unstoppable",
			"name": "Inarrêtable",
			"desc": "L'unité peut passer à travers toutes les unités.",
			"mode": 2,
			"range": {
				"flags": 1
			},
			"props": {},
			"script": "",
			"notes": "hard coded",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 17
			},
			"iconeDone": true,
			"group": 5,
			"done": 2
		},
		{
			"id": "WeaponSwapSword",
			"name": "Changement d'arme",
			"desc": "Permet d'équiper une deuxième épée et d'en changer pendant le combat.",
			"mode": 4,
			"range": {},
			"props": {
				"flags": 8,
				"defaultAction": false,
				"vars": {
					"allowed": false
				}
			},
			"script": "function onBeginAction() {\n\tvars.allowed = skill.unit.canSwapWeapon();\n}\n\nfunction onEval(s) {\n\tif( !skill.unit.canSwapWeapon() ) dontAllow();\n}\n\nfunction onSkill() {\n\tskill.unit.swapWeapon();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 2,
				"y": 19
			},
			"iconeDone": true,
			"group": 6,
			"done": 2
		},
		{
			"id": "WeaponSwapMace",
			"name": "Changement d'arme",
			"desc": "Permet d'équiper une deuxième masse et d'en changer pendant le combat.",
			"mode": 4,
			"range": {},
			"props": {
				"flags": 8,
				"defaultAction": false,
				"vars": {
					"allowed": false
				}
			},
			"script": "function onBeginAction() {\n\tvars.allowed = skill.unit.canSwapWeapon();\n}\n\nfunction onEval(s) {\n\tif( !skill.unit.canSwapWeapon() ) dontAllow();\n}\n\nfunction onSkill() {\n\tskill.unit.swapWeapon();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 4,
				"y": 19
			},
			"iconeDone": true,
			"group": 6,
			"done": 2
		},
		{
			"id": "WeaponSwapAxe",
			"name": "Changement d'arme",
			"desc": "Permet d'équiper une deuxième hache et d'en changer pendant le combat.",
			"mode": 4,
			"range": {},
			"props": {
				"flags": 8,
				"defaultAction": false,
				"vars": {
					"allowed": false
				}
			},
			"script": "function onBeginAction() {\n\tvars.allowed = skill.unit.canSwapWeapon();\n}\n\nfunction onEval(s) {\n\tif( !skill.unit.canSwapWeapon() ) dontAllow();\n}\n\nfunction onSkill() {\n\tskill.unit.swapWeapon();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 0,
				"y": 19
			},
			"iconeDone": true,
			"group": 6,
			"done": 2
		},
		{
			"id": "WeaponSwapDagger",
			"name": "Changement d'arme",
			"desc": "Permet d'équiper une deuxième dague et d'en changer pendant le combat.",
			"mode": 4,
			"range": {},
			"props": {
				"flags": 8,
				"defaultAction": false,
				"vars": {
					"allowed": false
				}
			},
			"script": "function onBeginAction() {\n\tvars.allowed = skill.unit.canSwapWeapon();\n}\n\nfunction onEval(s) {\n\tif( !skill.unit.canSwapWeapon() ) dontAllow();\n}\n\nfunction onSkill() {\n\tskill.unit.swapWeapon();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 1,
				"y": 19
			},
			"iconeDone": true,
			"group": 6,
			"done": 2
		},
		{
			"id": "WeaponSwapBow",
			"name": "Changement d'arme",
			"desc": "Permet d'équiper un deuxième arc et d'en changer pendant le combat.",
			"mode": 4,
			"range": {},
			"props": {
				"flags": 8,
				"defaultAction": false,
				"vars": {
					"allowed": false
				}
			},
			"script": "function onBeginAction() {\n\tvars.allowed = skill.unit.canSwapWeapon();\n}\n\nfunction onEval(s) {\n\tif( !skill.unit.canSwapWeapon() ) dontAllow();\n}\n\nfunction onSkill() {\n\tskill.unit.swapWeapon();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 19
			},
			"iconeDone": true,
			"group": 6,
			"done": 2
		},
		{
			"id": "WeaponSwapPolearm",
			"name": "Changement d'arme",
			"desc": "Permet d'équiper une deuxième arme d'hast et d'en changer pendant le combat.",
			"mode": 4,
			"range": {},
			"props": {
				"flags": 8,
				"defaultAction": false,
				"vars": {
					"allowed": false
				}
			},
			"script": "function onBeginAction() {\n\tvars.allowed = skill.unit.canSwapWeapon();\n}\n\nfunction onEval(s) {\n\tif( !skill.unit.canSwapWeapon() ) dontAllow();\n}\n\nfunction onSkill() {\n\tskill.unit.swapWeapon();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 19
			},
			"iconeDone": true,
			"group": 6,
			"done": 2
		},
		{
			"id": "SuppressFire",
			"name": "Tir de suppression",
			"desc": "Inflige [DMG] et applique [Slowdown] à toutes les unités dans la zone pendant ::value1:: round.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 6,
				"baseDistance": 24,
				"allowedTargets": 4
			},
			"props": {
				"dmgAttribute": 1,
				"tooltipStatus": [
					{
						"st": "Slowdown"
					}
				],
				"specialAnim": "AttackBellshot",
				"needDisengaged": true,
				"flags": 68,
				"vars": {
					"value1": 1
				},
				"apCost": 0,
				"feature": "Alazar1_Update",
				"oncePerFight": true,
				"castFx": "prefabs/fx/fight/UltiSkill/SupressFire.fx",
				"animFx": "prefabs/fx/fight/UltiSkill/UltiSkillAttack_B.fx"
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Slowdown, vars.value1, true);\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 12
			},
			"minDmg": 3,
			"group": 7,
			"done": 2
		},
		{
			"id": "nake",
			"name": "Condamnation",
			"desc": "Inflige [DMG] à la cible et lui applique [Condemn].",
			"mode": 0,
			"range": {
				"baseDistance": 3
			},
			"props": {
				"vars": {
					"value1": 2
				},
				"apCost": 0,
				"tooltipStatus": [
					{
						"st": "Condemn"
					}
				],
				"dmgAttribute": 0,
				"specialAnim": "UltiSkill",
				"feature": "Alazar1_Update",
				"oncePerFight": true,
				"useWithoutWeapon": true
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Condemn);\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 13
			},
			"minDmg": 7,
			"group": 7,
			"done": 2
		},
		{
			"id": "Exhorted",
			"name": "Exhortation",
			"desc": "L'unité et tous les alliés dans la zone gagnent [Zeal] pendant ::value1:: rounds.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 6,
				"allowedTargets": 2,
				"baseDistance": 0
			},
			"props": {
				"vars": {
					"value1": 2
				},
				"apCost": 0,
				"tooltipStatus": [
					{
						"st": "Zeal"
					}
				],
				"specialAnim": "UltiSkill",
				"useWithoutWeapon": true,
				"feature": "Alazar1_Update",
				"oncePerFight": true
			},
			"script": "function onSkill() {\n\tplay();\n\tfor( t in skill.getTargets() )\n\t\tt.target.addStatus(Status.Zeal);\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 9
			},
			"group": 7,
			"done": 2
		},
		{
			"id": "TitanicRoar",
			"name": "Rugissement titanesque",
			"desc": "Repousse tous les ennemis dans la zone de ::value1:: mètres.\nTous les ennemis ainsi repoussés contre un allié subissent une attaque d'opportunité de celui-ci.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 4,
				"allowedTargets": 0,
				"baseDistance": 0
			},
			"props": {
				"vars": {
					"value1": 4
				},
				"specialAnim": "UltiSkill",
				"apCost": 0,
				"feature": "Alazar1_Update",
				"oncePerFight": true,
				"useWithoutWeapon": true
			},
			"script": "var arr = [];\n\nfunction onHit(a) {\n\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n\tarr.push(a.target);\n}\n\nfunction getPushback( a ) {\n\treturn vars.value1;\n}\n\nfunction onPostSkill() {\n\tfor( u in arr ) {\n\t\tfor( al in getAllies(skill.unit) ) {\n\t\t\tif( u.isMelee(al) ) {\n\t\t\t\tal.opportunityAttack(u, skill);\n\t\t\t}\n\t\t}\n\t}\n\tarr = [];\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 11
			},
			"group": 7,
			"done": 2
		},
		{
			"id": "LongTermePlan",
			"name": "Stratagème décisif",
			"desc": "Si cette unité est la première de son camp à être activée, elle se désengage et pourra être réactivée une nouvelle fois après tous ses autres alliés.",
			"mode": 4,
			"range": {},
			"props": {
				"apCost": 0,
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "Replay"
					}
				],
				"oncePerFight": true,
				"useWithoutWeapon": true,
				"specialAnim": "UltiSkill"
			},
			"script": "function onSkill() {\n\tplay();\n}\n\nfunction onPostSkill(){\n\tvar isFirst = true;\n\tfor (u in getAllies(skill.unit, false))\n\t\tif (hasPlayed(u)){\n\t\t\tisFirst = false;\n\t\t\tbreak;\n\t\t}\n\tif (isFirst){\n\t\tskill.unit.disengage(false);\n\t\tskill.unit.addStatus(Status.Replay);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 14
			},
			"group": 7,
			"done": 2
		},
		{
			"id": "DeathLure",
			"name": "Trompe-la-mort",
			"desc": "L'unité gagne [Frenzy] pendant ::value1:: rounds.",
			"mode": 4,
			"range": {},
			"props": {
				"apCost": 0,
				"vars": {
					"value1": 3
				},
				"tooltipStatus": [
					{
						"st": "Frenzy"
					}
				],
				"specialAnim": "UltiSkill",
				"useWithoutWeapon": true,
				"feature": "Alazar1_Update",
				"oncePerFight": true
			},
			"script": "function onSkill() {\n\tplay();\n\tskill.unit.addStatus(Status.Frenzy, vars.value1, true);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 7,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 10
			},
			"levels": [],
			"done": 2
		},
		{
			"id": "ClassSpecialization",
			"name": "Spécialisation de classe",
			"desc": "Permet de débloquer une compétence d'un niveau précédent.",
			"mode": 6,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"done": 1,
			"iconeDone": false,
			"group": 7,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 0,
				"y": 3
			}
		},
		{
			"id": "Bulwark",
			"name": "Rempart",
			"desc": "Chaque fois que cette unité s'engage, elle gagne [Deflection].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"engaged": false
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Deflection"
					}
				]
			},
			"script": "function onBeginAction() {\n\tif( skill.level == 2 && vars.engaged && !skill.unit.isEngaged() ) {\n\t\tif( skill.unit.addStatus(Status.Fury) )\n\t\t\tspawnFx();\n\t}\n\tif( !skill.unit.isEngaged() ) {\n\t\tvars.engaged = false;\n\t}\n}\n\nfunction onSkillPlayed(s) {\n\tif( !vars.engaged && skill.unit.isEngaged() ) {\n\t\tvars.engaged = true;\n\t\tif( skill.unit.addStatus(Status.Deflection) )\n\t\t\tspawnFx();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 0,
				"y": 5
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Fury"
							}
						]
					},
					"desc": "Chaque fois que cette unité s'engage, elle gagne [Deflection].\nChaque fois qu'elle se désengage, elle gagne [Fury]."
				}
			],
			"iconeDone": true,
			"group": 9,
			"done": 2
		},
		{
			"id": "Counterattack",
			"name": "Contre-attaque",
			"desc": "Chaque fois que cette unité s'engage, elle gagne [Riposte].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"engaged": false,
					"value1": 1
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Riposte"
					}
				]
			},
			"script": "function onBeginAction() {\n\tif( skill.level == 2 && vars.engaged && !skill.unit.isEngaged() ) {\n\t\tif( skill.unit.addStatus(Status.Inspiration, vars.value1, true) )\n\t\t\tspawnFx();\n\t}\n\tif( !skill.unit.isEngaged() ) {\n\t\tvars.engaged = false;\n\t}\n}\n\nfunction onSkillPlayed(s) {\n\tif( !vars.engaged && skill.unit.isEngaged() ) {\n\t\tvars.engaged = true;\n\t\tif( skill.unit.addStatus(Status.Riposte) )\n\t\t\tspawnFx();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 5
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Inspiration"
							}
						]
					},
					"desc": "Chaque fois que cette unité s'engage, elle gagne [Riposte].\nChaque fois qu'elle se désengage, elle gagne [Inspiration] pendant ::value1:: round."
				}
			],
			"iconeDone": true,
			"group": 9,
			"done": 2
		},
		{
			"id": "Boldness",
			"name": "Hardiesse",
			"desc": "Tant que cette unité est sous l'effet d'un Bonus, ses attaques appliquent [Weakening] pendant ::value1:: round.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Weakening"
					}
				],
				"vars": {
					"value1": 1
				}
			},
			"script": "function onDamageDealt(a) {\n\tfor( st in skill.unit.getAllStatus() ) {\n\t\tif( st.isBonus ) {\n\t\t\tif( !a.target.hasStatus(Status.Weakening) ) {\n\t\t\t\tspawnFx();\n\t\t\t}\n\t\t\tif( skill.level == 1 ) {\n\t\t\t\tif( a.target.addStatus(Status.Weakening, vars.value1, true) ) {\n\t\t\t\t\tspawnFx();\n\t\t\t\t}\n\t\t\t} else if ( skill.level == 2 ) {\n\t\t\t\tif( a.target.addStatusPersist(Status.Weakening, skill) ) {\n\t\t\t\t\tspawnFx();\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 2,
				"y": 8
			},
			"levels": [
				{
					"props": {},
					"desc": "Tant que cette unité est sous l'effet d'un Bonus, ses attaques appliquent [Weakening]."
				}
			],
			"iconeDone": true,
			"group": 9,
			"done": 2
		},
		{
			"id": "DuellistInstinct",
			"name": "Instinct du duelliste",
			"desc": "Tant que cette unité est engagée, elle a [Brutality].",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Brutality"
					}
				],
				"vars": {
					"value1": 30
				}
			},
			"script": "function onEval(a) {\n\tif( skill.level == 2 && skill.unit.isEngaged() ) {\n\t\ta.criticalHitDamageBonus += vars.value1;\n\t}\n}\n\nfunction onBeginAction() {\n\tif ( skill.unit.isEngaged() ) {\n\t\tif( skill.unit.addStatusPersist(Status.Brutality, skill) ) {\n\t\t\tspawnFx();\n\t\t}\n\t} else skill.unit.cancelStatus(Status.Brutality, skill);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 5
			},
			"levels": [
				{
					"props": {},
					"desc": "Tant que cette unité est engagée, elle a [Brutality] et ses [CritHitDamageBonusPercent] sont augmentés de ::value1::%."
				}
			],
			"iconeDone": true,
			"group": 9,
			"done": 2
		},
		{
			"id": "Encouragement",
			"name": "Encouragement",
			"desc": "L'unité et tous les alliés dans la zone  gagnent [Protection] pendant ::value1:: rounds.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 6,
				"allowedTargets": 2,
				"baseDistance": 0
			},
			"props": {
				"vars": {
					"value1": 2
				},
				"apCost": 1,
				"tooltipStatus": [
					{
						"st": "Protection"
					}
				],
				"specialAnim": "Taunt",
				"useWithoutWeapon": true,
				"extraFx": "prefabs/fx/fight/BuffCry/BuffCryBlue.fx"
			},
			"script": "function onSkill() {\n\tplay();\n\tfor( t in skill.getTargets() ) {\n\t\tt.target.addStatus(Status.Protection, vars.value1, true);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 18,
				"y": 3
			},
			"levels": [
				{
					"props": {
						"rangeRadius": 10,
						"vars": {
							"value1": 3
						}
					}
				}
			],
			"iconeDone": true,
			"group": 9,
			"done": 2
		},
		{
			"id": "DestabilisingStrike",
			"name": "Frappe déstabilisante",
			"desc": "Inflige [DMG] à la cible et lui applique [Destabilization] pendant ::value1:: rounds.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 2
				},
				"apCost": 1,
				"tooltipStatus": [
					{
						"st": "Destabilization"
					}
				],
				"dmgAttribute": 0,
				"specialAnim": "Kick"
			},
			"script": "function onEval(a) {\n\tif( skill.level == 2 && (a.target.guard == 0 || a.target.armor == 0)) {\n\t\ta.criticalHitPercent = 100;\n\t}\n}\n\nfunction onDamage(a) {\n\ta.target.addStatus(Status.Destabilization, vars.value1, true);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 9,
				"y": 7
			},
			"minDmg": 7,
			"maxDmg": 9,
			"levels": [
				{
					"props": {},
					"desc": "Inflige [DMG] à la cible et lui applique [Destabilization] pendant ::value1:: rounds.\nCoup critique assuré contre les ennemis sans [Guard]."
				}
			],
			"iconeDone": true,
			"group": 9,
			"done": 2
		},
		{
			"id": "Slashes",
			"name": "Lacérations",
			"desc": "Inflige ::value1:: fois [DMG] à toutes les unités dans la zone.\nUtilisable après ::value2:: attaques.\n\nAttaques effectuées : ::value3::/::value2::",
			"mode": 5,
			"range": {
				"radius": 2,
				"angle": 160,
				"type": 1,
				"allowedTargets": 5
			},
			"props": {
				"vars": {
					"allowed": false,
					"value1": 2,
					"value2": 2,
					"value3": 0
				},
				"dmgAttribute": 0,
				"isHeroic": true,
				"apCost": 2,
				"value": 0
			},
			"script": "function onSkillPlayed(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( t.dmg > 0 && s.kind != skill.kind ) {\n\t\t\tif( !vars.allowed ) {\n\t\t\t\tvars.value3++;\n\t\t\t\tif( vars.value3 >= vars.value2 ) {\n\t\t\t\t\tvars.allowed = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction onEval(t) {\n\tt.attackCount = vars.value1;\n}\n\nfunction onSkill() {\n\tfor( i in 0...vars.value1 ) {\n\t\tattack({ anim : \"AttackWide\"+(i%2+1), fast : i < vars.value1-1 });\n\t}\n}\n\nfunction onPostSkill() {\n\tvars.allowed = false;\n\tvars.value3 = 0;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 2
			},
			"minDmg": 7,
			"levels": [
				{
					"props": {
						"vars": {
							"value2": 1
						}
					}
				}
			],
			"iconeDone": true,
			"group": 9,
			"done": 2
		},
		{
			"id": "Estocade",
			"name": "Estocade",
			"desc": "Inflige [DMG] à la cible et gagne [Riposte].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Riposte"
					}
				],
				"isHeroic": true,
				"apCost": 1,
				"vars": {
					"value1": 50
				},
				"specialAnim": "AttackPower"
			},
			"script": "function onEval(a) {\n\tif( skill.level == 2 && skill.unit.hasStatus(Status.Riposte) ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t}\n}\n\nfunction onDamage(a) {\n\tskill.unit.addStatus(Status.Riposte);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 14,
				"y": 2
			},
			"minDmg": 7,
			"maxDmg": 9,
			"levels": [
				{
					"props": {},
					"desc": "Inflige [DMG] à la cible et gagne [Riposte].\nSi cette unité a déjà [Riposte], les dégâts sont augmentés de ::value1::%."
				}
			],
			"iconeDone": true,
			"group": 9,
			"done": 2
		},
		{
			"id": "LastStand",
			"name": "Dernier carré",
			"desc": "Tant que cette unité n'a plus d'[Armor], elle a [Brutality].",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Brutality"
					}
				],
				"vars": {
					"value1": 50
				}
			},
			"script": "function onBeginAction() {\n\tif( skill.unit.armor == 0 ) {\n\t\tif( skill.unit.addStatusPersist(Status.Brutality, skill) )\n\t\t\tspawnFx();\n\t}\n\tif( skill.level >= 2 && skill.unit.armor <= (skill.unit.stats.armor*vars.value1)/100) {\n\t\tif( skill.unit.addStatusPersist(Status.Brutality, skill) )\n\t\t\tspawnFx();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 2
			},
			"levels": [
				{
					"props": {},
					"desc": "Tant que cette unité a ::value1::% d'[Armor] ou moins, elle a [Brutality]."
				}
			],
			"iconeDone": true,
			"group": 9,
			"done": 2
		},
		{
			"id": "CombatGrip",
			"name": "Prise de combat",
			"desc": "Applique [Disarm] à la cible pendant ::value1:: round.",
			"mode": 0,
			"range": {},
			"props": {
				"apCost": 1,
				"tooltipStatus": [
					{
						"st": "Disarm"
					}
				],
				"vars": {
					"value1": 1
				},
				"specialAnim": "AttackPower"
			},
			"script": "function onEval(a) {\n\tif( a.target.statusResist(Status.Disarm) ) {\n\t\tdontAllow();\n\t}\n}\n\nfunction onSkill() {\n\tplay();\n\tfor( t in skill.getTargets() ) {\n\t\tif( skill.level >= 2 && t.target.hasStatus(Status.Disarm) ) {\n\t\t\tt.target.addStatus(Status.Vulnerability);\n\t\t}\n\t\tt.target.addStatus(Status.Disarm, vars.value1, true);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 2
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Vulnerability"
							}
						]
					},
					"desc": "Applique [Disarm] à la cible pendant ::value1:: round.\nSi la cible est déjà désarmée, lui applique [Vulnerability]."
				}
			],
			"iconeDone": true,
			"group": 9,
			"done": 2
		},
		{
			"id": "HardTraining",
			"name": "Entraînement à la dure",
			"desc": "Cette unité ne peut pas subir de [Poison], [Bleeding] ou [Burning].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 2,
					"poison": false,
					"burning": false,
					"bleeding": false
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Poison"
					},
					{
						"st": "Bleeding"
					},
					{
						"st": "Burning"
					}
				]
			},
			"script": "function onBeginRound() {\n\tvars.poison = false;\n\tvars.burning = false;\n\tvars.bleeding = false;\n}\n\nfunction onStatus(s) {\n\tif( s.unit == skill.unit && s.kind == Status.Poison ) {\n\t\tspawnFx();\n\t\ts.cancel();\n\t\tif( skill.level >= 2 && !vars.poison) {\n\t\t\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value1);\n\t\t\tvars.poison = true;\n\t\t}\n\t}\n\tif( s.unit == skill.unit && s.kind == Status.Bleeding ) {\n\t\tspawnFx();\n\t\ts.cancel();\n\t\tif( skill.level >= 2 && !vars.bleeding) {\n\t\t\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value1);\n\t\t\tvars.bleeding = true;\n\t\t}\n\t}\n\tif( s.unit == skill.unit && s.kind == Status.Burning ) {\n\t\tspawnFx();\n\t\ts.cancel();\n\t\tif( skill.level >= 2 && !vars.burning) {\n\t\t\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value1);\n\t\t\tvars.burning = true;\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 2
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "AnimalMarkedBonus"
							}
						]
					},
					"desc": "Cette unité ne peut pas subir de [Poison], [Bleeding] ou [Burning].\nQuand elle est censée en subir, elle gagne ::value1:: [AnimalMarkedBonus] à la place (une fois par effet chaque Round)."
				}
			],
			"iconeDone": true,
			"group": 9,
			"done": 2
		},
		{
			"id": "GreatOpportunist",
			"name": "Grand opportuniste",
			"desc": "Dégâts des attaques d'opportunité infligés augmentés de ::value1::%.\nDégâts des attaques d'opportunité subis réduits de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 25
				},
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				],
				"feature": "Alazar1_Update",
				"globalEvents": true
			},
			"script": "function onSkillEval(a) {\n\tif( a.isOpportunityAttack() ) {\n\t\tif( a.unit == skill.unit ) {\n\t\t\tfor( t in a.getTargets() ) {\n\t\t\t\tt.baseDamageBonus += vars.value1;\n\t\t\t}\n\t\t} else {\n\t\t\tfor( t in a.getTargets() ) {\n\t\t\t\tif( t.target == skill.unit ) {\n\t\t\t\t\tt.baseDamageBonus -= vars.value1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 9,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 3,
				"y": 15
			},
			"levels": [
				{
					"props": {
						"vars": {
							"value1": 50
						}
					}
				}
			],
			"done": 1
		},
		{
			"id": "EternalGloryStrike",
			"name": "Frappe de la gloire éternelle",
			"desc": "Inflige [DMG] à la cible.\n\n[DeadlyBlow] : obtenez <apt>::value1::</apt>.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 2
				},
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true,
				"fxSuffix": 0,
				"specialAnim": "AttackPower"
			},
			"script": "function onPostSkill() {\n\tfor( t in skill.getTargets() ) {\n\t\tif( !t.target.isAlive() ) {\n\t\t\tskill.unit.gainsActionPoint(vars.value1);\n\t\t}\n\t}\n}",
			"notes": "",
			"minDmg": 8,
			"maxDmg": 10,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 15
			},
			"iconeDone": true,
			"group": 9,
			"done": 2
		},
		{
			"id": "EvolandStrike",
			"name": "Triple Attaque",
			"desc": "Inflige ::value1:: fois [DMG] à la cible cible.\nLa troisième frappe repousse l'ennemi de ::value2:: mètres.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 3,
					"value2": 3,
					"value3": false,
					"value4": 3
				},
				"defaultAction": true,
				"isAttack": true
			},
			"script": "function onSkill() {\n\tattack({ anim : \"AttackWide2\", fast : true });\n\tattack({ anim : \"AttackWide1\", fast : false });\n\tvars.value3 = true;\n\tattack({ anim : \"AttackPower\", fast : true });\n\tvars.value3 = false;\n}\n\nfunction onHit(a) {\n\tif(vars.value3)\n\t\ta.target.pushback({ unit : a.unit }, getPushback(a));\n}\n\nfunction getPushback( a ) {\n\treturn vars.value2;\n}",
			"notes": "",
			"iconeDone": true,
			"group": 9,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 3,
				"y": 18
			},
			"minDmg": 2,
			"maxDmg": 4,
			"done": 2
		},
		{
			"id": "ReinforcedArrows",
			"name": "Flèches renforcées",
			"desc": "Chaque fois que cette unité inflige un coup critique, elle applique [Bleeding].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"vars": {
					"value1": 35
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( a.isCritical ) {\n\t\tif( a.target.addStatus(Status.Bleeding) )\n\t\t\tspawnFx();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 10,
				"y": 5
			},
			"levels": [
				{
					"props": {
						"attributes": [
							{
								"kind": "CritHitDamageBonusPercent",
								"value": 35
							}
						]
					},
					"desc": "Chaque fois que cette unité inflige un coup critique, elle applique [Bleeding].\n[CritHitDamageBonusPercent] augmentés de ::value1::%."
				}
			],
			"iconeDone": true,
			"group": 10,
			"done": 2
		},
		{
			"id": "Precision",
			"name": "Précision",
			"desc": "Toutes les ::value1:: attaques, applique [Vulnerability].\n\nAttaques effectuées : ::value2::",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 2,
					"value2": 0,
					"engaged": false
				},
				"tooltipStatus": [
					{
						"st": "Vulnerability"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tif( vars.value2 < vars.value1 ) {\n\t\tvars.value2++;\n\t}\n\tif( vars.value2 >= vars.value1 ) {\n\t\tspawnFx();\n\t\ta.target.addStatus(Status.Vulnerability);\n\t\tvars.value2 = 0;\n\t\tif( skill.level == 2 ) {\n\t\t\tskill.unit.addStatus(Status.Fury);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 11,
				"y": 5
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Fury"
							}
						]
					},
					"desc": "Toutes les ::value1:: attaques, applique [Vulnerability] et gagne [Fury].\n\nAttaques effectuées : ::value2::"
				}
			],
			"iconeDone": true,
			"group": 10,
			"done": 2
		},
		{
			"id": "BeastMaster",
			"name": "Maître des bêtes",
			"desc": "Peut contrôler les animaux au combat.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 5
				},
				"learnTrait": "Tamer"
			},
			"script": "function onEndTurn() {\n\tif( skill.level == 2 ) {\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tif ( u.isAnimal ) {\n\t\t\t\tu.gainsHealth(ceil(u.stats.health*vars.value1/100));\n\t\t\t\tspawnFx();\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 5
			},
			"levels": [
				{
					"props": {},
					"desc": "Peut contrôler les animaux au combat.\nSoigne ::value1::% de la [Health] maximum des animaux alliés à la fin de son tour."
				}
			],
			"iconeDone": true,
			"group": 10,
			"done": 2
		},
		{
			"id": "Subtlety",
			"name": "Finesse",
			"desc": "Si cette unité termine son tour non-engagée, elle gagne [Deflection].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Deflection"
					}
				]
			},
			"script": "function onEndTurn() {\n\tif( !skill.unit.isEngaged() ) {\n\t\tif( skill.unit.addStatus(Status.Deflection) )\n\t\t\tspawnFx();\n\t\tif( skill.level == 2 ) {\n\t\t\tif( skill.unit.addStatus(Status.Deftness) )\n\t\t\t\tspawnFx();\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 7
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Deftness"
							}
						]
					},
					"desc": "Si cette unité termine son tour non-engagée, elle gagne [Deflection] et [Deftness]."
				}
			],
			"iconeDone": true,
			"group": 10,
			"done": 2
		},
		{
			"id": "Barrage",
			"name": "Barrage",
			"desc": "Cible une zone.\nEffectue une attaque d'opportunité contre les ::value1:: premiers ennemis qui traversent la zone.",
			"mode": 5,
			"range": {
				"type": 1,
				"angle": 60,
				"radius": 9,
				"allowedTargets": 0
			},
			"props": {
				"globalEvents": true,
				"needDisengaged": true,
				"vars": {
					"value1": 3,
					"value2": 0
				},
				"isHeroic": true,
				"apCost": 2,
				"tooltipStatus": [
					{
						"st": "Targeting"
					},
					{
						"st": "OpportunityAttack"
					}
				],
				"reactionSkill": true,
				"castFx": "prefabs/fx/fight/Attack/Attack_B.fx",
				"extraFx": "prefabs/fx/fight/Attack/AttackPower_B.fx"
			},
			"script": "function onSkill() {\n\tif( waitNextTurn() ) {\n\t\tvars.value2 = 0;\n\t\tcreateZone();\n\t\treturn;\n\t}\n\tcancelZone();\n}\n\nfunction onMoveEvent(m) {\n\tskill.unit.cast(Skill.OpportunityAttack, m.unit, skill);\n\tvars.value2++ ;\n\tif( vars.value2 == vars.value1 ) {\n\t\tcancelZone();\n\t}\n}\n\nfunction onMove(m) {\n\tif( m.unit.side == skill.unit.side ) return;\n\tvar z = getZone();\n\tif( z == null ) return;\n\tm.addZoneEvent(z, onMoveEvent);\n}",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 1
			},
			"notes": "",
			"levels": [
				{
					"props": {
						"vars": {
							"value1": 4
						}
					}
				}
			],
			"iconeDone": true,
			"group": 10,
			"done": 2
		},
		{
			"id": "RecoilShot",
			"name": "Tir de recul",
			"desc": "Inflige [DMG] à la cible, la repousse de ::value1:: mètres et lui applique [Slowdown] pendant ::value2:: rounds.",
			"mode": 1,
			"range": {
				"minDistance": 1,
				"baseDistance": 9
			},
			"props": {
				"dmgAttribute": 1,
				"needDisengaged": true,
				"tooltipStatus": [
					{
						"st": "Pushback"
					},
					{
						"st": "Slowdown"
					}
				],
				"isHeroic": true,
				"apCost": 1,
				"vars": {
					"value1": 2,
					"value2": 1
				},
				"extraFx": "prefabs/fx/fight/Attack/AttackPower_B.fx"
			},
			"script": "function onHit(a) {\n\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n}\nfunction onDamage(a) {\n\ta.target.addStatus(Status.Slowdown, vars.value2, true);\n}\n\nfunction getPushback( a ) {\n\treturn vars.value1;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 2
			},
			"minDmg": 7,
			"maxDmg": 10,
			"levels": [
				{
					"props": {
						"minDmg": 8,
						"maxDmg": 12,
						"vars": {
							"value1": 3,
							"value2": 2
						}
					}
				}
			],
			"iconeDone": true,
			"group": 10,
			"done": 2
		},
		{
			"id": "ATTACK",
			"name": "ATTAQUE !",
			"desc": "Tous les animaux alliés adjacents à la cible l'attaquent avec une attaque d'opportunité.",
			"mode": 0,
			"range": {
				"baseDistance": 12
			},
			"props": {
				"isHeroic": true,
				"apCost": 1,
				"vars": {
					"value1": 2,
					"value2": 1
				},
				"specialAnim": "Taunt",
				"useWithoutWeapon": true,
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onSkill() {\n\tplay();\n\tfor( t in skill.getTargets() ) {\n\t\tfor(u in getAllies(skill.unit) ) {\n\t\t\tif( t.target.isAlive() && u.isAnimal && u.isMelee(t.target) ) {\n\t\t\t\tif( skill.level == 2 ) {\n\t\t\t\t\tu.addStatus(Status.Fury);\n\t\t\t\t}\n\t\t\t\tu.opportunityAttack(t.target, skill);\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 16,
				"y": 2
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Fury"
							}
						]
					},
					"desc": "Tous les animaux alliés adjacents à la cible gagnent [Fury] et l'attaquent avec une attaque d'opportunité."
				}
			],
			"iconeDone": true,
			"group": 10,
			"done": 2
		},
		{
			"id": "AimedShot",
			"name": "Tir visé",
			"desc": "Inflige [DMG] à la cible. Les dégâts sont augmentés de ::value1::% pour chaque mètre de distance entre la cible et cette unité.",
			"mode": 1,
			"range": {
				"baseDistance": 8
			},
			"props": {
				"dmgAttribute": 1,
				"needDisengaged": true,
				"isHeroic": true,
				"apCost": 2,
				"vars": {
					"value1": 5
				},
				"extraFx": "prefabs/fx/fight/Attack/AttackPower_B.fx"
			},
			"script": "function onEval(a) {\n\tvar dist = round(getDistance(a.target, skill.unit) );\n\ta.baseDamageBonus += ceil(vars.value1*dist);\n\tif( skill.level == 2 ) {\n\t\ta.criticalHitPercent += ceil(vars.value1*dist);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 0,
				"y": 8
			},
			"minDmg": 7,
			"levels": [
				{
					"props": {},
					"desc": "Inflige [DMG] à la cible. Les dégâts et les chances de coup critique sont augmentés de ::value1::% pour chaque mètre de distance entre la cible et cette unité."
				}
			],
			"iconeDone": true,
			"group": 10,
			"done": 2
		},
		{
			"id": "TrainingArrow",
			"name": "Flèche de dressage",
			"desc": "Applique [Fury] à l'animal ciblé.",
			"mode": 1,
			"range": {
				"baseDistance": 9,
				"allowedTargets": 1
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				],
				"vars": {
					"allowed": false
				},
				"apCost": 0
			},
			"script": "function onBeginAction() {\n\tvars.allowed = false;\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( u.isAnimal ) {\n\t\t\tvars.allowed = true;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction onEval(a) {\n\tif( !a.target.isAnimal ) {\n\t\tdontAllow();\n\t}\n}\n\nfunction onPostSkill() {\n\tfor( t in skill.getTargets() ) {\n\t\tt.target.addStatus(Status.Fury);\n\t\tif( skill.level >= 2 ) {\n\t\t\tt.target.addStatus(Status.Riposte);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 2
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Riposte"
							}
						]
					},
					"desc": "Applique [Fury] et [Riposte] à l'animal ciblé."
				}
			],
			"minDmg": 0,
			"iconeDone": true,
			"group": 10,
			"done": 2
		},
		{
			"id": "ThrillOfTheHunt",
			"name": "Frisson de la chasse",
			"desc": "Chaque attaque effectuée à plus de ::value1:: mètres de distance confère ::value2:: [AnimalMarkedBonus].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 8,
					"value2": 1
				},
				"tooltipStatus": [
					{
						"st": "AnimalMarkedBonus"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tvar d = getDistance(skill.unit, a.target);\n\tif( d >= vars.value1 ) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value2);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 2
			},
			"levels": [
				{
					"props": {
						"vars": {
							"value1": 6,
							"value2": 2
						}
					}
				}
			],
			"iconeDone": true,
			"group": 10,
			"done": 2
		},
		{
			"id": "AnimalConnection",
			"name": "Connexion animale",
			"desc": "Au début du combat, acquiert ::value1:: compétence passive des animaux alliés.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1,
					"init": false
				},
				"globalEvents": true
			},
			"script": "function onBeginBattle() {\n\tif (vars.init) return;\n\tif (!vars.init) vars.init = true;\n\tvar allPassive = [];\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif ( u.isAnimal ) {\n\t\t\tvar skills = u.getPassiveSkills();\n\t\t\tfor ( sk in skills ) {\n\t\t\t\tif (!allPassive.contains(sk) && !skill.unit.getPassiveSkills().contains(sk))\n\t\t\t\t\tallPassive.push(sk);\n\t\t\t}\n\t\t}\n\t}\n\tif (allPassive.length == 0) return;\n\tvar nb = 0;\n\tvar i = 0;\n\twhile (i <= allPassive.length && nb < vars.value1 ) {\n\t\tvar sk = allPassive[randInt(0, allPassive.length-1)];\n\t\tif ( skill.unit.addTemporarySkill(sk) ) {\n\t\t\tnb++;\n\t\t}\n\t\tallPassive.remove(sk);\n\t\ti++;\n\t}\n\tif ( nb > 0 ) {\n\t\tspawnFx();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 16,
				"y": 2
			},
			"levels": [
				{
					"props": {
						"vars": {
							"value1": 2
						}
					}
				}
			],
			"iconeDone": true,
			"group": 10,
			"done": 2
		},
		{
			"id": "HuntingDownEasyprey",
			"name": "Traque de proies faciles",
			"desc": "Dégâts augmentés de ::value1::% contre les cibles n'étant adjacentes à aucune autre unité.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 15
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onSkillEval(s) {\n\tfor(t in s.getTargets()) {\n\t\tvar hasAdjacent = false;\n\t\tfor(u in getUnits()) {\n\t\t\tif(t.target.isMelee(u)) {\n\t\t\t\thasAdjacent = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!hasAdjacent)\n\t\t\tt.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 10,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 6,
				"y": 14
			},
			"levels": [
				{
					"props": {
						"vars": {
							"value1": 30
						}
					}
				}
			],
			"done": 2
		},
		{
			"id": "NarsesShot",
			"name": "Tir de Narsès",
			"desc": "Inflige [DMG] à la cible.\nSi [HorounMark] est appliqué sur la cible, consomme le statut.\nSinon, applique [NarsesMark].",
			"mode": 1,
			"range": {
				"baseDistance": 9
			},
			"props": {
				"isAttack": true,
				"defaultAction": true,
				"dmgAttribute": 1,
				"tooltipStatus": [
					{
						"st": "HorounMark"
					},
					{
						"st": "NarsesMark"
					}
				],
				"vars": {
					"value1": 2
				},
				"fxSuffix": 0,
				"needDisengaged": true
			},
			"script": "function onDamage(a) {\n\tif( a.target.hasStatus(Status.HorounMark) ) {\n\t\ta.target.consumeStatus(Status.HorounMark);\n\t\tskill.unit.gainsActionPoint(vars.value1);\n\t}\n\telse\n\t\ta.target.addStatus(Status.NarsesMark);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 6
			},
			"minDmg": 6,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 10,
			"done": 2
		},
		{
			"id": "PoisonedWeapon",
			"name": "Arme empoisonnée",
			"desc": "Chaque fois que cette unité attaque dans le dos, elle applique ::value1:: [Poison]s.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				],
				"vars": {
					"value1": 2
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( a.backstab ) {\n\t\ta.target.addStatus(Status.Poison, vars.value1);\n\t\tif( skill.level == 2 ) {\n\t\t\tfor( u in getFoes(skill.unit) ) {\n\t\t\t\tif( u.isMelee(a.target) ) {\n\t\t\t\t\tspawnFx();\n\t\t\t\t\tu.addStatus(Status.Poison, vars.value1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 1,
				"y": 6
			},
			"levels": [
				{
					"props": {},
					"desc": "Chaque fois que cette unité attaque dans le dos, elle applique ::value1:: [Poison]s.\nLe poison appliqué est propagé aux ennemis adjacents à la cible.\n"
				}
			],
			"iconeDone": true,
			"group": 11,
			"done": 2
		},
		{
			"id": "KnifeThrow",
			"name": "Lancer réflexe",
			"desc": "Après avoir utilisé une compétence, inflige [DMG] à l'ennemi le plus proche dans un rayon de ::value1:: mètres.",
			"mode": 2,
			"range": {
				"baseDistance": 4
			},
			"props": {
				"dmgAttribute": 1,
				"vars": {
					"value1": 4
				},
				"specialAnim": "Throw",
				"preventEngage": true,
				"flags": 64
			},
			"script": "function onSkillPlayed(s) {\n\tvar minD : Float = vars.value1;\n\tvar minFoe = null;\n\tif(s.kind == Skill.KnockOut)\n\t\treturn;\n\tfor( u in getFoes(skill.unit) ) {\n\t\tvar d = getDistance(skill.unit, u);\n\t\tif( d < minD ) {\n\t\t\tminD = d;\n\t\t\tminFoe = u;\n\t\t}\n\t}\n\tif (minFoe != null) {\n\t\t//play(); // made the animation attack play twice\n\t\tspawnFx();\n\t\tattackTarget(minFoe);\n\t\tif ( skill.level == 2 ) {\n\t\t\tskill.unit.movePoints = skill.unit.getMaxMovePoints();\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 14,
				"y": 5
			},
			"minDmg": 2,
			"levels": [
				{
					"props": {},
					"desc": "Après avoir utilisé une compétence, inflige [DMG] à l'ennemi le plus proche dans un rayon de ::value1:: mètres puis réinitialise le [Movement]."
				}
			],
			"iconeDone": true,
			"group": 11,
			"done": 2
		},
		{
			"id": "DeadlyContract",
			"name": "Contrat mortel",
			"desc": "Au début de chaque round, applique [Fragility] à l'ennemi le plus proche pendant ::value1:: round.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Fragility"
					}
				]
			},
			"script": "function onBeginRound() {\n\tvar array = [];\n\tfor( t in getFoes(skill.unit) ) {\n\t\tvar d = getDistance(skill.unit, t);\n\t\tarray.push({ dist : d, target: t });\n\t}\n\tarray.sort(function (u1, u2) {\n\t\tif (u1.dist < u2.dist) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (u2.dist < u1.dist) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n\tvar nb = 1;\n\tif( skill.level == 2 ) {\n\t\tnb = 2;\n\t}\n\tnb = min(array.length, nb);\n\tfor( i in 0...nb ) {\n\t\tspawnFx();\n\t\tarray[i].target.addStatus(Status.Fragility, vars.value1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 16,
				"y": 5
			},
			"levels": [
				{
					"props": {},
					"desc": "Au début de chaque round, applique [Fragility] aux deux ennemis les plus proches pendant ::value1:: round."
				}
			],
			"iconeDone": true,
			"group": 11,
			"done": 2
		},
		{
			"id": "Ordeal",
			"name": "Calvaire",
			"desc": "Chaque fois que cette unité attaque une unité empoisonnée, qui saigne ou qui brûle, elle applique également ::value1:: [Fever].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fever"
					}
				],
				"vars": {
					"value1": 1
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( a.target.hasStatus(Status.Poison) || a.target.hasStatus(Status.Bleeding) || a.target.hasStatus(Status.Burning)) {\n\t\tspawnFx();\n\t\ta.target.addStatus(Status.Fever, vars.value1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 4,
				"y": 8
			},
			"levels": [
				{
					"props": {
						"vars": {
							"value1": 2
						}
					}
				}
			],
			"iconeDone": true,
			"group": 11,
			"done": 2
		},
		{
			"id": "PoisonFlask",
			"name": "Fiole de poison",
			"desc": "Applique ::value1:: [Poison]s à toutes les unités dans la zone.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 4,
				"baseDistance": 6
			},
			"props": {
				"isHeroic": true,
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				],
				"apCost": 1,
				"specialAnim": "ThrowLeftGrenade",
				"vars": {
					"value1": 4
				},
				"useWithoutWeapon": true,
				"castFx": "prefabs/fx/fight/Explosion/PoisonBomb/PoisonBomb.fx",
				"flags": 64,
				"needDisengaged": true,
				"throwModel": "chars/Weapons/LeftHand_IncendiaryFlask.fbx"
			},
			"script": "function onSkill() {\n\tplayAttack();\n\tfor( t in skill.getTargets() ) {\n\t\tif( skill.level == 2 && t.target.hasStatus(Status.Poison) ) {\n\t\t\tt.target.addStatus(Status.Vulnerability);\n\t\t}\n\t\tt.target.addStatus(Status.Poison, vars.value1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 9,
				"y": 1
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Vulnerability"
							}
						]
					},
					"desc": "Applique ::value1:: [Poison]s à toutes les unités dans la zone.\nApplique [Vulnerability] à celles déjà empoisonnées."
				}
			],
			"iconeDone": true,
			"group": 11,
			"done": 2
		},
		{
			"id": "Frenzy",
			"name": "Frénésie",
			"desc": "Inflige [DMG] à la cible.\n\n[Backstab] : Effectue ::value1:: attaques supplémentaires.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 1,
				"vars": {
					"value1": 2,
					"value2": 1
				},
				"isHeroic": true,
				"apCost": 2,
				"extraFx": "prefabs/fx/fight/Attack/AttackPower_D.fx"
			},
			"script": "function onSkill() {\n\tfor( t in skill.getTargets() ) {\n\t\tfor( i in 0...t.attackCount ) {\n\t\t\tattack({ anim : i == t.attackCount - 1 ? null : \"AttackFast\"+(i+1), fast : i < t.attackCount - 1 });\n\t\t}\n\t}\n}\n\nfunction onEval(t) {\n\tvar count = vars.value2;\n\tif( t.backstab ) {\n\t\tcount += vars.value1;\n\t}\n\tt.attackCount = count;\n}\n\nfunction onPostSkill() {\n\tif( skill.level >= 2 && skill.hasTarget() && !skill.target.isAlive() ) {\n\t\tallowReplay();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 7,
				"y": 2
			},
			"minDmg": 3.5,
			"maxDmg": 4.5,
			"levels": [
				{
					"props": {},
					"desc": "Inflige [DMG] à la cible.\n\n[Backstab] : Effectue ::value1:: attaques supplémentaires.\n\n[DeadlyBlow] : Peut réutiliser cette compétence ce tour."
				}
			],
			"iconeDone": true,
			"group": 11,
			"done": 2
		},
		{
			"id": "SmokeScreen",
			"name": "Écran de fumée",
			"desc": "Force les ennemis engagés dans la zone à se désengager. Ils subissent une attaque d'opportunité de leur adversaire.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 4,
				"allowedTargets": 0,
				"baseDistance": 6
			},
			"props": {
				"isHeroic": true,
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				],
				"needDisengaged": true,
				"apCost": 1,
				"specialAnim": "ThrowLeftGrenade",
				"vars": {
					"value1": 2
				},
				"useWithoutWeapon": true,
				"castFx": "prefabs/fx/fight/Explosion/SmokeBomb/SmokeBomb.fx",
				"flags": 64,
				"throwModel": "chars/Weapons/LeftHand_BlindingPowder.fbx"
			},
			"script": "function onSkill() {\n\tplayAttack();\n\tfor( t in skill.getTargets() ) {\n\t\tif( checkReinforce(t) ) {\n\t\t\tt.target.disengage(true);\n\t\t} else if( skill.level == 2 ) {\n\t\t\tt.target.pushback({ unit : skill.unit }, getPushback(t));\n\t\t}\n\t}\n}\n\nfunction getPushback( a ) {\n\tif( skill.level == 2 ) {\n\t\treturn vars.value1;\n\t}\n\treturn 0;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 10,
				"y": 0
			},
			"levels": [
				{
					"props": {
						"pushbackPreview": 2
					},
					"desc": "Force les ennemis engagés dans la zone à se désengager. Ils subissent une attaque d'opportunité de leur adversaire.\nLes ennemis n'étant pas engagés sont repoussés de ::value1:: mètres."
				}
			],
			"iconeDone": true,
			"group": 11,
			"done": 2
		},
		{
			"id": "BetweenTheEyes",
			"name": "Entre les deux yeux",
			"desc": "Inflige [DMG] et applique [Bleeding]. Si la cible saigne déjà, les dégâts sont doublés.",
			"mode": 1,
			"range": {
				"baseDistance": 6
			},
			"props": {
				"apCost": 1,
				"specialAnim": "Throw",
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"vars": {
					"value1": 100,
					"value2": 30
				},
				"dmgAttribute": 1,
				"needDisengaged": true
			},
			"script": "function onEval(a) {\n\tif( a.target.hasStatus(Status.Bleeding) ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t}\n\tif( skill.level == 2 ) {\n\t\ta.criticalHitDamageBonus += vars.value2;\n\t}\n}\n\nfunction onHit(a) {\n\ta.target.addStatus(Status.Bleeding);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 8
			},
			"minDmg": 4,
			"maxDmg": 6,
			"levels": [
				{
					"props": {},
					"desc": "Inflige [DMG] et applique [Bleeding]. Si la cible saigne déjà, les dégâts sont doublés.\nLes [CritHitDamageBonusPercent] de l'attaque sont augmentés de ::value2::%."
				}
			],
			"iconeDone": true,
			"group": 11,
			"done": 2
		},
		{
			"id": "ExplosiveGaz",
			"name": "Gaz explosif",
			"desc": "Double les [Poison]s de toutes les unités dans la zone.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 4,
				"baseDistance": 6
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "Poison"
					},
					{
						"st": "Targeting"
					}
				],
				"specialAnim": "ThrowLeftGrenade",
				"apCost": 2,
				"useWithoutWeapon": true,
				"castFx": "prefabs/fx/fight/Explosion/ExplosiveGaz/ExplosiveGaz.fx",
				"flags": 64,
				"needDisengaged": true,
				"throwModel": "chars/Weapons/LeftHand_IncendiaryFlask.fbx"
			},
			"script": "function onSkill() {\n\tplayAttack();\n\tfor( t in skill.getTargets() ) {\n\t\tfor( s in t.target.getAllStatus() ) {\n\t\t\tif( s.kind == Status.Poison ) {\n\t\t\t\tt.target.addStatus(Status.Poison, s.count);\n\t\t\t}\n\t\t}\n\t}\n\tif( skill.level >= 2 ) {\n\t\tcreateSkillZone(Skill.PoisonZone);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 17,
				"y": 2
			},
			"levels": [
				{
					"props": {},
					"desc": "Double les [Poison] de toutes les unités dans la zone.\nPuis, laisse une zone de poison."
				}
			],
			"iconeDone": true,
			"group": 11,
			"done": 1
		},
		{
			"id": "Withdrawal",
			"name": "Repli",
			"desc": "À la fin de son tour, se désengage.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"chances": 30
				}
			},
			"script": "function onEndTurn() {\n\tif( skill.unit.isEngaged() ) {\n\t\tif( skill.level >= 2 ) {\n\t\t\tskill.unit.addStatus(Status.Riposte);\n\t\t}\n\t\tspawnFx();\n\t\tskill.unit.disengage(false);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 19,
				"y": 2
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Riposte"
							}
						]
					},
					"desc": "À la fin de son tour, se désengage. Si cette unité était engagée, elle gagne [Riposte]."
				}
			],
			"iconeDone": true,
			"group": 11,
			"done": 2
		},
		{
			"id": "CheapShot",
			"name": "Coup bas",
			"desc": "Applique [Blind] à tous les ennemis dans la zone.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 0,
				"baseDistance": 0
			},
			"props": {
				"useWithoutWeapon": true,
				"apCost": 1,
				"tooltipStatus": [
					{
						"st": "Blind"
					}
				],
				"specialAnim": "ThrowGround",
				"castFx": "prefabs/fx/fight/Explosion/FlashBang.fx"
			},
			"script": "function onSkill() {\n\tplay();\n\tfor( t in skill.getTargets() ) {\n\t\tt.target.addStatus(Status.Blind);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 0,
				"y": 3
			},
			"levels": [
				{
					"props": {
						"type": 0,
						"radius": 2,
						"allowedTargets": 0,
						"baseDistance": 0,
						"rangeRadius": 4
					}
				}
			],
			"iconeDone": true,
			"group": 11,
			"done": 2
		},
		{
			"id": "CoolBlood",
			"name": "Sang-froid",
			"desc": "[DamageBonusPercent] des attaques dans le dos augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 20
				}
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( t.backstab ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 3
			},
			"levels": [
				{
					"props": {
						"vars": {
							"value1": 35
						}
					}
				}
			],
			"iconeDone": true,
			"group": 11,
			"done": 2
		},
		{
			"id": "LightningCharge",
			"name": "Électricité statique",
			"desc": "Inflige [DMG] à la cible puis gagne [Electrified].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true,
				"tooltipStatus": [
					{
						"st": "Electrified"
					}
				]
			},
			"script": "function onHit(a) {\n\ta.unit.addStatus(Status.Electrified);\n}",
			"notes": "FX d'éclair needed",
			"iconeDone": true,
			"group": 12,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 5,
				"y": 0
			},
			"done": 2,
			"minDmg": 5
		},
		{
			"id": "TeamSpirit",
			"name": "Esprit d'équipe",
			"desc": "Tant que cette unité est adjacente à un allié, elle a [Brutality].",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Brutality"
					}
				]
			},
			"script": "function onBeginAction() {\n\tvar allies = getAllies(skill.unit);\n\tvar adjacents = [];\n\tfor( u in allies ) {\n\t\tif( u.isMelee(skill.unit) ) {\n\t\t\tadjacents.push(u);\n\t\t}\n\t}\n\n\tif ( adjacents.length > 0 ) {\n\t\tif( skill.unit.addStatusPersist(Status.Brutality, skill) )\n\t\t\tspawnFx();\n\t} else {\n\t\tskill.unit.cancelStatus(Status.Brutality, skill);\n\t}\n\n\tif ( skill.level == 2 ) {\n\t\tvar alliesWithout = [];\n\t\tvar alliesWithSkill = [skill.unit];\n\t\t@sync for ( a in allies ) {\n\t\t\tif ( a.hasSkill(Skill.TeamSpirit, 1) )\n\t\t\t\talliesWithSkill.push(a);\n\t\t\telse\n\t\t\t\talliesWithout.push(a);\n\t\t}\n\t\t@sync for ( u1 in alliesWithout ) {\n\t\t\tvar adjacent = false;\n\t\t\tfor ( u2 in alliesWithSkill ) {\n\t\t\t\tif ( u1.isMelee(u2) ) {\n\t\t\t\t\tadjacent = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( adjacent ) {\n\t\t\t\tif( !u1.hasStatus(Status.Brutality) ) {\n\t\t\t\t\tspawnFx(u1);\n\t\t\t\t}\n\t\t\t\tu1.addStatusPersist(Status.Brutality, skill);\n\t\t\t} else {\n\t\t\t\tu1.cancelStatus(Status.Brutality, skill);\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 18,
				"y": 5
			},
			"levels": [
				{
					"props": {},
					"desc": "Tant que cette unité est adjacente à un allié, elle et cet allié ont [Brutality]."
				}
			],
			"iconeDone": true,
			"group": 12,
			"done": 2
		},
		{
			"id": "SharpSupport",
			"name": "Soutien acéré",
			"desc": "Chaque fois qu'un allié adjacent est attaqué en mêlée par un ennemi, inflige [DMG] à cet ennemi.",
			"mode": 2,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"globalEvents": true
			},
			"script": "function onSkillPlayed(s) {\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( s.unit.side != skill.unit.side && u.isMelee(skill.unit) && u.isMelee(s.unit) && !skill.unit.isEngaged() ) {\n\t\t\tfor( t in s.getTargets() ) {\n\t\t\t\tif( t.target == u && t.dmg > 0 ) {\n\t\t\t\t\tspawnFx();\n\t\t\t\t\tattackTarget(s.unit);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 17,
				"y": 5
			},
			"notes": "",
			"minDmg": 5,
			"levels": [
				{
					"props": {
						"minDmg": 7
					}
				}
			],
			"iconeDone": true,
			"group": 12,
			"done": 2
		},
		{
			"id": "InspiringPresence",
			"name": "Présence inspirante",
			"desc": "À la fin de son tour, confère [Deflection] aux alliés adjacents engagés.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1,
					"value2": 2,
					"value3": 1
				},
				"tooltipStatus": [
					{
						"st": "Deflection"
					}
				]
			},
			"script": "function onEndTurn() {\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( skill.level == 1 && u.isMelee(skill.unit) && u.isEngaged() ) {\n\t\t\tspawnFx();\n\t\t\tu.addStatus(Status.Deflection);\n\t\t} else if ( skill.level == 2 && u.isMelee(skill.unit) ) {\n\t\t\tspawnFx();\n\t\t\tu.addStatus(Status.Deflection);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 4,
				"y": 5
			},
			"levels": [
				{
					"props": {},
					"desc": "À la fin de son tour, confère [Deflection] aux alliés adjacents."
				}
			],
			"iconeDone": true,
			"group": 12,
			"done": 2
		},
		{
			"id": "SweetSpot",
			"name": "Point idéal",
			"desc": "Les attaques à distance appliquent [Destabilization] pendant ::value1:: round.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Destabilization"
					}
				],
				"vars": {
					"value1": 1,
					"value2": 40
				}
			},
			"script": "function onEval(a) {\n\tif( skill.level == 2 && !a.target.isMelee(skill.unit) ) {\n\t\ta.criticalHitPercent += vars.value2;\n\t}\n}\n\nfunction onDamageDealt(t) {\n\tif( t.dmg > 0 && !t.wasMelee ) {\n\t\tif( t.target.addStatus(Status.Destabilization, vars.value1, true) ) {\n\t\t\tspawnFx();\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 8,
				"y": 8
			},
			"levels": [
				{
					"props": {},
					"desc": "Les attaques à distance appliquent [Destabilization] pendant ::value1:: round et ont ::value2::% de chances d'être des coups critiques."
				}
			],
			"iconeDone": true,
			"group": 12,
			"done": 2
		},
		{
			"id": "SpearThrow",
			"name": "Jet perforant",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\nApplique [Bleeding] à la première unité touchée.",
			"mode": 5,
			"range": {
				"type": 2,
				"radius": 1,
				"allowedTargets": 5,
				"baseDistance": 8
			},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"apCost": 1,
				"specialAnim": "Throw",
				"vars": {
					"value1": 1
				},
				"flags": 68,
				"needDisengaged": true
			},
			"script": "function onHit(a) {\n\tvar minD = 10e9;\n\tvar minFoe = null;\n\tfor( t in skill.getTargets() ) {\n\t\tvar d = getDistance(skill.unit, t.target);\n\t\tif( d < minD ) {\n\t\t\tminD = d;\n\t\t\tminFoe = t.target;\n\t\t}\n\t}\n\tif( skill.level == 2 ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t} else minFoe.addStatus(Status.Bleeding);\n\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 14,
				"y": 17
			},
			"minDmg": 5.5,
			"levels": [
				{
					"props": {},
					"desc": "Inflige [DMG] à toutes les unités dans la zone et leur applique [Bleeding]."
				}
			],
			"iconeDone": true,
			"group": 12,
			"done": 2
		},
		{
			"id": "SpearsWall",
			"name": "Mur de lances",
			"desc": "Cible une zone.\nQuand un ennemi traverse la zone, effectue ::value3:: attaque d'opportunité et stoppe son déplacement.\n\nN'arrête pas le déplacement des Élites.",
			"mode": 5,
			"range": {
				"angle": 60,
				"radius": 3,
				"type": 1,
				"allowedTargets": 0
			},
			"props": {
				"globalEvents": true,
				"needDisengaged": true,
				"apCost": 2,
				"vars": {
					"value1": 2,
					"value2": 0,
					"value3": 1
				},
				"tooltipStatus": [
					{
						"st": "Targeting"
					},
					{
						"st": "OpportunityAttack"
					}
				],
				"reactionSkill": true
			},
			"script": "function onSkill() {\n\tvars.value2 = 0;\n\tif( waitNextTurn() ) {\n\t\tcreateZone();\n\t\treturn;\n\t}\n\tcancelZone();\n}\n\nfunction onMoveEvent(m) {\n\tm.stop(isFoe(m.unit) && !m.unit.hasStatus(Status.Champion));\n\tskill.unit.cast(Skill.OpportunityAttack, m.unit, skill);\n\tvars.value2++;\n\tif( vars.value2 == vars.value3 ) {\n\t\tcancelZone();\n\t\tvars.value2 = 0;\n\t}\n}\n\nfunction onMove(m) {\n\tif( m.unit.side == skill.unit.side ) return;\n\tvar z = getZone();\n\tif( z == null ) return;\n\tm.addZoneEvent(z,onMoveEvent);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 18,
				"y": 2
			},
			"levels": [
				{
					"props": {
						"vars": {
							"value3": 2
						}
					},
					"desc": "Cible une zone.\nEffectue une attaque d'opportunité contre les ::value1:: premiers ennemis qui traversent la zone et stoppent leur déplacement."
				}
			],
			"iconeDone": true,
			"group": 12,
			"done": 1
		},
		{
			"id": "RallyingShout",
			"name": "Cri de ralliement",
			"desc": "Applique [Fury] à tous les alliés dans la zone.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 4,
				"allowedTargets": 1,
				"baseDistance": 0
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				],
				"apCost": 1,
				"specialAnim": "Taunt",
				"useWithoutWeapon": true,
				"extraFx": "prefabs/fx/fight/BuffCry/BuffCryBlue.fx"
			},
			"script": "function onSkill() {\n\tplay();\n\tfor( t in skill.getTargets() ) {\n\t\tt.target.addStatus(Status.Fury);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 9,
				"y": 0
			},
			"levels": [
				{
					"props": {
						"rangeRadius": 6
					}
				}
			],
			"iconeDone": true,
			"group": 12,
			"done": 2
		},
		{
			"id": "MasteredWhirlwind",
			"name": "Tourbillon maîtrisé",
			"desc": "Inflige [DMG] à toutes les unités dans la zone et les repousse de ::value1:: mètres. Les dégâts sont augmentés de [VALUE] pour chaque unité dans la zone.",
			"mode": 5,
			"range": {
				"radius": 2.5,
				"type": 0,
				"baseDistance": 0,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"scaledValue": 4,
				"scaledValueAttribute": 0,
				"vars": {
					"value1": 2
				},
				"apCost": 1,
				"specialAnim": "AttackSpin",
				"extraFx": "prefabs/fx/fight/Special/PushingWooshLate.fx"
			},
			"script": "function onEval(a) {\n\ta.dmg += ceil(skill.value*skill.getTargetsCount()-skill.value);\n}\n\nfunction onHit(a) {\n\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n}\n\nfunction getPushback( a ) {\n\treturn vars.value1;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 8
			},
			"minDmg": 3,
			"levels": [
				{
					"props": {
						"value": 6
					}
				}
			],
			"iconeDone": true,
			"group": 12,
			"done": 2
		},
		{
			"id": "Preparation",
			"name": "Préparation",
			"desc": "Si cette unité termine son tour non-engagée, elle gagne [Fury].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				]
			},
			"script": "function onEndTurn() {\n\tif( !skill.unit.isEngaged() ) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.Fury);\n\t\tif( skill.level >= 2 ) {\n\t\t\tskill.unit.addStatus(Status.Riposte);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 3
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Riposte"
							}
						]
					},
					"desc": "Si cette unité termine son tour non-engagée, elle gagne [Fury] et [Riposte]."
				}
			],
			"iconeDone": true,
			"group": 12,
			"done": 2
		},
		{
			"id": "ExploitationOfStrength",
			"name": "Exploitation des forces",
			"desc": "[DamageBonusPercent] augmentés de ::value1::% pour chaque Bonus appliqué sur cette unité.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 5
				}
			},
			"script": "function onSkillEval(s) {\n\tvar nb = 0;\n\tfor( t in s.getTargets() ) {\n\t\tfor( st in skill.unit.getAllStatus() ) {\n\t\t\tif( st.isBonus ) {\n\t\t\t\tnb++;\n\t\t\t}\n\t\t}\n\t\tt.baseDamageBonus += vars.value1*nb;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 6,
				"y": 3
			},
			"levels": [
				{
					"props": {
						"vars": {
							"value1": 10
						}
					}
				}
			],
			"iconeDone": true,
			"group": 12,
			"done": 2
		},
		{
			"id": "LastEffort",
			"name": "Dernier effort",
			"desc": "Applique à cette unité et à l'allié ciblé autant de [AnimalMarkedBonus] qu'ils ont de Malus.",
			"mode": 0,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"apCost": 1,
				"specialAnim": "Taunt",
				"vars": {
					"value1": 0
				},
				"useWithoutWeapon": true,
				"tooltipStatus": [
					{
						"st": "AnimalMarkedBonus"
					}
				],
				"extraFx": "prefabs/fx/fight/BuffCry/BuffCryBlue.fx"
			},
			"script": "function onSkill() {\n\tplay();\n\tvar nb = 0;\n\tfor( t in skill.getTargets() ) {\n\t\tfor( st in t.target.getAllStatus() ) {\n\t\t\tif( st.isMalus ) {\n\t\t\t\tnb++;\n\t\t\t}\n\t\t}\n\t\tt.target.addStatus(Status.AnimalMarkedBonus, nb+vars.value1);\n\t\tnb = 0;\n\t}\n\tfor ( st in skill.unit.getAllStatus() ) {\n\t\tif( st.isMalus ) {\n\t\t\tnb++;\n\t\t}\n\t}\n\tskill.unit.addStatus(Status.AnimalMarkedBonus, nb+vars.value1);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 3
			},
			"levels": [
				{
					"props": {
						"vars": {
							"value1": 2
						}
					},
					"desc": "Applique à cette unité et à l'allié ciblé autant de [AnimalMarkedBonus] qu'ils ont de Malus plus ::value1::."
				}
			],
			"iconeDone": true,
			"group": 12,
			"done": 2
		},
		{
			"id": "ChangeOfPace",
			"name": "Changement de rythme",
			"desc": "Quand cette unité tue un ennemi engagé avec un allié, cette unité et son allié gagnent [Dodge].",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "Dodge"
					}
				]
			},
			"script": "function onDeath(a) {\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( a.target == skill.unit && a.unit.isEngaged() && u.engagedUnit == a.unit  ) {\n\t\t\tskill.unit.addStatus(Status.Dodge);\n\t\t\tu.addStatus(Status.Dodge);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 12,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 5,
				"y": 14
			},
			"done": 2
		},
		{
			"id": "HorounStrike",
			"name": "Frappe de Horoun",
			"desc": "Inflige [DMG] à la cible.\nSi [NarsesMark] est appliqué sur la cible, consomme le statut.\nSinon, applique [HorounMark].",
			"mode": 0,
			"range": {
				"baseDistance": 3
			},
			"props": {
				"isAttack": true,
				"defaultAction": true,
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "NarsesMark"
					},
					{
						"st": "HorounMark"
					},
					{
						"st": "OpportunityAttack"
					}
				],
				"fxSuffix": 0
			},
			"script": "function onDamage(a) {\n\tif( a.target.hasStatus(Status.NarsesMark) ) {\n\t\ta.target.consumeStatus(Status.NarsesMark);\n\t\tskill.unit.opportunityAttack(a.target, skill);\n\t} else a.target.addStatus(Status.HorounMark);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 17,
				"y": 6
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 12,
			"done": 2
		},
		{
			"id": "Madness",
			"name": "Folie",
			"desc": "[DamageBonusPercent] augmentés de ::value1::% contre les unités ayant ::value2::% ou moins de [Health].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50,
					"value2": 30
				}
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\tvar p = 100 * (t.target.health / t.target.stats.health);\n\t\tif( p <= vars.value2 ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 5
			},
			"levels": [
				{
					"props": {
						"vars": {
							"value2": 50
						}
					}
				}
			],
			"iconeDone": true,
			"group": 13,
			"done": 2
		},
		{
			"id": "Recklessness",
			"name": "Témérité",
			"desc": "La première attaque utilisée chaque combat inflige ::value1::% dégâts supplémentaires.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"used": false,
					"value1": 100
				}
			},
			"script": "function onSkillEval(s) {\n\tif( !vars.used ) {\n\t\tfor( t in s.getTargets() ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}\n\nfunction onSkillPlayed(a) {\n\tif( !vars.used ) {\n\t\tvar damageDone = false;\n\t\tfor( t in a.getTargets() ) {\n\t\t\tdamageDone = t.damagedArmor + t.damagedHealth > 0;\n\t\t\ttrace(damageDone);\n\t\t\tif( damageDone ) break;\n\t\t}\n\t\tif( damageDone ) {\n\t\t\tspawnFx();\n\t\t\tvars.used = true;\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 3,
				"y": 5
			},
			"levels": [
				{
					"props": {
						"vars": {
							"value1": 150
						}
					}
				}
			],
			"iconeDone": true,
			"group": 13,
			"done": 2
		},
		{
			"id": "Fanatism",
			"name": "Fanatisme",
			"desc": "À la fin de son tour, cette unité perd ::value1::% de sa [Health] maximum pour gagner [Fury].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				},
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				]
			},
			"script": "function onEndTurn() {\n\tif( !skill.unit.hasStatus(Status.Fury) ) {\n\t\tspawnFx();\n\t\tif( skill.level == 1 ) {\n\t\t\tskill.unit.damages(skill, ceil(skill.unit.stats.health*vars.value1/100), true);\n\t\t}\n\t\tskill.unit.addStatus(Status.Fury);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 10,
				"y": 8
			},
			"levels": [
				{
					"props": {},
					"desc": "À la fin de son tour, gagne [Fury]."
				}
			],
			"iconeDone": true,
			"group": 13,
			"done": 2
		},
		{
			"id": "FirstBlood",
			"name": "Premier sang",
			"desc": "[DamageBonusPercent] augmentés de ::value1::% contre les unités ennemies dont la [Health] est intacte.",
			"mode": 2,
			"range": {
				"allowedTargets": 0
			},
			"props": {
				"vars": {
					"healthproc": 100,
					"value1": 35,
					"value2": 2
				}
			},
			"script": "function onBeforeHit(a) {\n\tif( skill.level == 2 ) {\n\t\tif( a.target.side != skill.unit.side ) {\n\t\t\tvar p = 100 * (a.target.health / a.target.stats.health);\n\t\t\tif( p == vars.healthproc ) {\n\t\t\t\tif( a.target.addStatus(Status.Fragility, vars.value2, true) )\n\t\t\t\t\tspawnFx();\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tvar p = 100 * (t.target.health / t.target.stats.health);\n\t\tif( p == vars.healthproc )\n\t\t\tt.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 7,
				"y": 5
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Fragility"
							}
						]
					},
					"desc": "[DamageBonusPercent] augmentés de ::value1::% contre les unités dont la [Health] est intacte.\nLeur applique également [Fragility] pendant ::value2:: rounds."
				}
			],
			"iconeDone": true,
			"group": 13,
			"done": 2
		},
		{
			"id": "SharpWhirlwind",
			"name": "Tourbillon tranchant",
			"desc": "Inflige [DMG] à toutes les unités dans la zone. Attaque ::value1:: fois pour chaque unité dans la zone.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 5,
				"baseDistance": 0
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 1
				},
				"apCost": 2,
				"specialAnim": "AttackSpin"
			},
			"script": "function onEval(t) {\n\tvar count = 0;\n\tfor( t in skill.getTargets() )\n\t\tcount += vars.value1;\n\tt.attackCount = count;\n}\n\nfunction onPostSkill() {\n\tvar count = 0;\n\tfor( t in skill.getTargets() ) {\n\t\tif( skill.level == 2 && !t.target.isAlive() ) {\n\t\t\tcount += vars.value1;\n\t\t}\n\t}\n\tif( count > 0 ) {\n\t\tfor( t in skill.getTargets() )\n\t\t\tt.attackCount = count;\n\t\tattack();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 4,
				"y": 2
			},
			"minDmg": 3.5,
			"levels": [
				{
					"props": {},
					"desc": "Inflige [DMG] à toutes les unités dans la zone. Attaque ::value1:: fois pour chaque unité dans la zone.\n\n[DeadlyBlow] : Attaque de nouveau."
				}
			],
			"iconeDone": true,
			"group": 13,
			"done": 2
		},
		{
			"id": "Outburst",
			"name": "Déchaînement",
			"desc": "Inflige ::value1:: fois [DMG] à la cible.\n\n[CapaCritical] : Gagne [Fury].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 3,
					"value2": 30
				},
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				],
				"apCost": 1
			},
			"script": "function onDamage(a) {\n\tif( a.isCritical ) {\n\t\tskill.unit.addStatus(Status.Fury);\n\t}\n}\n\nfunction onEval(a) {\n\ta.attackCount = vars.value1;\n}\n\nfunction onSkill() {\n\tvar count = vars.value1;\n\tfor( i in 0...count ) {\n\t\tattack({ anim : i == count - 1 ? \"AttackPower\" : \"AttackFast\"+(i%2+1), fast : i < count - 1 });\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 2
			},
			"minDmg": 3,
			"maxDmg": 4.5,
			"levels": [
				{
					"props": {
						"flags": 1
					},
					"desc": "Inflige ::value1:: fois [DMG] à la cible et ignore la [Guard].\n\n[CapaCritical] : Gagne [Fury]."
				}
			],
			"iconeDone": true,
			"group": 13,
			"done": 2
		},
		{
			"id": "Ovation",
			"name": "Ovation",
			"desc": "Tous les alliés engagés gagnent [Riposte].",
			"mode": 4,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"specialAnim": "Taunt",
				"tooltipStatus": [
					{
						"st": "Riposte"
					}
				],
				"apCost": 2,
				"useWithoutWeapon": true,
				"extraFx": "prefabs/fx/fight/BuffCry/BuffCryBlue.fx"
			},
			"script": "function onSkill() {\n\tplay();\n\t@sync for( u in getAllies(skill.unit)) {\n\t\tif( u.isEngaged() ) {\n\t\t\tu.addStatus(Status.Riposte);\n\t\t}\n\t\tif( skill.level == 2 && !u.isEngaged() ) {\n\t\t\tu.addStatus(Status.Inspiration, vars.value1, true);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 14,
				"y": 3
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Inspiration"
							}
						]
					},
					"desc": "Tous les alliés engagés gagnent [Riposte].\nTous les alliés non-engagés gagnent [Inspiration] pendant ::value1:: round."
				}
			],
			"iconeDone": true,
			"group": 13,
			"done": 2
		},
		{
			"id": "PridefulStrike",
			"name": "Frappe orgueilleuse",
			"desc": "Inflige [DMG] à la cible. Les dégâts sont doublés si la cible a strictement plus de [Health].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"apCost": 1,
				"vars": {
					"value1": 100,
					"value2": 200
				},
				"specialAnim": "AttackPower",
				"aiOrder": 1
			},
			"script": "function onEval(a) {\n\tif( a.target.health > skill.unit.health ) {\n\t\tif( skill.level == 2 ) {\n\t\t\ta.baseDamageBonus += vars.value2;\n\t\t} else a.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 11,
				"y": 8
			},
			"minDmg": 4,
			"maxDmg": 6,
			"levels": [
				{
					"props": {},
					"desc": "Inflige [DMG] à la cible. Les dégâts sont triplés si la cible a strictement plus de [Health]."
				}
			],
			"iconeDone": true,
			"group": 13,
			"done": 2
		},
		{
			"id": "WarCry",
			"name": "Cri de guerre",
			"desc": "L'unité et tous les alliés dans la zone gagnent [Brutality] pendant ::value1:: rounds.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 6,
				"allowedTargets": 2,
				"baseDistance": 0
			},
			"props": {
				"vars": {
					"value1": 2
				},
				"apCost": 1,
				"tooltipStatus": [
					{
						"st": "Brutality"
					}
				],
				"specialAnim": "Taunt",
				"useWithoutWeapon": true,
				"extraFx": "prefabs/fx/fight/BuffCry/BuffCryBlue.fx"
			},
			"script": "function onSkill() {\n\tplay();\n\tfor( t in skill.getTargets() ) {\n\t\tt.target.addStatus(Status.Brutality, vars.value1, true);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 3
			},
			"levels": [
				{
					"props": {
						"rangeRadius": 10,
						"vars": {
							"value1": 3
						}
					}
				}
			],
			"iconeDone": true,
			"group": 13,
			"done": 2
		},
		{
			"id": "ChallengeCry",
			"name": "Cri de défi",
			"desc": "Attire en mêlée tous les ennemis dans la zone.\nApplique [Fragility] pendant ::value2:: rounds aux ennemis ainsi désengagés.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 0,
				"baseDistance": 0
			},
			"props": {
				"vars": {
					"value1": 3,
					"value2": 1
				},
				"useWithoutWeapon": true,
				"apCost": 1,
				"tooltipStatus": [
					{
						"st": "Fragility"
					}
				],
				"specialAnim": "Taunt",
				"extraFx": "prefabs/fx/fight/Taunt/ChallengingShout.fx"
			},
			"script": "function onSkill() {\n\tplay();\n\tvar arr = [];\n\tfor( t in skill.getTargets() ) {\n\t\tif( skill.level >= 2 ) {\n\t\t\tt.target.addStatus(Status.Fragility, vars.value2, true);\n\t\t} else if( t.target.isEngaged() ) {\n\t\t\tarr.push(t);\n\t\t}\n\t\tt.target.pushback({ unit : skill.unit },-vars.value1);\n\t}\n\tfor( t in arr ) {\n\t\tif( !t.target.isEngaged() ) {\n\t\t\tt.target.addStatus(Status.Fragility, vars.value2, true);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 3
			},
			"levels": [
				{
					"props": {},
					"desc": "Attire en mêlée tous les ennemis dans la zone et leur applique [Fragility] pendant ::value2:: rounds."
				}
			],
			"iconeDone": true,
			"group": 13,
			"done": 2
		},
		{
			"id": "Ecstasy",
			"name": "Extase",
			"desc": "Tant que cette unité a moins de ::value1::% de [Health], elle inflige toujours des coups critiques.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"globalEvents": true
			},
			"script": "function onSkillEval(s) {\n\tif( skill.unit == s.unit ) {\n\t\tvar p = 100 * (skill.unit.health / skill.unit.stats.health);\n\t\tif( p < vars.value1 ) {\n\t\t\tfor ( t in s.getTargets() ) {\n\t\t\t\tt.criticalHitPercent = 100;\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 3
			},
			"levels": [
				{
					"props": {
						"vars": {
							"value1": 80
						}
					}
				}
			],
			"iconeDone": true,
			"group": 13,
			"done": 2
		},
		{
			"id": "ExceedingLimits",
			"name": "Dépassement des limites",
			"desc": "[CritHitDamageBonusPercent] augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"attributes": [
					{
						"kind": "CritHitDamageBonusPercent",
						"value": 25
					}
				],
				"feature": "Alazar1_Update",
				"vars": {
					"value1": 25
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 13,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 14
			},
			"levels": [
				{
					"props": {
						"attributes": [
							{
								"kind": "CritHitDamageBonusPercent",
								"value": 50
							}
						]
					}
				}
			],
			"done": 2
		},
		{
			"id": "Opportunism",
			"name": "Opportunisme",
			"desc": "Tant qu'il y a au moins ::value1:: ennemis à moins de ::value2:: mètres de cette unité, elle a [Protection].",
			"mode": 2,
			"range": {
				"type": 0,
				"radius": 6,
				"baseDistance": 0,
				"allowedTargets": 0
			},
			"props": {
				"vars": {
					"value1": 2,
					"value2": 6,
					"value3": 4
				},
				"tooltipStatus": [
					{
						"st": "Protection"
					}
				],
				"globalEvents": true
			},
			"script": "function onBeginAction() {\n\tvar foes = getFoes(skill.unit);\n\tvar nb = 0;\n\tfor( u in foes ) {\n\t\tif( getDistance(skill.unit, u) <= vars.value2 ) {\n\t\t\tnb++;\n\t\t}\n\t}\n\tif( skill.level ==  2 ) {\n\t\tif( nb >= vars.value3 ) {\n\t\t\tif( skill.unit.addStatusPersist(Status.Brutality, skill) ) {\n\t\t\t\tspawnFx();\n\t\t\t}\n\t\t} else {\n\t\t\tskill.unit.cancelStatus(Status.Brutality, skill);\n\t\t}\n\t}\n\tif( nb >= vars.value1 ) {\n\t\tif( skill.unit.addStatusPersist(Status.Protection, skill) ) {\n\t\t\tspawnFx();\n\t\t}\n\t} else {\n\t\tskill.unit.cancelStatus(Status.Protection, skill);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 16
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Brutality"
							}
						]
					},
					"desc": "Tant qu'il y a au moins ::value1:: ennemis à moins de ::value2:: mètres de cette unité, elle a [Protection].\nS'il y en a au moins ::value3::, elle a également [Brutality]."
				}
			],
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "Cruelty",
			"name": "Cruauté",
			"desc": "[DamageBonusPercent] et  [CritHitPercent] augmentés de ::value1::% contre les unités ayant au moins un Malus.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 20
				},
				"globalEvents": true
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( s.unit == skill.unit ) {\n\t\t\tfor( st in t.target.getAllStatus() ) {\n\t\t\t\tif( st.isMalus ) {\n\t\t\t\t\tt.baseDamageBonus += vars.value1;\n\t\t\t\t\tt.criticalHitPercent += vars.value1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif( skill.level == 2 && t.target == skill.unit ) {\n\t\t\tfor( st in s.unit.getAllStatus() ) {\n\t\t\t\tif( st.isMalus ) {\n\t\t\t\t\tt.baseDamageBonus -= vars.value1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 5
			},
			"levels": [
				{
					"props": {},
					"desc": "[DamageBonusPercent] et  [CritHitPercent] augmentés de ::value1::% contre les unités ayant au moins un Malus.\nEn retour, elles infligent ::value1::% de [DamageBonusPercent] de moins à cette unité."
				}
			],
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "ArmorBreaker",
			"name": "Brise-armure",
			"desc": "[DamageBonusPercent] infligés à l'[Armor] augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 35
				}
			},
			"script": "var targetWithArmor = [];\nfunction onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( t.target.armor > 0 ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t\ttargetWithArmor.push(t.target);\n\t\t}\n\t}\n}\n\nfunction onDamageDealt(a) {\n\tif( skill.level == 2 && a.target.armor <= 0 && targetWithArmor.contains(a.target) ) {\n\t\tvar brutality = skill.unit.addStatusPersist(Status.Brutality, skill);\n\t\tvar inspiration = skill.unit.addStatusPersist(Status.Inspiration, skill);\n\t\tif( brutality || inspiration )\n\t\t\tspawnFx();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 8,
				"y": 7
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Brutality"
							},
							{
								"st": "Inspiration"
							}
						]
					},
					"desc": "[DamageBonusPercent] infligés à l'[Armor] augmentés de ::value1::%.\nSi une attaque de cette unité détruit l'[Armor] d'un ennemi, elle gagne [Brutality] et [Inspiration]."
				}
			],
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "Bash",
			"name": "Coup de boule",
			"desc": "À la fin de son tour, inflige [VALUE] dégâts à la [Health] de la cible la plus proche.",
			"mode": 2,
			"range": {},
			"props": {
				"scaledValue": 3,
				"scaledValueAttribute": 0
			},
			"script": "function onEndTurn() {\n\tvar minD = 10e9;\n\tvar minFoe = skill.unit.engagedUnit;\n\tif ( minFoe == null ) {\n\t\tfor( u in getFoes(skill.unit) ) {\n\t\t\tvar d = getDistance(skill.unit, u);\n\t\t\tif( d < minD ) {\n\t\t\t\tminD = d;\n\t\t\t\tminFoe = u;\n\t\t\t}\n\t\t}\n\t}\n\tif( minFoe != null && skill.unit.isMelee(minFoe) ) {\n\t\tif( !minFoe.isEngaged() ) {\n\t\t\tskill.unit.engage(minFoe);\n\t\t}\n\t\tspawnFx();\n\t\tskill.unit.cast(Skill.Bash_Skill, minFoe, skill);\n\t}\n}",
			"notes": "Réservé à la classe gladiateur mace (patch Gosenberg)",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 8
			},
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "Bash_Skill",
			"name": "",
			"desc": "",
			"mode": 0,
			"range": {},
			"props": {
				"flags": 2,
				"dmgAttribute": 0
			},
			"script": "",
			"notes": "",
			"minDmg": 3,
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "PoisonedImpact",
			"name": "Impact empoisonné",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\nApplique ::value1:: [Poison]s aux unités qui saignent.",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 2,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				],
				"apCost": 1,
				"specialAnim": "AttackWide",
				"vars": {
					"value1": 2
				},
				"fxSuffix": 3
			},
			"script": "function onHit(a) {\n\tif( skill.level == 2 ) {\n\t\ta.target.addStatus(Status.Poison, vars.value1);\n\t}\n\n\tif( a.target.hasStatus(Status.Bleeding)) {\n\t\ta.target.addStatus(Status.Poison, vars.value1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 4,
				"y": 3
			},
			"minDmg": 6,
			"levels": [
				{
					"props": {},
					"desc": "Inflige [DMG] à toutes les unités dans la zone.\nApplique ::value1:: [Poison]s à toutes les unités ainsi que ::value1:: [Poison]s aux unités qui saignent."
				}
			],
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "WeakeningShock",
			"name": "Choc affaiblissant",
			"desc": "Inflige [DMG] à la cible et lui applique [Weakening] pendant ::value1:: rounds.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 3
				},
				"tooltipStatus": [
					{
						"st": "Weakening"
					}
				],
				"apCost": 1,
				"specialAnim": "AttackPower"
			},
			"script": "function onDamage(a) {\n\tif( skill.level == 2 && a.target.hasStatus(Status.Weakening) ) {\n\t\ta.target.addStatus(Status.Vulnerability);\n\t}\n\ta.target.addStatus(Status.Weakening, vars.value1, true);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 3
			},
			"minDmg": 7,
			"maxDmg": 9,
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Vulnerability"
							}
						]
					},
					"desc": "Inflige [DMG] à la cible et lui applique [Weakening] pendant ::value1:: rounds.\nSi l'unité est déjà affaiblie, lui applique également [Vulnerability]."
				}
			],
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "RelentlessCharge",
			"name": "Charge implacable",
			"desc": "Se désengage et charge en ligne droite. Inflige [DMG] à toutes les unités sur le chemin et applique [Slowdown] pendant ::value1:: round.",
			"mode": 3,
			"range": {
				"flags": 1,
				"baseDistance": 6
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Slowdown"
					}
				],
				"apCost": 1,
				"specialAnim": "RunCharge"
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Slowdown, vars.value1, true);\n}\n\nfunction onPostSkill() {\n\tif( skill.level == 2 ) {\n\t\tfor( u in getFoes(skill.unit) ) {\n\t\t\tif( skill.unit.isMelee(u) ) {\n\t\t\t\tskill.unit.addStatus(Status.Fury);\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 3
			},
			"minDmg": 6,
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Fury"
							}
						]
					},
					"desc": "Se désengage et charge en ligne droite. Inflige [DMG] à toutes les unités sur le chemin et applique [Slowdown] pendant ::value1:: round.\nSi cette unité termine adjacente à un ennemi, elle gagne [Fury].\n"
				}
			],
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "ThunderousBlow",
			"name": "Coup tonitruant",
			"desc": "Inflige [DMG] à la cible. Si elle est engagée avec un allié, la force à se désengager et elle subit une attaque d'opportunité de l'allié.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"apCost": 1,
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				],
				"specialAnim": "AttackPower"
			},
			"script": "function onDamage(a) {\n\tif( skill.level == 2 && a.backstab ) {\n\t\ta.target.addStatus(Status.Vulnerability);\n\t}\n\tif( a.target.isEngaged() && a.target.engagedUnit != skill.unit ) {\n\t\ta.target.disengage(true);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 14,
				"y": 8
			},
			"minDmg": 2,
			"maxDmg": 4,
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Vulnerability"
							}
						]
					},
					"desc": "Inflige [DMG] à la cible. Si elle est engagée avec un allié, la force à se désengager et elle subit une attaque d'opportunité de l'allié.\n\n[Backstab] : Applique [Vulnerability]."
				}
			],
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "GuardBreaker",
			"name": "Brise-garde",
			"desc": "Les attaques ignorent ::value1::% de la [Guard] ennemie.",
			"mode": 2,
			"range": {},
			"props": {
				"attributes": [
					{
						"kind": "IgnoreGuard",
						"value": 50
					}
				],
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 3
			},
			"levels": [
				{
					"props": {
						"attributes": [
							{
								"kind": "IgnoreGuard",
								"value": 100
							}
						],
						"vars": {
							"value1": 100
						}
					}
				}
			],
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "Temperance",
			"name": "Tempérance",
			"desc": "Après avoir subi ::value2:: attaques, cette unité gagne [Deflection].\n\nAttaques subies : ::value1::",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 0,
					"value2": 2
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Deflection"
					}
				]
			},
			"script": "function onDamageTaken(s) {\n\tif( s.unit != skill.unit && s.target == skill.unit ) {\n\t\tvars.value1++;\n\t}\n\tif( vars.value1 >= vars.value2 ) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.Deflection);\n\t\tif( skill.level == 2) {\n\t\t\tskill.unit.addStatus(Status.Riposte);\n\t\t}\n\t\tvars.value1 = 0;\n\t}\n\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 3
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Riposte"
							}
						]
					},
					"desc": "Après avoir subi ::value2:: attaques, cette unité gagne [Deflection] et [Riposte].\n\nAttaques subies : ::value1::"
				}
			],
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "OneOnOne",
			"name": "Face-à-face",
			"desc": "Tant qu'aucune autre unité n'est adjacente à cette unité ou à son adversaire engagé, elle a [Rivalry].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Rivalry"
					}
				],
				"globalEvents": true
			},
			"script": "function onBeginAction() {\n\tvar valid = true;\n\tfor( u in getUnits() ) {\n\t\tif( skill.unit.isMelee(u) && skill.unit.engagedUnit != u ) {\n\t\t\tvalid = false;\n\t\t\tbreak;\n\t\t}\n\t\tif( skill.level == 1 && skill.unit.engagedUnit != null && skill.unit.engagedUnit.isMelee(u) && u != skill.unit ) {\n\t\t\tvalid = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif( valid ) {\n\t\tif( !skill.unit.hasStatus(Status.Rivalry) ) {\n\t\t\tspawnFx();\n\t\t}\n\t\tskill.unit.addStatusPersist(Status.Rivalry, skill);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 16,
				"y": 3
			},
			"levels": [
				{
					"props": {},
					"desc": "Tant qu'aucune autre unité n'est adjacente à cette unité, elle a [Rivalry]."
				}
			],
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "OverwhelmingPresence",
			"name": "Présence écrasante",
			"desc": "Si cette unité a plus d'[Armor] que son adversaire engagé, ses attaques sont forcément critiques.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( skill.unit.armor > t.target.armor ) {\n\t\t\tt.criticalHitPercent == 100;\n\t\t\tif( skill.level == 2 ) {\n\t\t\t\tt.target.addStatus(Status.Confus, vars.value1, true);\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 14,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 3,
				"y": 14
			},
			"levels": [
				{
					"props": {
						"tooltipStatus": [
							{
								"st": "Confus"
							}
						]
					},
					"desc": "Si cette unité a plus d'[Armor] que son adversaire engagé, ses attaques sont forcément critiques et appliquent [Confus] pendant ::value1:: round."
				}
			],
			"done": 2
		},
		{
			"id": "ErkeshetWrath",
			"name": "Courroux d'Erkeshet",
			"desc": "Inflige [DMG] à la cible.\nSi cette unité a plus de [Strength] que la cible, les dégâts sont doublés et un coup critique est assuré.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 100
				},
				"isAttack": true,
				"defaultAction": true,
				"specialAnim": "AttackPower",
				"fxSuffix": 0
			},
			"script": "function onEval(a) {\n\tif( skill.unit.stats.strength > a.target.stats.strength ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t\ta.criticalHitPercent = 100;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 2,
				"y": 14
			},
			"minDmg": 5,
			"maxDmg": 6,
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "InsectSmash",
			"name": "PAF !",
			"desc": "Inflige [DMG] à la cible. Si la cible est un moustique, les dégâts sont augmentés de ::value1::%.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 1000
				},
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true,
				"specialAnim": "AttackWide"
			},
			"script": "function onEval(a) {\n\tif( a.target.kind == UnitClass.Mosquito ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 0
			},
			"minDmg": 2,
			"maxDmg": 4,
			"iconeDone": true,
			"group": 14,
			"done": 2
		},
		{
			"id": "Protection",
			"name": "Protection",
			"desc": "Gagne [Deflection].",
			"mode": 4,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Deflection"
					}
				],
				"isHeroic": true,
				"apCost": 1,
				"specialAnim": "Taunt",
				"aiOrder": 1
			},
			"script": "function onSkill() {\n\tplay();\n\tskill.unit.addStatus(Status.Deflection);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 1
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "ShieldSlam",
			"name": "Coup de bouclier",
			"desc": "Inflige [DMG] à la cible et lui applique [Fragility] pendant ::value1:: round.",
			"mode": 0,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fragility"
					}
				],
				"vars": {
					"value1": 1
				},
				"isHeroic": true,
				"apCost": 1,
				"dmgAttribute": 0,
				"specialAnim": "AttackShield",
				"aiOrder": 1
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Fragility, vars.value1, true);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 3
			},
			"minDmg": 3,
			"maxDmg": 4,
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "BurningShieldSlam",
			"name": "Coup flamboyant",
			"desc": "Inflige [DMG] à la cible et lui applique [Burning].",
			"mode": 0,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Burning"
					}
				],
				"isHeroic": true,
				"apCost": 1,
				"dmgAttribute": 0,
				"specialAnim": "AttackShield",
				"aiOrder": 1
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Burning);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 8
			},
			"minDmg": 3,
			"maxDmg": 4,
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "CounterArrows",
			"name": "Contre-flèches",
			"desc": "[DamageTakenPercent] des attaques de Tir réduits de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 90
				},
				"isHeroic": true,
				"globalEvents": true
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( a.isPrecisionSkill() ) {\n\t\t\tif( a.unit != skill.unit && t.target == skill.unit ) {\n\t\t\t\tt.baseDamageBonus -= vars.value1;\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 0
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "MotivatingSlam",
			"name": "Heurt motivant",
			"desc": "Inflige [DMG] à la cible et cette unité et tous ses alliés adjacents gagnent [Motivation] pendant ::value1:: round.",
			"mode": 0,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Motivation"
					}
				],
				"vars": {
					"value1": 1
				},
				"isHeroic": true,
				"apCost": 1,
				"dmgAttribute": 0,
				"specialAnim": "AttackShield",
				"aiOrder": 1
			},
			"script": "function onDamage(a) {\n\tskill.unit.addStatus(Status.Motivation, vars.value1, true);\n\tfor(u in getAllies(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) ) {\n\t\t\tu.addStatus(Status.Motivation, vars.value1, true);\n\t\t}\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 16,
				"y": 1
			},
			"minDmg": 3,
			"maxDmg": 4
		},
		{
			"id": "EngagingSlam",
			"name": "Heurt d'engagement",
			"desc": "Inflige [DMG] à la cible. Si la cible est engagée avec cette capacité, cette unité gagne [Riposte].",
			"mode": 0,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Riposte"
					}
				],
				"isHeroic": true,
				"apCost": 1,
				"dmgAttribute": 0,
				"specialAnim": "AttackShield",
				"vars": {
					"engaged": false
				},
				"aiOrder": 1
			},
			"script": "function onEval(a) {\n\tif( !a.target.isEngaged() || a.target.engagedUnit != skill.unit ) {\n\t\tvars.engaged = false;\n\t} else vars.engaged = true;\n}\n\nfunction onDamage(a) {\n\tif( a.target.isEngaged() && skill.unit.engagedUnit == a.target && !vars.engaged ) {\n\t\tskill.unit.addStatus(Status.Riposte);\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 17,
				"y": 1
			},
			"minDmg": 3,
			"maxDmg": 4
		},
		{
			"id": "AgressiveShielding",
			"name": "Tenue de bouclier agressive",
			"desc": "Si cette unité a encore de l'armure, renvoie ::value1::% des dégâts subis à l'attaquant.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 15
				}
			},
			"script": "function onDamageTaken(a) {\n\tif(skill.unit.armor > 0 && a.unit.isMelee(skill.unit))\n\t\ta.unit.damages(skill, ceil(a.dmg*vars.value1/100));\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 18,
				"y": 1
			}
		},
		{
			"id": "PowerfulBackhand",
			"name": "Puissant revers",
			"desc": "Après avoir subi une attaque de la part de son adversaire engagé, réplique avec une attaque d'opportunité.\n\nUne attaque d'opportunité subie ne peut pas déclencher cet effet.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onDamageTaken(a) {\n\tif( !a.isOpportunityAttack() && a.unit == skill.unit.engagedUnit ) {\n\t\tskill.unit.opportunityAttack(a.unit, skill);\n\t}\n}",
			"notes": "",
			"done": 2,
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 0,
				"y": 2
			}
		},
		{
			"id": "AnimalLink",
			"name": "Lien animal",
			"desc": "Si cette unité termine son tour adjacente à un animal allié, elle lui applique [Deflection].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Deflection"
					}
				]
			},
			"script": "function onEndTurn() {\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( u.isAnimal && u.isMelee(skill.unit) ) {\n\t\t\tu.addStatus(Status.Deflection);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 13,
				"y": 0
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "TorchStrike",
			"name": "Coup de torche",
			"desc": "Inflige [DMG] à toutes les unités dans la zone et leur applique [Burning].",
			"mode": 5,
			"range": {
				"radius": 2,
				"angle": 160,
				"type": 1,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 2,
				"tooltipStatus": [
					{
						"st": "Burning"
					}
				],
				"damageType": [
					0
				],
				"specialAnim": "AttackLeftHand",
				"apCost": 0,
				"itemCost": {
					"item": "Torch",
					"qty": 1
				},
				"fxSuffix": 2
			},
			"script": "function onHit(a) {\n\ta.target.addStatus(Status.Burning);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 16,
				"y": 8
			},
			"minDmg": 3,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "TorchRuinsThrow",
			"name": "Lancer de torche des ruines",
			"desc": "Crée un [Fire].",
			"mode": 5,
			"range": {
				"radius": 1,
				"type": 0,
				"allowedTargets": 4,
				"baseDistance": 10
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fire"
					},
					{
						"st": "Burning"
					}
				],
				"specialAnim": "ThrowLeftGrenade",
				"apCost": 0,
				"itemCost": {
					"item": "TorchRuins",
					"qty": 3
				},
				"fxSuffix": 2
			},
			"script": "function onZoneHit(){\n\tcreateSkillZone(Skill.FireZone);\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 19
			},
			"group": 15,
			"done": 2
		},
		{
			"id": "Boarding",
			"name": "Abordage",
			"desc": "Inflige [DMG] à la cible et l'attire jusqu'en mêlée pour l'engager.",
			"mode": 1,
			"range": {
				"flags": 1,
				"baseDistance": 6
			},
			"props": {
				"vars": {
					"value1": 6
				},
				"dmgAttribute": 0,
				"apCost": 1,
				"needDisengaged": true,
				"specialAnim": "AttackLeftHand",
				"aiOrder": 1
			},
			"script": "function onHit(a) {\n\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n}\n\nfunction onDamage(a) {\n\tif( a.target.isMelee(skill.unit) && a.target.side != skill.unit.side ) {\n\t\ta.target.disengage(false);\n\t\ta.target.engage(skill.unit);\n\t}\n}\n\nfunction getPushback( a ) {\n\treturn -vars.value1;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 0,
				"y": 3
			},
			"minDmg": 3,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "AxeThrow",
			"name": "Lancer de hache",
			"desc": "Inflige [DMG] à la cible.\n\n[CapaCritical] : Applique [Bleeding].",
			"mode": 1,
			"range": {
				"baseDistance": 4
			},
			"props": {
				"dmgAttribute": 0,
				"apCost": 0,
				"needDisengaged": true,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingAxe",
					"qty": 1
				},
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"aiOrder": 1
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 1,
				"y": 3
			},
			"minDmg": 2.5,
			"maxDmg": 5,
			"levels": [],
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "AxeThrowT2",
			"name": "Lancer de hache",
			"desc": "Inflige [DMG] à la cible.\n\n[CapaCritical] : Applique [Bleeding].",
			"mode": 1,
			"range": {
				"baseDistance": 4
			},
			"props": {
				"dmgAttribute": 0,
				"needDisengaged": true,
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingAxeT2",
					"qty": 1
				}
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 1,
				"y": 0
			},
			"minDmg": 3,
			"maxDmg": 5.5,
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "AxeThrowT3",
			"name": "Lancer de hache",
			"desc": "Inflige [DMG] à la cible.\n\n[CapaCritical] : Applique [Bleeding].",
			"mode": 1,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"dmgAttribute": 0,
				"needDisengaged": true,
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingAxeT3",
					"qty": 1
				}
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 1,
				"y": 1
			},
			"minDmg": 3.5,
			"maxDmg": 6,
			"group": 15,
			"done": 2
		},
		{
			"id": "AxeThrowT4",
			"name": "Lancer de hache",
			"desc": "Inflige [DMG] à la cible.\n\n[CapaCritical] : Applique [Bleeding].",
			"mode": 1,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"dmgAttribute": 0,
				"needDisengaged": true,
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingAxeT4",
					"qty": 1
				}
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 1,
				"y": 4
			},
			"minDmg": 4,
			"maxDmg": 6,
			"done": 2
		},
		{
			"id": "PowerfulAxeThrow",
			"name": "Lancer de hache puissante",
			"desc": "Inflige [DMG] à la cible.\nIgnore la garde.\n\n[CapaCritical] : Applique [Bleeding].",
			"mode": 1,
			"range": {
				"baseDistance": 4
			},
			"props": {
				"dmgAttribute": 0,
				"apCost": 0,
				"needDisengaged": true,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "PowerfulThrowingAxe",
					"qty": 1
				},
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"flags": 1,
				"feature": "Alazar1_Update"
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 16,
				"y": 3
			},
			"minDmg": 2.5,
			"maxDmg": 5,
			"levels": [],
			"done": 2
		},
		{
			"id": "PowerfulAxeThrowT2",
			"name": "Lancer de hache puissante",
			"desc": "Inflige [DMG] à la cible.\nIgnore la garde.\n\n[CapaCritical] : Applique [Bleeding].",
			"mode": 1,
			"range": {
				"baseDistance": 4
			},
			"props": {
				"dmgAttribute": 0,
				"needDisengaged": true,
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "PowerfulThrowingAxeT2",
					"qty": 1
				},
				"flags": 1,
				"feature": "Alazar1_Update"
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 2,
				"y": 0
			},
			"minDmg": 3,
			"maxDmg": 5.5,
			"done": 2
		},
		{
			"id": "PowerfulAxeThrowT3",
			"name": "Lancer de hache puissante",
			"desc": "Inflige [DMG] à la cible.\nIgnore la garde.\n\n[CapaCritical] : Applique [Bleeding].",
			"mode": 1,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"dmgAttribute": 0,
				"needDisengaged": true,
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "PowerfulThrowingAxeT3",
					"qty": 1
				},
				"flags": 1,
				"feature": "Alazar1_Update"
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 2,
				"y": 1
			},
			"minDmg": 3.5,
			"maxDmg": 6,
			"done": 2
		},
		{
			"id": "PowerfulAxeThrowT4",
			"name": "Lancer de hache puissante",
			"desc": "Inflige [DMG] à la cible.\nIgnore la garde.\n\n[CapaCritical] : Applique [Bleeding].",
			"mode": 1,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"dmgAttribute": 0,
				"needDisengaged": true,
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "PowerfulThrowingAxeT4",
					"qty": 1
				},
				"flags": 1,
				"feature": "Alazar1_Update"
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 2,
				"y": 4
			},
			"minDmg": 4,
			"maxDmg": 6,
			"done": 2
		},
		{
			"id": "PoisonedThrowingKnife",
			"name": "Lancer de couteau empoisonné",
			"desc": "Inflige [DMG] à la cible et lui applique ::value1:: [Poison]s.",
			"mode": 1,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"dmgAttribute": 1,
				"apCost": 0,
				"needDisengaged": true,
				"specialAnim": "ThrowLeft",
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				],
				"itemCost": {
					"item": "PoisonedThrowingKnife",
					"qty": 1
				},
				"aiOrder": 1
			},
			"script": "function onHit(a) {\n\ta.target.addStatus(Status.Poison, vars.value1);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 17,
				"y": 3
			},
			"minDmg": 2,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "PoisonedThrowingKnifeT2",
			"name": "Lancer de couteau empoisonné",
			"desc": "Inflige [DMG] à la cible et lui applique ::value1:: [Poison]s.",
			"mode": 1,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"dmgAttribute": 1,
				"apCost": 0,
				"needDisengaged": true,
				"specialAnim": "ThrowLeft",
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				],
				"itemCost": {
					"item": "PoisonedThrowingKnifeT2",
					"qty": 1
				},
				"aiOrder": 1
			},
			"script": "function onHit(a) {\n\ta.target.addStatus(Status.Poison, vars.value1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 17,
				"y": 3
			},
			"minDmg": 2.5,
			"maxDmg": 5.5,
			"done": 2
		},
		{
			"id": "PoisonedThrowingKnifeT3",
			"name": "Lancer de couteau empoisonné",
			"desc": "Inflige [DMG] à la cible et lui applique ::value1:: [Poison]s.",
			"mode": 1,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"dmgAttribute": 1,
				"apCost": 0,
				"needDisengaged": true,
				"specialAnim": "ThrowLeft",
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				],
				"itemCost": {
					"item": "PoisonedThrowingKnifeT3",
					"qty": 1
				}
			},
			"script": "function onHit(a) {\n\ta.target.addStatus(Status.Poison, vars.value1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 3,
				"y": 1
			},
			"minDmg": 3,
			"maxDmg": 6,
			"done": 2
		},
		{
			"id": "PoisonedThrowingKnifeT4",
			"name": "Lancer de couteau empoisonné",
			"desc": "Inflige [DMG] à la cible et lui applique ::value1:: [Poison]s.",
			"mode": 1,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"dmgAttribute": 1,
				"apCost": 0,
				"needDisengaged": true,
				"specialAnim": "ThrowLeft",
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				],
				"itemCost": {
					"item": "PoisonedThrowingKnifeT4",
					"qty": 1
				}
			},
			"script": "function onHit(a) {\n\ta.target.addStatus(Status.Poison, vars.value1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 3,
				"y": 4
			},
			"minDmg": 4,
			"maxDmg": 6,
			"done": 2
		},
		{
			"id": "ThrowingKnife",
			"name": "Lancer de couteau",
			"desc": "Inflige [DMG] à la cible.\nIgnore la garde.",
			"mode": 1,
			"range": {
				"baseDistance": 6
			},
			"props": {
				"dmgAttribute": 1,
				"apCost": 0,
				"needDisengaged": true,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingKnife",
					"qty": 1
				},
				"flags": 1
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 8
			},
			"minDmg": 2.5,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "ThrowingKnifeT2",
			"name": "Lancer de couteau",
			"desc": "Inflige [DMG] à la cible.\nIgnore la garde.",
			"mode": 1,
			"range": {
				"baseDistance": 6
			},
			"props": {
				"dmgAttribute": 1,
				"needDisengaged": true,
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingKnifeT2",
					"qty": 1
				},
				"flags": 1,
				"aiOrder": 1
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 8
			},
			"minDmg": 3,
			"maxDmg": 5.5,
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "ThrowingKnifeT3",
			"name": "Lancer de couteau",
			"desc": "Inflige [DMG] à la cible.\nIgnore la garde.",
			"mode": 1,
			"range": {
				"baseDistance": 7
			},
			"props": {
				"dmgAttribute": 1,
				"needDisengaged": true,
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingKnifeT3",
					"qty": 1
				},
				"flags": 1
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 8
			},
			"minDmg": 3.5,
			"maxDmg": 6,
			"group": 15,
			"done": 2
		},
		{
			"id": "ThrowingKnifeT4",
			"name": "Lancer de couteau",
			"desc": "Inflige [DMG] à la cible.\nIgnore la garde.",
			"mode": 1,
			"range": {
				"baseDistance": 7
			},
			"props": {
				"dmgAttribute": 1,
				"needDisengaged": true,
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingKnifeT4",
					"qty": 1
				},
				"flags": 1
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 8
			},
			"minDmg": 4,
			"maxDmg": 6,
			"done": 2
		},
		{
			"id": "ThrowingSickle",
			"name": "Lancer de faucille",
			"desc": "Inflige [DMG] à la cible et a ::value1::% de chances de lui appliquer un malus aléatoire pendant ::value2:: round.",
			"mode": 1,
			"range": {
				"baseDistance": 6
			},
			"props": {
				"dmgAttribute": 2,
				"needDisengaged": true,
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingSickle",
					"qty": 1
				},
				"vars": {
					"value1": 30,
					"value2": 1
				},
				"aiOrder": 1
			},
			"script": "function onDamage(a) {\n\tif( randInt(0, 100) <= vars.value1 ) {\n\t\tvar malus = [Status.Weakening, Status.Fragility, Status.Destabilization, Status.Vulnerability, Status.Disarm, Status.SlowReflexes, Status.NoReflexes];\n\t\tmalus = malus.filter( function(s) { return !a.target.statusResist(s) && !a.target.hasStatus(s); } );\n\t\tif( malus.length > 0 ) {\n\t\t\ta.target.addStatus(malus[randInt(0, malus.length-1)], vars.value2, true);\n\t\t}\n\t}\n}",
			"notes": "Liste des malus : Affaiblissement (non stackable)\nFragilité (non stackable)\nDéstabilisation (non stackable)\nVulnérabilité (non stackable)\nDésarmement (non stackable)\nRéflexes lents (non stackable)\nAmorphe (non stackable)",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 10,
				"y": 17
			},
			"minDmg": 2,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "ThrowingSickleT2",
			"name": "Lancer de faucille",
			"desc": "Inflige [DMG] à la cible en ignorant la [Guard].\nA ::value1::% de chances d'appliquer un malus aléatoire à la cible pendant ::value2:: round.",
			"mode": 1,
			"range": {
				"baseDistance": 6
			},
			"props": {
				"dmgAttribute": 2,
				"needDisengaged": true,
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"flags": 1,
				"itemCost": {
					"item": "ThrowingSickleT2",
					"qty": 1
				},
				"vars": {
					"value1": 30,
					"value2": 1
				},
				"aiOrder": 1
			},
			"script": "function onDamage(a) {\n\tif( randInt(0, 100) <= vars.value1 ) {\n\t\tvar malus = [Status.Weakening, Status.Fragility, Status.Destabilization, Status.Vulnerability, Status.Disarm, Status.SlowReflexes, Status.NoReflexes];\n\t\tmalus = malus.filter( function(s) { return !a.target.statusResist(s) && !a.target.hasStatus(s); } );\n\t\tif( malus.length > 0 ) {\n\t\t\ta.target.addStatus(malus[randInt(0, malus.length-1)], vars.value2, true);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 11,
				"y": 17
			},
			"minDmg": 2.5,
			"maxDmg": 5.5,
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "ThrowingSickleT3",
			"name": "Lancer de faucille",
			"desc": "Inflige [DMG] à la cible en ignorant la [Guard].\nA ::value1::% de chances d'appliquer un malus aléatoire à la cible pendant ::value2:: round.",
			"mode": 1,
			"range": {
				"baseDistance": 7
			},
			"props": {
				"dmgAttribute": 2,
				"needDisengaged": true,
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"flags": 1,
				"itemCost": {
					"item": "ThrowingSickleT3",
					"qty": 1
				},
				"vars": {
					"value1": 30,
					"value2": 1
				}
			},
			"script": "function onDamage(a) {\n\tif( randInt(0, 100) <= vars.value1 ) {\n\t\tvar malus = [Status.Weakening, Status.Fragility, Status.Destabilization, Status.Vulnerability, Status.Disarm, Status.SlowReflexes, Status.NoReflexes];\n\t\tmalus = malus.filter( function(s) { return !a.target.statusResist(s) && !a.target.hasStatus(s); } );\n\t\tif( malus.length > 0 ) {\n\t\t\ta.target.addStatus(malus[randInt(0, malus.length-1)], vars.value2, true);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 11,
				"y": 17
			},
			"minDmg": 3,
			"maxDmg": 6,
			"group": 15,
			"done": 2
		},
		{
			"id": "ThrowingSickleT4",
			"name": "Lancer de faucille",
			"desc": "Inflige [DMG] à la cible en ignorant la [Guard].\nA ::value1::% de chances d'appliquer un malus aléatoire à la cible pendant ::value2:: round.",
			"mode": 1,
			"range": {
				"baseDistance": 7
			},
			"props": {
				"dmgAttribute": 2,
				"needDisengaged": true,
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"flags": 1,
				"itemCost": {
					"item": "ThrowingSickleT4",
					"qty": 1
				},
				"vars": {
					"value1": 30,
					"value2": 1
				}
			},
			"script": "function onDamage(a) {\n\tif( randInt(0, 100) <= vars.value1 ) {\n\t\tvar malus = [Status.Weakening, Status.Fragility, Status.Destabilization, Status.Vulnerability, Status.Disarm, Status.SlowReflexes, Status.NoReflexes];\n\t\tmalus = malus.filter( function(s) { return !a.target.statusResist(s) && !a.target.hasStatus(s); } );\n\t\tif( malus.length > 0 ) {\n\t\t\ta.target.addStatus(malus[randInt(0, malus.length-1)], vars.value2, true);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 11,
				"y": 17
			},
			"minDmg": 3.5,
			"maxDmg": 6.5,
			"done": 2
		},
		{
			"id": "ThrowingSicklePetrifying",
			"name": "Lancer de faucille pétrifiante",
			"desc": "Inflige [DMG] à la cible et lui applique [Confus] pendant ::value1:: round.",
			"mode": 1,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"dmgAttribute": 2,
				"needDisengaged": true,
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingSicklePetrifying",
					"qty": 1
				},
				"tooltipStatus": [
					{
						"st": "Confus"
					}
				],
				"vars": {
					"value1": 1
				}
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Confus, vars.value1);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 17
			},
			"minDmg": 2,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 15,
			"done": 2,
			"levels": []
		},
		{
			"id": "ThrowingSicklePetrifyingT2",
			"name": "Lancer de faucille pétrifiante",
			"desc": "Inflige [DMG] à la cible et lui applique [Confus] pendant ::value1:: round.",
			"mode": 1,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"dmgAttribute": 2,
				"needDisengaged": true,
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingSicklePetrifyingT2",
					"qty": 1
				},
				"tooltipStatus": [
					{
						"st": "Confus"
					}
				],
				"vars": {
					"value1": 1
				}
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Confus, vars.value1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 17
			},
			"minDmg": 2.5,
			"maxDmg": 5.5,
			"done": 2
		},
		{
			"id": "ThrowingSicklePetrifyingT3",
			"name": "Lancer de faucille pétrifiante",
			"desc": "Inflige [DMG] à la cible et lui applique [Confus] pendant ::value1:: round.",
			"mode": 1,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"dmgAttribute": 2,
				"needDisengaged": true,
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingSicklePetrifyingT3",
					"qty": 1
				},
				"tooltipStatus": [
					{
						"st": "Confus"
					}
				],
				"vars": {
					"value1": 1
				}
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Confus, vars.value1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 17
			},
			"minDmg": 3,
			"maxDmg": 6,
			"done": 2
		},
		{
			"id": "ThrowingSicklePetrifyingT4",
			"name": "Lancer de faucille pétrifiante",
			"desc": "Inflige [DMG] à la cible et lui applique [Confus] pendant ::value1:: round.",
			"mode": 1,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"dmgAttribute": 2,
				"needDisengaged": true,
				"apCost": 0,
				"specialAnim": "ThrowLeft",
				"itemCost": {
					"item": "ThrowingSicklePetrifyingT4",
					"qty": 1
				},
				"tooltipStatus": [
					{
						"st": "Confus"
					}
				],
				"vars": {
					"value1": 1
				}
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Confus, vars.value1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 17
			},
			"minDmg": 3.5,
			"maxDmg": 6.5,
			"done": 2
		},
		{
			"id": "Blind",
			"name": "Cécité",
			"desc": "Se désengage.",
			"mode": 4,
			"range": {},
			"props": {
				"apCost": 0,
				"needDisengaged": false,
				"itemCost": {
					"item": "BlindingPowder",
					"qty": 1
				},
				"specialAnim": "ThrowGround",
				"castFx": "prefabs/fx/fight/Explosion/SmokeBomb/SmokeBomb.fx"
			},
			"script": "function onSkill() {\n\tskill.unit.disengage(false);\n\tplay();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 2,
				"y": 16
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "OdorousPowder",
			"name": "Zone odorante",
			"desc": "Tous les animaux non-engagés dans la zone se déplacent vers le point d'impact.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 6,
				"baseDistance": 6,
				"allowedTargets": 4
			},
			"props": {
				"apCost": 0,
				"specialAnim": "ThrowLeftGrenade",
				"itemCost": {
					"item": "OdorousPowder",
					"qty": 1
				},
				"castFx": "prefabs/fx/fight/Explosion/OdorusPowder/OdorusPowder.fx",
				"needDisengaged": true,
				"vars": {
					"value1": 5
				},
				"flags": 96,
				"throwFx": "prefabs/fx/fight/Explosion/OdorusPowder/OdorousPowderThrowTrail.fx"
			},
			"script": "function onEval(a) {\n\tif(!a.target.isAnimal) {\n\t\ta.dontShowPreview();\n\t}\n}\n\nfunction onPostSkill() {\n\tvar targets = [];\n\tfor (t in skill.getTargets()) {\n\t\tvar dist = t.target.getPosition().distanceSq(skill.getPosition());\n\t\ttargets.push({target : t.target, dist : dist});\n\t}\n\ttargets.sort(function(a,b) {\n\t\tif (a.dist > b.dist) return 1;\n\t\tif (a.dist < b.dist) return -1;\n\t\treturn 0;\n\t});\n\tfor(t in targets) {\n\t\tif(t.target.isAnimal && !t.target.isEngaged()) {\n\t\t\tt.target.moveTo(getPushbackOrigin());\n\t\t}\n\t}\n}\n\nfunction getPushback( a ) {\n\tif( a != null && a.target.isAnimal && !a.target.isEngaged() ) {\n\t\tvar skillPos = a.getSkillPosition();\n\t\tvar uPos = a.target.getPosition();\n\t\treturn 0 - distance(skillPos.x, skillPos.y, uPos.x, uPos.y);\n\t}\n\treturn 0;\n}\n\nfunction getPushbackOrigin() {\n\treturn { skill : skill };\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 17,
				"y": 16
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "RagePowder",
			"name": "Rage animale",
			"desc": "Tous les animaux dans la zone gagnent [Fury] et [AnimalMarkedBonus].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 5,
				"baseDistance": 7,
				"allowedTargets": 4
			},
			"props": {
				"apCost": 0,
				"specialAnim": "ThrowLeftGrenade",
				"itemCost": {
					"item": "RagePowder",
					"qty": 1
				},
				"castFx": "prefabs/fx/fight/Explosion/RagePowder/RagePowder.fx",
				"needDisengaged": true,
				"tooltipStatus": [
					{
						"st": "Fury"
					},
					{
						"st": "AnimalMarkedBonus"
					}
				],
				"flags": 64,
				"throwFx": "prefabs/fx/fight/Explosion/RagePowder/RagePowderThrowTrail.fx"
			},
			"script": "function onHit(a) {\n\tif( a.target.isAnimal ) {\n\t\ta.target.addStatus(Status.AnimalMarkedBonus);\n\t\ta.target.addStatus(Status.Fury);\n\t}\n}",
			"notes": "ok vfx",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 18,
				"y": 16
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "ConfusingPowder",
			"name": "Confusion",
			"desc": "Toutes les unités dans la zone gagnent le statut [Confus].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"baseDistance": 7,
				"allowedTargets": 4
			},
			"props": {
				"apCost": 0,
				"specialAnim": "ThrowLeftGrenade",
				"itemCost": {
					"item": "ConfusingPowder",
					"qty": 1
				},
				"castFx": "prefabs/fx/fight/Explosion/ConfusingPowder/ConfusingPowder.fx",
				"needDisengaged": true,
				"tooltipStatus": [
					{
						"st": "Confus"
					}
				],
				"flags": 64,
				"throwFx": "prefabs/fx/fight/Explosion/ConfusingPowder/ConfusingPowderThrowTrail.fx"
			},
			"script": "function onHit(a) {\n\ta.target.addStatus(Status.Confus);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 16
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "FogPowder",
			"name": "Nuage de poussière",
			"desc": "Créé un [DustFog].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 5,
				"baseDistance": 7,
				"allowedTargets": 4
			},
			"props": {
				"apCost": 0,
				"specialAnim": "ThrowLeftGrenade",
				"itemCost": {
					"item": "FogPowder",
					"qty": 1
				},
				"castFx": "prefabs/fx/fight/Explosion/SmokeBomb/SmokeBomb.fx",
				"needDisengaged": true,
				"tooltipStatus": [
					{
						"st": "DustFog"
					}
				],
				"flags": 64
			},
			"script": "function onSkill() {\n\tcreateAreaEffect(\"Immediate\", 1 , {skillId: Skill.FogZone} );\n\tplay();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 16
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "Flashover",
			"name": "Embrasement",
			"desc": "Inflige ::value1::% de leur [Health] maximum à toutes les cibles dans la zone et crée un [Fire].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 4,
				"baseDistance": 6
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fire"
					},
					{
						"st": "Burning"
					}
				],
				"apCost": 0,
				"specialAnim": "ThrowLeftGrenade",
				"damageType": [
					0
				],
				"itemCost": {
					"item": "IncendiaryFlask",
					"qty": 1
				},
				"castFx": "prefabs/fx/fight/Explosion/Molotov/MolotovExplosion.fx",
				"vars": {
					"value1": 5
				},
				"flags": 64,
				"throwFx": "prefabs/fx/fight/Explosion/Grenade/MolotovThrowTrail.fx",
				"needDisengaged": true
			},
			"script": "function onHit(a) {\n\ta.target.damages(skill, a.target.getPercentHealth(vars.value1), true);\n}\n\nfunction onZoneHit() {\n\tcreateSkillZone(Skill.FireZone);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 0,
				"y": 9
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "PoisonPuddle",
			"name": "Flaque de poison",
			"desc": "Inflige ::value1::% de leur [Health] maximum à toutes les unités dans la zone et crée un [PoisonCloud].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 4,
				"baseDistance": 6
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "PoisonCloud"
					}
				],
				"apCost": 0,
				"specialAnim": "ThrowLeftGrenade",
				"damageType": [
					1
				],
				"itemCost": {
					"item": "PoisonedFlask",
					"qty": 1
				},
				"castFx": "prefabs/fx/fight/Explosion/PoisonBomb/PoisonBomb.fx",
				"vars": {
					"value1": 5
				},
				"flags": 64,
				"throwFx": "prefabs/fx/fight/Explosion/PoisonBomb/PoisonPuddleThrowTrail.fx",
				"needDisengaged": true
			},
			"script": "function onHit(a) {\n\ta.target.damages(skill, a.target.getPercentHealth(vars.value1), true);\n}\n\nfunction onZoneHit() {\n\tcreateSkillZone(Skill.PoisonZone);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 16,
				"y": 16
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "SmallExplosion",
			"name": "Petite explosion",
			"desc": "Inflige ::value1::% de leur [Health] maximum à toutes les cibles dans la zone.\n\n[CapaCritical] : Applique [Bleeding].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 4,
				"baseDistance": 6
			},
			"props": {
				"specialAnim": "ThrowLeftGrenade",
				"apCost": 0,
				"itemCost": {
					"item": "HandHeldFrag",
					"qty": 1
				},
				"castFx": "prefabs/fx/fight/Explosion/Grenade/GrenadeBlast.fx",
				"vars": {
					"value1": 10
				},
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"flags": 66,
				"throwFx": "prefabs/fx/fight/Explosion/Grenade/BombThrowTrail.fx",
				"needDisengaged": true
			},
			"script": "function onEval(a) {\n\ta.dmg = a.target.getPercentHealth(vars.value1);\n}\n\nfunction onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 1,
				"y": 9
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "ForcedRecoil",
			"name": "Recul forcé",
			"desc": "Toutes les unités dans la zone sont repoussées de ::value1:: mètres.",
			"mode": 5,
			"range": {
				"baseDistance": 6,
				"allowedTargets": 4,
				"type": 0,
				"radius": 3
			},
			"props": {
				"specialAnim": "ThrowLeftGrenade",
				"apCost": 0,
				"itemCost": {
					"item": "HandRecoil",
					"qty": 1
				},
				"castFx": "prefabs/fx/fight/Explosion/ForcedRecoil/ForcedRecoil.fx",
				"vars": {
					"value1": 2
				},
				"flags": 64,
				"throwFx": "prefabs/fx/fight/Explosion/Grenade/RecoilThrowTrail.fx"
			},
			"script": "function onHit(a) {\n\ta.target.pushback(getPushbackOrigin(), getPushback(a));\n}\n\nfunction getPushback( a ) {\n\treturn vars.value1;\n}\n\nfunction getPushbackOrigin() {\n\treturn { skill : skill };\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 17
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "BeeBomb",
			"name": "Jet de ruche",
			"desc": "Inflige [DMG] aux unités dans la zone et créé un [BeeArea].",
			"mode": 5,
			"range": {
				"baseDistance": 6,
				"allowedTargets": 4,
				"type": 0,
				"radius": 3
			},
			"props": {
				"apCost": 0,
				"specialAnim": "ThrowLeftGrenade",
				"itemCost": {
					"item": "BeeBomb",
					"qty": 1
				},
				"castFx": "prefabs/fx/fight/Explosion/Grenade/BeeBomb.fx",
				"vars": {
					"value1": 5
				},
				"flags": 64,
				"feature": "Alazar1_Update",
				"needDisengaged": true,
				"dmgAttribute": 2,
				"tooltipStatus": [
					{
						"st": "BeeArea"
					}
				]
			},
			"script": "function onZoneHit() {\n\tspawnTrap(\"BeeSwarm\");\n\t//createAreaEffect(\"Immediate\", 1 , {skillId: Skill.BeeArea} );\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 5,
				"y": 11
			},
			"group": 15,
			"minDmg": 1,
			"maxDmg": 2,
			"done": 2
		},
		{
			"id": "BeeArea",
			"name": "Essaim d'abeilles",
			"desc": "Inflige [VALUE]% dégâts à la [Health] de toute unité qui traverse ou termine son tour dans l'essaim.",
			"mode": 5,
			"range": {
				"allowedTargets": 4,
				"radius": 3
			},
			"props": {
				"flags": 128,
				"value": 10
			},
			"script": "function onZoneIn(a) {\n\ta.target.damages(skill, ceil(a.target.stats.health*skill.value/100), true);\n}\n\nfunction onZoneEndTurn(a) {\n\ta.target.damages(skill, ceil(a.target.stats.health*skill.value/100), true);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 15,
			"done": 2,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 18,
				"y": 4
			}
		},
		{
			"id": "CorrosiveBomb",
			"name": "Liquide corrosif",
			"desc": "Applique [Corrosion] à tous les ennemis dans la zone.\nNon cumulable.",
			"mode": 5,
			"range": {
				"baseDistance": 6,
				"allowedTargets": 4,
				"type": 0,
				"radius": 3
			},
			"props": {
				"apCost": 0,
				"specialAnim": "ThrowLeftGrenade",
				"itemCost": {
					"item": "CorrosiveBomb",
					"qty": 1
				},
				"castFx": "prefabs/fx/fight/Explosion/Grenade/CorrosiveBomb.fx",
				"flags": 64,
				"tooltipStatus": [
					{
						"st": "Corrosion"
					}
				],
				"feature": "Alazar1_Update",
				"needDisengaged": true
			},
			"script": "function onHit(a) {\n\ta.target.addStatus(Status.Corrosion);\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 11
			},
			"group": 15,
			"done": 2
		},
		{
			"id": "NetThrow",
			"name": "Lancer de filet",
			"desc": "Applique [Slowdown] à la cible pendant ::value1:: round.",
			"mode": 0,
			"range": {
				"baseDistance": 4
			},
			"props": {
				"apCost": 0,
				"specialAnim": "ThrowLeftGrenade",
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Slowdown"
					}
				],
				"flags": 64
			},
			"script": "function onSkill() {\n\tplay();\n\tfor( t in skill.getTargets() ) {\n\t\tt.target.addStatus(Status.Slowdown, vars.value1, true);\n\t}\n}",
			"notes": "A NE PAS FAIRE",
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "Transmission",
			"name": "Transmission",
			"desc": "Applique ::value1:: [Fever] à tous les ennemis dans la zone.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 4,
				"baseDistance": 6
			},
			"props": {
				"vars": {
					"value1": 2
				},
				"tooltipStatus": [
					{
						"st": "Fever"
					}
				],
				"specialAnim": "ThrowLeftGrenade",
				"itemCost": {
					"item": "SwampFlask",
					"qty": 1
				},
				"flags": 64,
				"castFx": "prefabs/fx/fight/Explosion/Grenade/TransmissionBomb.fx",
				"needDisengaged": true
			},
			"script": "function onHit(a) {\n\ta.target.addStatus(Status.Fever, vars.value1);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 15,
				"y": 0
			},
			"iconeDone": true,
			"group": 15,
			"done": 2
		},
		{
			"id": "Spraying",
			"name": "Aspersion",
			"desc": "Inflige ::value1::% de leur [Health] maximum à tous les Moustiques dans la zone.\nSi cette attaque est censée tuer un Moustique, elle le capture à la place.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 4,
				"baseDistance": 6
			},
			"props": {
				"vars": {
					"value1": 50
				},
				"flags": 66,
				"specialAnim": "ThrowLeftGrenade",
				"itemCost": {
					"item": "HaragConcoction",
					"qty": 1
				},
				"apCost": 0,
				"castFx": "prefabs/fx/fight/Explosion/Grenade/SprayingBomb.fx",
				"needDisengaged": true
			},
			"script": "function onEval(a) {\n\tif( a.target.kind == UnitClass.Mosquito ) {\n\t\ta.dmg = a.target.getPercentHealth(vars.value1);\n\t} else {\n\t\ta.cancelAttack = true;\n\t}\n}\n\nfunction onSkill() {\n\tvar capturedUnits = [];\n\tfor( a in skill.getTargets() ) {\n\t\tif( a.target.kind == UnitClass.Mosquito && a.target.health <= a.target.getPercentHealth(vars.value1) ) {\n\t\t\tcapturedUnits.push(a);\n\t\t\ta.cancelAttack = true;\n\t\t}\n\t}\n\tattack();\n\tfor( a in capturedUnits ) {\n\t\tcaptureTarget(a);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 5,
				"y": 7
			},
			"iconeDone": true,
			"levels": [],
			"group": 15,
			"done": 2
		},
		{
			"id": "DamageReturn",
			"name": "",
			"desc": "Si le porteur a encore de l'armure, renvoie ::value1::% des dégâts subis à l'attaquant.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 15
				}
			},
			"script": "function onDamageTaken(a) {\n\tif(a.target.armor > 0 && a.unit.isMelee(a.target))\n\t\ta.unit.damages(skill, ceil(a.dmg*vars.value1/100));\n}",
			"notes": "",
			"iconeDone": false,
			"group": 15,
			"done": 2,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 4,
				"y": 0
			}
		},
		{
			"id": "ValorousAxeThrow",
			"name": "Lancer de hache valeureux",
			"desc": "Après avoir utilisé une compétence coûtant de la Bravoure, cette unité inflige [DMG] à l’ennemi le plus éloigné dans un rayon de ::value1:: mètres, même si elle est engagée.\n\nCoup critique assuré contre la Meute Fantôme.",
			"mode": 2,
			"range": {
				"baseDistance": 6
			},
			"props": {
				"dmgAttribute": 2,
				"vars": {
					"value1": 6
				},
				"flags": 64,
				"preventEngage": true,
				"specialAnim": "ThrowLeft",
				"feature": "Alazar1_Update"
			},
			"script": "function onEval(a) {\n\tif( a.target.kind == UnitClass.GhostBoar || a.target.kind == UnitClass.GhostWolf || a.target.kind == UnitClass.Nightmare ) {\n\t\ta.criticalHitPercent = 100;\n\t}\n}\n\nfunction onSkillPlayed(s) {\n\tvar dTmp = -1.;\n\tvar foeTmp = null;\n\tif(s.apCost < 1)\n\t\treturn;\n\tfor( u in getFoes(skill.unit) ) {\n\t\tvar d = getDistance(skill.unit, u);\n\t\tif(d > dTmp && d < vars.value1) {\n\t\t\tdTmp = d;\n\t\t\tfoeTmp = u;\n\t\t}\n\t}\n\tif (foeTmp != null) {\n\t\tspawnFx();\n\t\tattackTarget(foeTmp);\n\t}\n}",
			"notes": "",
			"done": 2,
			"iconeDone": true,
			"group": 15,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 17,
				"y": 4
			},
			"minDmg": 2
		},
		{
			"id": "Poisoning",
			"name": "Empoisonnement",
			"desc": "Inflige [DMG] à la cible et lui applique ::value1:: [Poison]s.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 1,
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				],
				"isAttack": true,
				"vars": {
					"value1": 1
				},
				"defaultAction": true,
				"extraFx": "prefabs/fx/fight/Special/AttackPoison_D.fx"
			},
			"script": "function onHit(a) {\n\ta.target.addStatus(Status.Poison, vars.value1);\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 3,
				"y": 6
			},
			"minDmg": 7,
			"maxDmg": 9,
			"iconeDone": true,
			"group": 17,
			"done": 2
		},
		{
			"id": "ViciousShot",
			"name": "Tir vicieux",
			"desc": "Inflige [DMG] à la cible et la repousse de ::value1:: mètres.",
			"mode": 1,
			"range": {
				"baseDistance": 9
			},
			"props": {
				"dmgAttribute": 1,
				"needDisengaged": true,
				"vars": {
					"value1": 2
				},
				"tooltipStatus": [
					{
						"st": "Pushback"
					}
				],
				"isAttack": true,
				"defaultAction": true,
				"extraFx": "prefabs/fx/fight/Attack/Attack_B.fx"
			},
			"script": "function onHit(a) {\n\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n}\n\nfunction getPushback( a ) {\n\treturn vars.value1;\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 2,
				"y": 6
			},
			"minDmg": 5,
			"maxDmg": 9,
			"iconeDone": true,
			"group": 17,
			"done": 2
		},
		{
			"id": "Obliteration",
			"name": "Oblitération",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\nCoup critique assuré contre les unités empoisonnées.\n\n[CapaCritical] : Repousse de ::value1:: mètres.",
			"mode": 5,
			"range": {
				"radius": 2,
				"angle": 160,
				"type": 1,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"vars": {
					"value1": 1
				},
				"specialAnim": "AttackWide",
				"defaultAction": true,
				"tooltipStatus": [
					{
						"st": "Pushback"
					}
				]
			},
			"script": "function onEval(a) {\n\tfor( t in skill.getTargets() ) {\n\t\tif( t.target.hasStatus(Status.Poison) ) {\n\t\t\tt.criticalHitPercent = 100;\n\t\t}\n\t}\n}\n\nfunction onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n\t}\n}\n\nfunction getPushback( a ) {\n\treturn vars.value1;\n}",
			"notes": "3",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 4,
				"y": 6
			},
			"minDmg": 7.5,
			"iconeDone": true,
			"group": 17,
			"done": 2
		},
		{
			"id": "PerniciousEngagement",
			"name": "Engagement pernicieux",
			"desc": "Inflige [DMG] à la cible.\nSi la cible est engagée avec cette compétence, lui applique [Fragility] pendant ::value1:: round.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"vars": {
					"value1": 1,
					"engaged": false
				},
				"defaultAction": true,
				"tooltipStatus": [
					{
						"st": "Fragility"
					}
				]
			},
			"script": "function onEval(a) {\n\tif( !a.target.isEngaged() || a.target.engagedUnit != skill.unit ) {\n\t\tvars.engaged = false;\n\t} else vars.engaged = true;\n}\n\nfunction onDamage(a) {\n\tif( a.target.isEngaged() && skill.unit.engagedUnit == a.target && !vars.engaged ) {\n\t\ta.target.addStatus(Status.Fragility, vars.value1, true);\n\t}\n}",
			"notes": "1",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 16,
				"y": 0
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 17,
			"done": 2
		},
		{
			"id": "SneakyWhirlwind",
			"name": "Tourbillon sournois",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\nSi cette attaque touche plusieurs unités, crée un [PoisonCloud] sous chacune d'elles.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 5,
				"baseDistance": 0
			},
			"props": {
				"dmgAttribute": 1,
				"isAttack": true,
				"tooltipStatus": [
					{
						"st": "PoisonCloud"
					},
					{
						"st": "Poison"
					}
				],
				"defaultAction": true,
				"specialAnim": "AttackSpin"
			},
			"script": "function onPostSkill() {\n\tvar arr = [];\n\tfor( t in skill.getTargets() ) {\n\t\tif( t.dmg > 0 ) {\n\t\t\tarr.push(t.target);\n\t\t}\n\t}\n\tif( arr.length >= 2 ) {\n\t\tfor( t in arr ) {\n\t\t\tskill.unit.cast(Skill.CastPoisonZone, t, skill);\n\t\t}\n\t}\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 6
			},
			"minDmg": 6,
			"iconeDone": true,
			"group": 17,
			"done": 2
		},
		{
			"id": "TreacherousSetback",
			"name": "Revers perfide",
			"desc": "Inflige [DMG] à toutes les unités dans la zone et leur applique [Bleeding] si elles sont empoisonnées.",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 2,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"defaultAction": true,
				"specialAnim": "AttackWide",
				"vars": {
					"value1": 50
				},
				"feature": "Difficulty_Update"
			},
			"script": "function onHit(a) {\n\tif( a.target.hasStatus(Status.Poison) ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "3",
			"iconeDone": true,
			"minDmg": 7.5,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 11
			},
			"group": 17,
			"levels": [],
			"done": 2
		},
		{
			"id": "DisgustForTheWeak",
			"name": "Dégoût des faibles",
			"desc": "Dégâts augmentés de ::value1::% contre les unités qui saignent, brûlent ou sont empoisonnées.\nL'effet se cumule à chaque statut.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 30
				},
				"feature": "Difficulty_Update"
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\tvar nb = 0;\n\t\tif( t.target.hasStatus(Status.Bleeding) ) {\n\t\t\tnb++;\n\t\t}\n\t\tif( t.target.hasStatus(Status.Poison) ) {\n\t\t\tnb++;\n\t\t}\n\t\tif( t.target.hasStatus(Status.Burning) ) {\n\t\t\tnb++;\n\t\t}\n\t\tt.baseDamageBonus += nb*vars.value1;\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 10
			},
			"group": 17,
			"done": 2
		},
		{
			"id": "RaidExperience",
			"name": "Expérience des pillages",
			"desc": "Cette unité et ses alliés ont [MischiefMakerCritical].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 30
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "MischiefMakerCritical"
					}
				],
				"feature": "Difficulty_Update"
			},
			"script": "function onBeginAction() {\n\tskill.unit.addStatus(Status.MischiefMakerCritical);\n\n\tfor(u in getAllies(skill.unit))\n\t\tu.addStatus(Status.MischiefMakerCritical);\n}\n\nfunction onDeath(a) {\n\tfor(u in getAllies(skill.unit)) {\n\t\tif(u.hasSkill(Skill.RaidExperience))\n\t\t\treturn;\n\t}\n\n\tfor(u in getAllies(skill.unit)) {\n\t\tu.cancelStatus(Status.MischiefMakerCritical);\n\t}\n}\n",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 0
			},
			"iconeDone": true,
			"group": 17,
			"done": 2
		},
		{
			"id": "RingleaderThreat",
			"name": "Menace du meneur",
			"desc": "Cette unité et ses alliés ont [CriticalLeader].",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "CriticalLeader"
					}
				]
			},
			"script": "function onBeginRound() {\n\tif( !skill.unit.hasStatus(Status.CriticalLeader) ) {\n\t\tspawnFx();\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.addStatus(Status.CriticalLeader);\n\t\t}\n\t\tskill.unit.addStatus(Status.CriticalLeader);\n\t}\n}\n\nfunction onDeath(a) {\n\tif( a.target == skill.unit ) {\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.cancelStatus(Status.CriticalLeader);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 5
			},
			"iconeDone": true,
			"group": 17,
			"done": 2
		},
		{
			"id": "OathOfTheCowards",
			"name": "Serment des lâches",
			"desc": "[DamageBonusPercent] contre des cibles engagées augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 30
				},
				"descPassiveGroup": "[GROUPTYPE] : [DamageBonusPercent] contre des cibles engagées augmentés de ::value1::%. Les cibles engagées deviennent des cibles prioritaires."
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( t.target.isEngaged() ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 19,
				"y": 1
			},
			"iconeDone": true,
			"group": 17,
			"done": 2
		},
		{
			"id": "DishonorableTechnics",
			"name": "Technique déshonorante",
			"desc": "Après avoir subi ::value1:: attaques d'une unité dans un même tour, cette unité gagne [Fury].\nUne seule fois maximum par tour d'unité.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 2,
					"counter": 0
				},
				"descPassiveGroup": "[GROUPTYPE] : Après avoir subi ::value1:: attaques d'une unité dans un même tour, une unité gagne [Fury].\nUne seule fois maximum par tour d'unité.",
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				],
				"globalEvents": true
			},
			"script": "function onEndTurn() {\n\tvars.counter = 0;\n}\n\nfunction onDamageTaken(a) {\n\tif( skill.unit == a.target ) {\n\t\tvars.counter++;\n\t\tif( vars.counter == vars.value1 ) {\n\t\t\tspawnFx();\n\t\t\tskill.unit.addStatus(Status.Fury);\n\t\t}\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 17,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 1
			}
		},
		{
			"id": "FugitiveSword2HBandits",
			"name": "Tourbillon acéré",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\nLes dégâts sont augmentés de ::value1::% contre les unités qui saignent.\n\n[CapaCritical] : Applique [Bleeding].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 5,
				"baseDistance": 0
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 40
				},
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"isAttack": true,
				"defaultAction": true,
				"specialAnim": "AttackSpin"
			},
			"script": "function onEval(a) {\n\tif( a.target.hasStatus(Status.Bleeding) ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t}\n}\n\nfunction onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 8
			},
			"minDmg": 8.5,
			"iconeDone": true,
			"group": 18,
			"done": 2
		},
		{
			"id": "FugitiveDaggerBandits",
			"name": "Pluie de dagues",
			"desc": "Se désengage et inflige [DMG] aux ::value1:: ennemis les plus proches dans un rayon de ::value2:: mètres.",
			"mode": 5,
			"range": {
				"baseDistance": 0,
				"radius": 4,
				"allowedTargets": 0
			},
			"props": {
				"dmgAttribute": 1,
				"isAttack": true,
				"defaultAction": true,
				"vars": {
					"value1": 3,
					"value2": 4
				},
				"specialAnim": "Throw",
				"preventEngage": true
			},
			"script": "function onSkill() {\n\tskill.unit.disengage(false);\n\tvar array = [];\n\tfor( t in getFoes(skill.unit) ) {\n\t\tvar d = getDistance(skill.unit, t);\n\t\tif( d <= vars.value2 )\n\t\t\tarray.push({ dist : d, target: t });\n\t}\n\tarray.sort(function (u1, u2) {\n\t\tif (u1.dist < u2.dist) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (u2.dist < u1.dist) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n\tvar nb = min(array.length, vars.value1);\n\tfor( i in 0...nb ) {\n\t\tattackTarget(array[i].target);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 8
			},
			"minDmg": 5,
			"iconeDone": true,
			"group": 18,
			"done": 2
		},
		{
			"id": "Bravado",
			"name": "Bravade",
			"desc": "Inflige [DMG] à la cible et la force à s'engager.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true
			},
			"script": "function onDamage(a) {\n\tif( a.target.engagedUnit != skill.unit ) {\n\t\ta.target.disengage(false);\n\t\ta.target.engage(skill.unit);\n\t}\n}",
			"notes": "3",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 7,
				"y": 6
			},
			"minDmg": 7,
			"maxDmg": 9,
			"iconeDone": true,
			"group": 19,
			"done": 2
		},
		{
			"id": "CoupDeGrace",
			"name": "Coup de grâce",
			"desc": "Cible une zone.\nInflige [DMG] à toutes les unités dans la zone au début du tour suivant ou si l'adversaire se désengage.",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 2,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"tooltipStatus": [
					{
						"st": "Targeting"
					}
				],
				"defaultAction": true,
				"specialAnim": "AttackWide"
			},
			"script": "function onSkill() {\n\tif( waitNextTurn() ) {\n\t\tprepareAttack();\n\t\tcreateZone();\n\t\tskill.unit.addStatus(Status.Targeting);\n\t\treturn;\n\t}\n\tattack();\n\tcancelZone();\n}",
			"notes": "4 / 1",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 6
			},
			"minDmg": 12,
			"iconeDone": true,
			"group": 19,
			"done": 2
		},
		{
			"id": "IncendiaryArrow",
			"name": "Flèche incendiaire",
			"desc": "Inflige [DMG] à toutes les unités dans la zone puis crée un [Fire].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"baseDistance": 12,
				"allowedTargets": 4
			},
			"props": {
				"dmgAttribute": 1,
				"isAttack": true,
				"tooltipStatus": [
					{
						"st": "Fire"
					},
					{
						"st": "Burning"
					}
				],
				"damageType": [
					0
				],
				"defaultAction": true,
				"specialAnim": "AttackBellshot",
				"needDisengaged": true,
				"flags": 68,
				"castFx": "prefabs/fx/fight/AttackBellshot/FlamingArrows.fx"
			},
			"script": "function onZoneHit() {\n\tcreateSkillZone(Skill.FireZone);\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 8,
				"y": 6
			},
			"minDmg": 4.5,
			"iconeDone": true,
			"group": 19,
			"done": 2
		},
		{
			"id": "TendonRupture",
			"name": "Rupture des tendons",
			"desc": "Inflige [DMG] à la cible et lui applique [Slowdown] pendant ::value1:: rounds.\nSi elle est déjà affectée par [Slowdown], lui applique [Bleeding].",
			"mode": 0,
			"range": {
				"baseDistance": 3
			},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"tooltipStatus": [
					{
						"st": "Slowdown"
					},
					{
						"st": "Bleeding"
					}
				],
				"defaultAction": true,
				"vars": {
					"value1": 1
				},
				"extraFx": "prefabs/fx/fight/AttackFar/AttackFar_P.fx"
			},
			"script": "function onHit(a) {\n\tif( a.target.hasStatus(Status.Slowdown) ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n\ta.target.addStatus(Status.Slowdown, vars.value1, true);\n}",
			"notes": "2",
			"minDmg": 6.5,
			"maxDmg": 8.5,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 0,
				"y": 1
			},
			"iconeDone": true,
			"group": 19,
			"done": 2
		},
		{
			"id": "Annihilation",
			"name": "Anéantissement",
			"desc": "Inflige [DMG] à la cible.\nLes dégâts ignorent la [Guard].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"vars": {
					"value1": 2
				},
				"defaultAction": true,
				"flags": 1
			},
			"script": "",
			"notes": "3",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 9,
				"y": 6
			},
			"minDmg": 6,
			"maxDmg": 8,
			"iconeDone": true,
			"group": 19,
			"done": 2
		},
		{
			"id": "SurpriseAttack",
			"name": "Attaque surprise",
			"desc": "Inflige [DMG] à la cible et lui applique un malus aléatoire.\n\nLe malus aléatoire change chaque combat.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 1,
				"isAttack": true,
				"vars": {
					"statusIndex": -1
				},
				"defaultAction": true,
				"feature": "Difficulty_Update"
			},
			"script": "var arr = [Status.Burning];\nfunction onInit() {\n\tvars.statusIndex = randInt(0 , arr.length-1);\n}\n\nfunction onDamage(a) {\n\ta.target.addStatus(arr[vars.statusIndex%arr.length]);\n}",
			"notes": "Ajouter les status // 2",
			"iconeDone": true,
			"minDmg": 8,
			"maxDmg": 10,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 11
			},
			"group": 19,
			"done": 2
		},
		{
			"id": "CarefulStance",
			"name": "Posture prudente",
			"desc": "Cette unité ne peut pas être [Surrounded].",
			"mode": 2,
			"range": {},
			"props": {
				"feature": "Difficulty_Update",
				"tooltipStatus": [
					{
						"st": "Surrounded"
					}
				]
			},
			"script": "function onStatus(s) {\n\tif( s.unit == skill.unit && s.kind == Status.Surrounded) {\n\t\ts.cancel;\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 15
			},
			"group": 19,
			"done": 2
		},
		{
			"id": "TacticalIntelligence",
			"name": "Intelligence tactique",
			"desc": "Cette unité seule suffit à appliquer [Supported] à un allié.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Supported"
					}
				],
				"globalEvents": true
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 1
			},
			"iconeDone": true,
			"group": 19,
			"done": 2
		},
		{
			"id": "SurvivalStrategy",
			"name": "Stratégie de survie",
			"desc": "Cette unité et ses alliés ont [ProtectionLeader].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "ProtectionLeader"
					}
				],
				"globalEvents": true
			},
			"script": "function onBeginRound() {\n\tif( !skill.unit.hasStatus(Status.ProtectionLeader) ) {\n\t\tspawnFx();\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.addStatus(Status.ProtectionLeader);\n\t\t}\n\t\tskill.unit.addStatus(Status.ProtectionLeader);\n\t}\n}\n\nfunction onDeath(a) {\n\tif( a.target == skill.unit ) {\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.cancelStatus(Status.ProtectionLeader);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 9,
				"y": 5
			},
			"iconeDone": true,
			"group": 19,
			"done": 2
		},
		{
			"id": "ThirstForFreedom",
			"name": "Soif de liberté",
			"desc": "Cette unité a [Galvanization] tant qu'elle est adjacente à au moins ::value1:: ennemis.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 2
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Galvanization"
					}
				],
				"descPassiveGroup": "[GROUPTYPE] : Les unités gagnent [Galvanization] tant qu'elles sont adjacentes à au moins ::value1:: ennemis."
			},
			"script": "function onBeginAction() {\n\tvar nb = 0;\n\tfor( u in getFoes(skill.unit) ) {\n\t\tif( skill.unit.isMelee(u) ) {\n\t\t\tnb++;\n\t\t}\n\t}\n\tif( nb >= vars.value1 ) {\n\t\tif( !skill.unit.hasStatus(Status.Galvanization) ) {\n\t\t\tspawnFx();\n\t\t}\n\t\tskill.unit.addStatusPersist(Status.Galvanization, skill);\n\t}\n\telse\n\t\tskill.unit.cancelStatus(Status.Galvanization, skill);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 1
			},
			"iconeDone": true,
			"group": 19,
			"done": 2
		},
		{
			"id": "Independence",
			"name": "Indépendance",
			"desc": "Les attaques de cette unité appliquent [Fragility] pendant ::value1:: round tant qu'elle est adjacente à au moins ::value2:: ennemis.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1,
					"value2": 2
				},
				"tooltipStatus": [
					{
						"st": "Fragility"
					}
				],
				"descPassiveGroup": "[GROUPTYPE] : Les attaques des unités appliquent [Fragility] pendant ::value1:: round tant qu'elles sont adjacentes à au moins ::value2:: ennemis."
			},
			"script": "function onDamageDealt(a) {\n\tvar nb = 0;\n\tfor( u in getFoes(skill.unit) ) {\n\t\tif( skill.unit.isMelee(u) ) {\n\t\t\tnb++;\n\t\t}\n\t}\n\tif( nb >= vars.value2 ) {\n\t\tspawnFx();\n\t\ta.target.addStatus(Status.Fragility, vars.value1, true);\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 19,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 0,
				"y": 10
			}
		},
		{
			"id": "FugitiveMaceDeserters",
			"name": "Acharnement brutal",
			"desc": "Inflige [DMG] à la cible.\nSi après cette attaque, la cible a plus de la moitié de son [Armor], effectue une attaque d'opportunité contre elle.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true,
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onPostSkill() {\n\tfor( t in skill.getTargets() ) {\n\t\tif( t.target.armor > t.target.stats.armor / 2) {\n\t\t\tskill.unit.opportunityAttack(t.target, skill);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 8
			},
			"minDmg": 6,
			"maxDmg": 8,
			"iconeDone": true,
			"group": 20,
			"done": 2
		},
		{
			"id": "FugitiveAxe2HDeserters",
			"name": "Déferlement déchaîné",
			"desc": "Inflige [DMG] à la cible et gagne [Unleashed].\nCette attaque ne peut pas engager.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true,
				"preventEngage": true,
				"tooltipStatus": [
					{
						"st": "Unleashed"
					}
				]
			},
			"script": "function onDamage(a) {\n\tskill.unit.addStatus(Status.Unleashed);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 9
			},
			"minDmg": 6,
			"maxDmg": 8,
			"iconeDone": true,
			"group": 20,
			"done": 2
		},
		{
			"id": "MaintainingTheLine",
			"name": "Maintien de la ligne",
			"desc": "Inflige [DMG] à la cible et la repousse de ::value1:: mètres.\n\n[CapaCritical] : Applique [Vulnerability].",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Pushback"
					},
					{
						"st": "Vulnerability"
					}
				],
				"isAttack": true,
				"defaultAction": true,
				"feature": "Alazar1_Update"
			},
			"script": "function onHit(a) {\n\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n}\n\nfunction onDamage(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Vulnerability);\n\t}\n}\n\nfunction getPushback( a ) {\n\treturn vars.value1;\n}",
			"notes": "4",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 6,
				"y": 19
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 21,
			"done": 2
		},
		{
			"id": "ShootOrder",
			"name": "Ordre de tir",
			"desc": "Cible une zone. Effectue ::value1:: attaque d'opportunité contre le premier ennemi qui traverse la zone. ",
			"mode": 5,
			"range": {
				"type": 1,
				"angle": 60,
				"radius": 9,
				"allowedTargets": 0
			},
			"props": {
				"globalEvents": true,
				"needDisengaged": true,
				"vars": {
					"value1": 1,
					"value2": 0
				},
				"isHeroic": true,
				"tooltipStatus": [
					{
						"st": "Targeting"
					},
					{
						"st": "OpportunityAttack"
					}
				],
				"reactionSkill": true,
				"isAttack": true,
				"defaultAction": true
			},
			"script": "function onSkill() {\n\tif( waitNextTurn() ) {\n\t\tvars.value2 = 0;\n\t\tcreateZone();\n\t\treturn;\n\t}\n\tcancelZone();\n}\n\nfunction onMoveEvent(m) {\n\tskill.unit.cast(Skill.OpportunityAttack, m.unit, skill);\n\tvars.value2++ ;\n\tif( vars.value2 == vars.value1 ) {\n\t\tcancelZone();\n\t}\n}\n\nfunction onMove(m) {\n\tif( m.unit.side == skill.unit.side ) return;\n\tvar z = getZone();\n\tif( z == null ) return;\n\tm.addZoneEvent(z, onMoveEvent);\n}",
			"notes": "1",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 3,
				"y": 9
			},
			"iconeDone": true,
			"group": 21,
			"done": 2
		},
		{
			"id": "Interception",
			"name": "Interception",
			"desc": "Se désengage et charge en ligne droite. Inflige [DMG] à toutes les unités sur le chemin et applique [Slowdown] pendant ::value1:: round.",
			"mode": 3,
			"range": {
				"flags": 1,
				"baseDistance": 8
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Slowdown"
					}
				],
				"isAttack": true,
				"defaultAction": true,
				"specialAnim": "RunCharge"
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Slowdown, vars.value1, true);\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 4
			},
			"minDmg": 6.5,
			"iconeDone": true,
			"group": 21,
			"done": 2
		},
		{
			"id": "FunctionnalPairing",
			"name": "Duo fonctionnel",
			"desc": "Inflige [DMG] à la cible. Si elle est engagée avec un allié, cet allié gagne [Riposte].",
			"mode": 0,
			"range": {
				"baseDistance": 3
			},
			"props": {
				"isAttack": true,
				"defaultAction": true,
				"tooltipStatus": [
					{
						"st": "Riposte"
					}
				],
				"dmgAttribute": 0,
				"extraFx": "prefabs/fx/fight/AttackFar/AttackFar_P.fx"
			},
			"script": "function onDamage(a) {\n\tif( a.target.isEngaged() && a.target.engagedUnit.side == skill.unit.side && a.target.engagedUnit != skill.unit ) {\n\t\ta.target.engagedUnit.addStatus(Status.Riposte);\n\t}\n}",
			"notes": "3",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 7
			},
			"minDmg": 4,
			"maxDmg": 6,
			"iconeDone": true,
			"group": 21,
			"done": 2
		},
		{
			"id": "BlowsFlurry",
			"name": "Déferlante de coups",
			"desc": "Inflige ::value1:: fois [DMG] à la cible.",
			"mode": 0,
			"range": {
				"baseDistance": 3
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 4
				},
				"isAttack": true,
				"specialAnim": "AttackFast",
				"defaultAction": true
			},
			"script": "function onEval(t) {\n\tt.attackCount = vars.value1;\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 9
			},
			"minDmg": 3,
			"iconeDone": true,
			"group": 21,
			"done": 2
		},
		{
			"id": "FractiousSequence",
			"name": "Enchaînement fracassant",
			"desc": "Inflige [DMG] à la cible. Si cette attaque n'est pas la première du tour de cette unité, ::value1::% des dégâts sont infligés également à la [Health] de la cible.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"firstSkill": false,
					"available": false,
					"value1": 50
				},
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true,
				"globalEvents": true,
				"feature": "Difficulty_Update"
			},
			"script": "function onDamageDealt(a) {\n\tif( a.unit == skill.unit ) {\n\t\tvars.firstSkill = true;\n\t}\n}\n\nfunction onDamage(a) {\n\tif( vars.firstSkill ) {\n\t\ta.target.damages(skill, round(a.dmg * vars.value1 / 100), true);\n\t}\n}\n\nfunction onEndTurn() {\n\tvars.firstSkill = false;\n}",
			"notes": "Check si SkillPlayed = dash\nSéquence IA (d'abord coup de shield) // 2",
			"iconeDone": true,
			"minDmg": 6,
			"maxDmg": 8,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 14
			},
			"group": 21,
			"done": 2
		},
		{
			"id": "MartialImpact",
			"name": "Impact martial",
			"desc": "Inflige [DMG] à la cible et applique [Confus] pendant ::value1:: rounds.",
			"mode": 0,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Confus"
					}
				],
				"vars": {
					"value1": 1
				},
				"isHeroic": true,
				"apCost": 1,
				"dmgAttribute": 0,
				"specialAnim": "AttackShield",
				"feature": "Difficulty_Update"
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Confus, vars.value1, true);\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 10,
				"y": 10
			},
			"minDmg": 4,
			"maxDmg": 6,
			"group": 21,
			"done": 2
		},
		{
			"id": "MilitaryChoreography",
			"name": "Chorégraphie militaire",
			"desc": "Toutes les ::value1:: attaques, gagne [Fury].\n\nAttaques effectuées : ::value2::",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 3,
					"value2": 0
				},
				"feature": "Difficulty_Update",
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tif( vars.value2 < vars.value1 ) {\n\t\tvars.value2++;\n\t}\n\tif( vars.value2 >= vars.value1 ) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.Fury);\n\t\tvars.value2 = 0;\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 10,
				"y": 11
			},
			"group": 21,
			"done": 2
		},
		{
			"id": "MedicalAssistance",
			"name": "Assistance médicale",
			"desc": "Cette unité ne peut pas être engagée.\n\nÀ la fin de son tour, soigne tous les alliés adjacents de ::value1::% de leur [Health] maximum.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 20
				},
				"specialAnim": "Heal"
			},
			"script": "function onEndTurn() {\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) && u.health != u.stats.health) {\n\t\t\tspawnFx();\n\t\t\tplay();\n\t\t\tu.gainsHealth(ceil(u.stats.health*vars.value1/100));\n\t\t}\n\t}\n}",
			"notes": "IA TOMS",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 1
			},
			"iconeDone": true,
			"group": 21,
			"done": 2
		},
		{
			"id": "TrainedToKill",
			"name": "Entraînés à tuer",
			"desc": "Cette unité et ses alliés ont [TrueDamageLeader].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 5
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "TrueDamageLeader"
					}
				]
			},
			"script": "function onBeginRound() {\n\tif( !skill.unit.hasStatus(Status.TrueDamageLeader) ) {\n\t\tspawnFx();\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.addStatus(Status.TrueDamageLeader);\n\t\t}\n\t\tskill.unit.addStatus(Status.TrueDamageLeader);\n\t}\n}\n\nfunction onDamageDealt(a) {\n\tif( a.unit.hasStatus(Status.TrueDamageLeader) ) {\n\t\ta.target.damages(skill, ceil((a.target.stats.health*vars.value1)/100), true);\n\t}\n}\n\nfunction onDeath(a) {\n\tif( a.target == skill.unit ) {\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.cancelStatus(Status.TrueDamageLeader);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 1,
				"y": 5
			},
			"iconeDone": true,
			"group": 21,
			"done": 2
		},
		{
			"id": "MilitaryFormation",
			"name": "Formation militaire",
			"desc": "Chaque fois que cette unité termine son tour à côté d'un allié, elle gagne [Deflection].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Deflection"
					}
				],
				"descPassiveGroup": "[GROUPTYPE] : Chaque fois qu'une unité termine son tour à côté d'un allié, elle gagne [Deflection]."
			},
			"script": "function onEndTurn() {\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) ) {\n\t\t\tskill.unit.addStatus(Status.Deflection);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 1
			},
			"iconeDone": true,
			"group": 21,
			"done": 2
		},
		{
			"id": "AloneAgainstAll",
			"name": "Seuls contre tous",
			"desc": "Cette unité a [Protection] et [Brutality] tant que son équipe est moins nombreuse.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Protection"
					},
					{
						"st": "Brutality"
					}
				],
				"descPassiveGroup": "[GROUPTYPE] : Les unités ont [Protection] et [Brutality] tant que leur équipe est moins nombreuse.",
				"globalEvents": true
			},
			"script": "function onBeginAction() {\n\tvar u = getAllies(skill.unit);\n\tvar eu = getFoes(skill.unit);\n\tif( u.length < eu.length ) {\n\t\tif( !skill.unit.hasStatus(Status.Protection) || !skill.unit.hasStatus(Status.Brutality) ) {\n\t\t\tspawnFx();\n\t\t}\n\t\tskill.unit.addStatusPersist(Status.Protection, skill);\n\t\tskill.unit.addStatusPersist(Status.Brutality, skill);\n\t} else {\n\t\tskill.unit.cancelStatus(Status.Protection, skill);\n\t\tskill.unit.cancelStatus(Status.Brutality, skill);\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 21,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 11
			}
		},
		{
			"id": "FugitivePolearmLegion",
			"name": "Frappe victorieuse",
			"desc": "[DMG] à la cible.\n\n[DeadlyBlow] : Double le gain de [Morale] généré par la mort de la cible.",
			"mode": 0,
			"range": {
				"baseDistance": 3
			},
			"props": {
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true,
				"extraFx": "prefabs/fx/fight/Attack/Attack_P.fx"
			},
			"script": "function onPostSkill() {\n\tfor( t in skill.getTargets() ) {\n\t\tif( !t.target.isAlive() ) {\n\t\t\tskill.unit.gainsMorale(t.target.getMorale());\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 3,
				"y": 8
			},
			"minDmg": 6,
			"maxDmg": 9,
			"iconeDone": true,
			"group": 22,
			"done": 2
		},
		{
			"id": "FugitiveBowLegion",
			"name": "Impact violent",
			"desc": "Inflige [DMG] à la cible et la repousse de ::value1:: mètres.\nLes dégâts sont appliqués à nouveau si la cible rencontre un obstacle.",
			"mode": 1,
			"range": {
				"baseDistance": 9
			},
			"props": {
				"dmgAttribute": 1,
				"isAttack": true,
				"defaultAction": true,
				"vars": {
					"value1": 2
				},
				"needDisengaged": true,
				"tooltipStatus": [
					{
						"st": "Pushback"
					}
				]
			},
			"script": "var arr = [];\n\nfunction onHit(a) {\n\tvar pushbackData = a.target.getPushbackData({ unit : skill.unit }, getPushback(a));\n\tif( pushbackData.touchObstacle || pushbackData.touchUnit )\n\t\tarr.push({unit : a.target, dmg : 0 });\n\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n}\n\nfunction onDamage(a) {\n\tfor( t in arr ) {\n\t\tif( t.unit == a.target ) {\n\t\t\tt.dmg = round(a.dmg);\n\t\t}\n\t}\n\n}\n\nfunction getPushback( a ) {\n\treturn (vars.value1);\n}\n\nfunction onPostSkill() {\n\tfor( u in arr ) {\n\t\tif( u.unit != null && u.unit.isAlive() ) {\n   \t    \tu.unit.damages( skill, u.dmg);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 5,
				"y": 9
			},
			"minDmg": 3,
			"maxDmg": 8,
			"iconeDone": true,
			"group": 22,
			"done": 2
		},
		{
			"id": "FugitiveSwordLegion",
			"name": "Déferlement frénétique",
			"desc": "Inflige [DMG] à la cible.\n\nEffectue ::value1:: attaque supplémentaire  si la cible est affectée par [Bleeding], [Burning], [Poison] (cumulable).",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Bleeding"
					},
					{
						"st": "Burning"
					},
					{
						"st": "Poison"
					}
				]
			},
			"script": "function onPostSkill() {\n\tfor( t in skill.getTargets() ) { // don't use skill.target because it can be null if unit dodge attack\n\t\tif( t.target.hasStatus(Status.Bleeding) )\n\t\t\tattack();\n\t\tif( t.target.hasStatus(Status.Burning) )\n\t\t\tattack();\n\t\tif( t.target.hasStatus(Status.Poison) )\n\t\t\tattack();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 9
			},
			"minDmg": 7,
			"maxDmg": 9,
			"iconeDone": true,
			"group": 22,
			"done": 2
		},
		{
			"id": "ForkStrike",
			"name": "Coup de fourche",
			"desc": "Inflige [DMG] à la cible.",
			"mode": 0,
			"range": {
				"baseDistance": 3
			},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 4,
				"y": 9
			},
			"minDmg": 3,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 23,
			"done": 2
		},
		{
			"id": "KnifeStrike",
			"name": "Coup de couteau",
			"desc": "Inflige [DMG] à la cible.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 1,
				"isAttack": true
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 17,
				"y": 0
			},
			"minDmg": 3,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 23,
			"done": 2
		},
		{
			"id": "MaceStrike",
			"name": "Coup de masse",
			"desc": "Inflige [DMG] à la cible.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 23,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 9,
				"y": 6
			},
			"minDmg": 3,
			"maxDmg": 5,
			"done": 2
		},
		{
			"id": "HeavyStrike",
			"name": "Frappe lourde",
			"desc": "Inflige [DMG] à la cible.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true
			},
			"script": "",
			"notes": "1",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 9
			},
			"minDmg": 6,
			"maxDmg": 12,
			"iconeDone": true,
			"group": 24,
			"done": 2
		},
		{
			"id": "StunningAssault",
			"name": "Assaut étourdissant",
			"desc": "Inflige [DMG] à la cible et lui applique [Destabilization] pendant ::value1:: round si elle est déjà engagée avec un allié.",
			"mode": 0,
			"range": {
				"baseDistance": 3
			},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Destabilization"
					}
				],
				"isAttack": true,
				"vars": {
					"engaged": false,
					"value1": 1
				},
				"defaultAction": true
			},
			"script": "function onEval(a) {\n\tif( a.target.isEngaged() && a.target.engagedUnit != skill.unit ) {\n\t\tvars.engaged = true;\n\t} else vars.engaged = false;\n}\n\nfunction onDamage(a) {\n\tif( vars.engaged ) {\n\t\ta.target.addStatus(Status.Destabilization, vars.value1, true);\n\t}\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 3,
				"y": 0
			},
			"minDmg": 5,
			"maxDmg": 7.5,
			"iconeDone": true,
			"group": 24,
			"done": 2
		},
		{
			"id": "ArmorCrushing",
			"name": "Broyage d'armure",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\nApplique [Bleeding] si l'[Armor] a subi des dégâts.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 5,
				"baseDistance": 0
			},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"specialAnim": "AttackSpin",
				"isAttack": true,
				"defaultAction": true
			},
			"script": "function onHit(a) {\n\tif( a.damagedArmor > 0 ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "1",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 2,
				"y": 9
			},
			"minDmg": 6.5,
			"iconeDone": true,
			"group": 24,
			"done": 2
		},
		{
			"id": "AttackOrder",
			"name": "Ordre d'attaque",
			"desc": "Inflige [DMG] à la cible.\n\n[Backstab] : Si la cible est engagée avec un allié, cet allié effectue une attaque d'opportunité.",
			"mode": 0,
			"range": {},
			"props": {
				"isAttack": true,
				"defaultAction": true,
				"dmgAttribute": 1,
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onDamage(a) {\n\tif( a.backstab && a.target.engagedUnit != skill.unit && a.target.engagedUnit != null ) {\n\t\ta.target.engagedUnit.opportunityAttack(a.target, skill);\n\t}\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 19,
				"y": 4
			},
			"minDmg": 3,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 24,
			"done": 2
		},
		{
			"id": "VolleyOfArrows",
			"name": "Volée de flèches",
			"desc": "Inflige [DMG] à la cible.\n\n[CapaCritical] : Attaque de nouveau une fois.",
			"mode": 1,
			"range": {
				"baseDistance": 9
			},
			"props": {
				"dmgAttribute": 1,
				"isAttack": true,
				"needDisengaged": true,
				"defaultAction": true,
				"vars": {
					"done": false
				}
			},
			"script": "function onDamage(a) {\n\tif( a.isCritical && !vars.done ) {\n\t\tvars.done = true;\n\t}\n}\n\nfunction onPostSkill() {\n\tif(vars.done)\n\t\tattack();\n\tvars.done = false;\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 14,
				"y": 4
			},
			"minDmg": 3,
			"maxDmg": 8,
			"iconeDone": true,
			"group": 24,
			"done": 2
		},
		{
			"id": "SkillfulBackAndForth",
			"name": "Habile va-et-vient",
			"desc": "Inflige [DMG] à la cible.\n\n[CapaCritical] : Cette unité gagne [Riposte].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true,
				"feature": "Difficulty_Update",
				"tooltipStatus": [
					{
						"st": "Riposte"
					}
				]
			},
			"script": "function onDamage(a) {\n\tif( a.isCritical ) {\n\t\tskill.unit.addStatus(Status.Riposte);\n\t}\n}",
			"notes": "1",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 10
			},
			"minDmg": 8,
			"maxDmg": 10,
			"group": 24,
			"done": 2
		},
		{
			"id": "QuickShieldBlow",
			"name": "Coup de bouclier rapide",
			"desc": "Après avoir attaqué, inflige [DMG] à un ennemi adjacent.",
			"mode": 2,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"specialAnim": "AttackShield",
				"feature": "Difficulty_Update",
				"preventEngage": true
			},
			"script": "function onDamageDealt(a) {\n\tif( skill.unit.isEngaged() ) {\n\t\tattackTarget(skill.unit.engagedUnit);\n\t}\n\tif( !skill.unit.isEngaged() ) {\n\t\tfor( u in getFoes(skill.unit) ) {\n\t\t\tif( u.isMelee(skill.unit) ) {\n\t\t\t\tattackTarget(u);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 10
			},
			"minDmg": 2,
			"group": 24,
			"done": 2
		},
		{
			"id": "MeasuredResponse",
			"name": "Réponse mesurée",
			"desc": "Chaque fois que cette unité reçoit un coup critique en mêlée, elle effectue une attaque d'opportunité.",
			"mode": 2,
			"range": {},
			"props": {
				"feature": "Difficulty_Update"
			},
			"script": "function onDamageTaken(a) {\n\tif( a.isCritical ) {\n\t\tskill.unit.opportunityAttack(a.unit, skill);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 11
			},
			"group": 24,
			"done": 2
		},
		{
			"id": "SkilledClearance",
			"name": "Habile dégagement",
			"desc": "Si cette unité termine son tour engagée, elle effectue une attaque d'opportunité critique contre son adversaire puis se désengage.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onEndTurn() {\n\tif( skill.unit.isEngaged() ) {\n\t\tfor( u in getFoes(skill.unit) ) {\n\t\t\tif( skill.unit.engagedUnit == u ) {\n\t\t\t\tspawnFx();\n\t\t\t\tskill.unit.opportunityAttack(u, skill);\n\t\t\t\tskill.unit.disengage(false);\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 1
			},
			"iconeDone": true,
			"group": 24,
			"done": 2
		},
		{
			"id": "Exaltation",
			"name": "Exaltation",
			"desc": "Cette unité et ses alliés ont [InspirationLeader].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "InspirationLeader"
					}
				],
				"globalEvents": true
			},
			"script": "function onBeginRound() {\n\tif( !skill.unit.hasStatus(Status.InspirationLeader) ) {\n\t\tspawnFx();\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.addStatus(Status.InspirationLeader);\n\t\t}\n\t\tskill.unit.addStatus(Status.InspirationLeader);\n\t}\n}\n\nfunction onDeath(a) {\n\tif( a.target == skill.unit ) {\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.cancelStatus(Status.InspirationLeader);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 0,
				"y": 18
			},
			"iconeDone": true,
			"group": 24,
			"done": 2
		},
		{
			"id": "ForcefulRelease",
			"name": "Dégagement par la force",
			"desc": "Si cette unité commence son tour engagée, elle effectue une attaque d'opportunité en fin de tour.",
			"mode": 2,
			"range": {},
			"props": {
				"descPassiveGroup": "[GROUPTYPE] : Si une unité termine son tour engagée, elle effectue une attaque d'opportunité.",
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "var engaged = false;\nfunction onBeginTurn() {\n\tengaged = skill.unit.isEngaged();\n}\n\nfunction onEndTurn() {\n\tif ( engaged && skill.unit.isEngaged() ) {\n\t\tspawnFx();\n\t\tengaged = false;\n\t\tskill.unit.opportunityAttack(skill.unit.engagedUnit, skill);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 1
			},
			"iconeDone": true,
			"group": 24,
			"done": 2
		},
		{
			"id": "CloseRanks",
			"name": "Rang serrés",
			"desc": "[DamageBonusPercent] augmentés de ::value1::% par point de mouvement restant.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"descPassiveGroup": "[GROUPTYPE] : [DamageBonusPercent] augmentés de ::value1::% par point de mouvement restant."
			},
			"script": "function onSkillEval(s) {\n\tvar nb = 0;\n\tfor( t in s.getTargets() ) {\n\t\tt.baseDamageBonus = vars.value1 * t.unit.movePoints;\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 24,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 17,
				"y": 12
			},
			"done": 2
		},
		{
			"id": "FervorOfTheLaw",
			"name": "Ferveur de la Loi",
			"desc": "Les dégâts des attaques d'opportunité de cette unité sont augmentés de ::value1::% et appliquent [Confus] pendant ::value2:: round.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 25,
					"value2": 1
				},
				"descPassiveGroup": "[GROUPTYPE] : Les dégâts des attaques d'opportunité des unités sont augmentés de ::value1::% et appliquent [Confus] pendant ::value2:: round.",
				"tooltipStatus": [
					{
						"st": "Confus"
					}
				]
			},
			"script": "function onSkillEval(a) {\n\tif( a.kind == Skill.OpportunityAttack) {\n\t\tfor( t in a.getTargets() ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}\n\nfunction onDamageDealt(a) {\n\tif( a.skillKind == Skill.OpportunityAttack) {\n\t\tspawnFx();\n\t\ta.target.addStatus(Status.Confus, vars.value2, true);\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 24,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 0,
				"y": 9
			}
		},
		{
			"id": "FugitiveAxe2hGuard",
			"name": "Spirale furieuse",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\nSi l'attaque touche au moins ::value1:: unités, leur applique [Vulnerability].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 5,
				"baseDistance": 0
			},
			"props": {
				"dmgAttribute": 0,
				"specialAnim": "AttackSpin",
				"isAttack": true,
				"defaultAction": true,
				"vars": {
					"value1": 2,
					"value2": 0
				},
				"tooltipStatus": [
					{
						"st": "Vulnerability"
					}
				]
			},
			"script": "function onDamage(a) {\n\tvars.value2 = 0;\n\tfor( t in skill.getTargets() ) {\n\t\tvars.value2++;\n\t}\n\tif( vars.value2 >= vars.value1 ) {\n\t\ta.target.addStatus(Status.Vulnerability);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 8
			},
			"minDmg": 8,
			"iconeDone": true,
			"group": 25,
			"done": 2
		},
		{
			"id": "FugitiveMace2HGuard",
			"name": "Motivation calculée",
			"desc": "Cible une zone et gagne [Unwavering] pendant le ciblage.\nInflige [DMG] à toutes les unités dans la zone au début du tour suivant ou si l'adversaire se désengage.\nObtenez <apt>::value1::</apt> par unité touchée.",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 2,
				"allowedTargets": 5,
				"angle": 160
			},
			"props": {
				"dmgAttribute": 0,
				"specialAnim": "AttackWide",
				"isAttack": true,
				"defaultAction": true,
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Unwavering"
					}
				]
			},
			"script": "function onSkill() {\n\tif( waitNextTurn() ) {\n\t\tskill.unit.addStatus(Status.Unwavering);\n\t\tprepareAttack();\n\t\tcreateZone();\n\t\tskill.unit.addStatus(Status.Targeting);\n\t\treturn;\n\t}\n\tattack();\n\tcancelZone();\n\tskill.unit.cancelStatus(Status.Unwavering);\n}\n\nfunction onDamage(a) {\n\tskill.unit.gainsActionPoint(vars.value1);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 9
			},
			"minDmg": 8,
			"iconeDone": true,
			"group": 25,
			"done": 2
		},
		{
			"id": "Bladestorm",
			"name": "Tempête de lame",
			"desc": "Inflige [DMG] à tous les ennemis dans la zone.\nSi l'attaque touche au moins ::value1:: unités, leur applique [Fragility] pendant ::value2:: round.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 5,
				"baseDistance": 0
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 2,
					"value2": 1,
					"value3": 0
				},
				"isAttack": true,
				"specialAnim": "AttackSpin",
				"tooltipStatus": [
					{
						"st": "Fragility"
					}
				],
				"defaultAction": true
			},
			"script": "function onDamage(a) {\n\tvars.value3 = 0;\n\tfor( t in skill.getTargets() ) {\n\t\tvars.value3++;\n\t}\n\tif( vars.value3 >= vars.value1 ) {\n\t\ta.target.addStatus(Status.Fragility, vars.value2, true);\n\t}\n}",
			"notes": "3",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 7,
				"y": 9
			},
			"minDmg": 8,
			"iconeDone": true,
			"group": 26,
			"done": 2
		},
		{
			"id": "Beheading",
			"name": "Décapitation",
			"desc": "Inflige [DMG] à la cible. Si celle-ci n'a plus d'[Armor], les dégâts sont augmentés de ::value1::%.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true
			},
			"script": "function onEval(a) {\n\tif( a.target.armor == 0 ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "3",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 8,
				"y": 9
			},
			"minDmg": 8,
			"maxDmg": 11,
			"iconeDone": true,
			"group": 26,
			"done": 2
		},
		{
			"id": "TeamStrike",
			"name": "Frappe d'équipe",
			"desc": "Inflige [DMG] à la cible. Les dégâts sont augmentés de ::value1::% pour chaque allié adjacent.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true
			},
			"script": "function onEval(a) {\n\tvar count = 0;\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) ) {\n\t\t\tcount++;\n\t\t}\n\t}\n\ta.baseDamageBonus += vars.value1*count;\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 9,
				"y": 9
			},
			"minDmg": 7,
			"maxDmg": 9,
			"iconeDone": true,
			"group": 26,
			"done": 2
		},
		{
			"id": "KillShot",
			"name": "Tir mortel",
			"desc": "Inflige [DMG] à la cible. Les dégâts sont augmentés de ::value1::% contre les unités ayant ::value2::% ou moins de [Health].",
			"mode": 1,
			"range": {
				"baseDistance": 9
			},
			"props": {
				"dmgAttribute": 1,
				"vars": {
					"value1": 50,
					"value2": 35
				},
				"isAttack": true,
				"needDisengaged": true,
				"defaultAction": true,
				"extraFx": "prefabs/fx/fight/Attack/Attack_B.fx"
			},
			"script": "function onEval(a) {\n\tvar p = 100 * (a.target.health / a.target.stats.health);\n\tif( p <= vars.value2 ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "3",
			"minDmg": 5,
			"maxDmg": 9,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 15,
				"y": 1
			},
			"iconeDone": true,
			"group": 26,
			"done": 2
		},
		{
			"id": "Massacre",
			"name": "Massacre",
			"desc": "Inflige [DMG] à toutes les unités dans la zone. Les dégâts sont augmentés de ::value1::% si cette unité est engagée.",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 2,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"vars": {
					"value1": 50
				},
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true,
				"specialAnim": "AttackWide"
			},
			"script": "function onEval(a) {\n\tif( skill.unit.isEngaged() ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 10,
				"y": 9
			},
			"minDmg": 7,
			"iconeDone": true,
			"group": 26,
			"done": 2
		},
		{
			"id": "Overconfidence",
			"name": "Excès de confiance",
			"desc": "Inflige [DMG] à la cible. Si cette unité a encore de la [Guard], attaque à nouveau une fois.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true,
				"vars": {
					"done": false
				},
				"feature": "Difficulty_Update"
			},
			"script": "function onDamage(a) {\n\tif( !vars.done && skill.unit.guard > 0 && skill.unit.armor > 0 ) {\n\t\tvars.done = true;\n\t}\n}\n\nfunction onPostSkill() {\n\tif( vars.done ) {\n\t\tattack();\n\t\tvars.done = false;\n\t}\n}",
			"notes": "1",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 15
			},
			"minDmg": 6,
			"maxDmg": 8,
			"group": 26,
			"done": 2
		},
		{
			"id": "ReassuringShield",
			"name": "Bouclier rassurant",
			"desc": "Les dégâts de cette unité sont augmentés d'un montant égal à la moitié de sa [Guard].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"feature": "Difficulty_Update"
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( skill.unit.guard > 0 ) {\n\t\t\tt.baseDamageBonus += round(skill.unit.guard*vars.value1/100);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 15
			},
			"group": 26,
			"done": 2
		},
		{
			"id": "UnwaveringWill",
			"name": "Volonté indéfectible",
			"desc": "La troupe de cette unité ne peut pas perdre au moral.",
			"mode": 2,
			"range": {},
			"props": {
				"feature": "Difficulty_Update"
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 5,
				"y": 15
			},
			"group": 26,
			"done": 2
		},
		{
			"id": "EagleEye",
			"name": "Œil de lynx",
			"desc": "Au début de chaque Round, applique [Vulnerability] à l'ennemi ayant le moins de [Health] restante.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Vulnerability"
					}
				]
			},
			"script": "function onBeginRound() {\n\tvar unitMinHealth = null;\n\tvar minHealth = 1e9;\n\tfor( u in getFoes(skill.unit) ) {\n\t\tif( u.health < minHealth ) {\n\t\t\tminHealth = u.health;\n\t\t\tunitMinHealth = u;\n\t\t}\n\t}\n\tif( unitMinHealth != null ) {\n\t\tspawnFx();\n\t\tunitMinHealth.addStatus(Status.Vulnerability);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 17,
				"y": 1
			},
			"iconeDone": true,
			"group": 26,
			"done": 2
		},
		{
			"id": "AttackStrategy",
			"name": "Stratégie d'attaque",
			"desc": "Cette unité et ses alliés ont [BrutalityLeader].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "BrutalityLeader"
					}
				],
				"globalEvents": true
			},
			"script": "function onBeginRound() {\n\tif( !skill.unit.hasStatus(Status.BrutalityLeader) ) {\n\t\tspawnFx();\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.addStatus(Status.BrutalityLeader);\n\t\t}\n\t\tskill.unit.addStatus(Status.BrutalityLeader);\n\t}\n}\n\nfunction onDeath(a) {\n\tif( a.target == skill.unit ) {\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.cancelStatus(Status.BrutalityLeader);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 8,
				"y": 16
			},
			"iconeDone": true,
			"group": 26,
			"done": 2
		},
		{
			"id": "EliteMercenaries",
			"name": "Mercenaires d'élites",
			"desc": "Cette unité a [Rivalry] quand elle est engagée.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Rivalry"
					}
				],
				"globalEvents": true,
				"descPassiveGroup": "[GROUPTYPE] : Les unités ont [Rivalry] quand elles sont engagées."
			},
			"script": "function onBeginAction() {\n\tif( skill.unit.isEngaged() ) {\n\t\tif( skill.unit.addStatusPersist(Status.Rivalry, skill) ) {\n\t\t\tspawnFx();\n\t\t}\n\t} else skill.unit.cancelStatus(Status.Rivalry, skill);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 2
			},
			"iconeDone": true,
			"group": 26,
			"done": 2
		},
		{
			"id": "DuelScience",
			"name": "Science du duel",
			"desc": "Les attaques de cette unité envers son adversaire engagé appliquent [Blind].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Blind"
					}
				],
				"descPassiveGroup": "[GROUPTYPE] : Les attaques des unités envers leur adversaire engagé appliquent [Blind].",
				"vars": {
					"engaged": false
				}
			},
			"script": "function onSkillEval(a) {\n\tif( skill.unit.isEngaged() ) {\n\t\tvars.engaged = true;\n\t} else vars.engaged = false;\n}\n\nfunction onDamageDealt(a) {\n\tif( vars.engaged && a.target == skill.unit.engagedUnit ) {\n\t\tspawnFx();\n\t\ta.target.addStatus(Status.Blind);\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 26,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 10
			}
		},
		{
			"id": "FugitiveMace2HCompanions",
			"name": "Frappe subversive",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\nApplique également [Destabilization] pendant ::value1:: round à celles ayant au moins ::value2::% de [Guard].",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 2,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 1,
					"value2": 30
				},
				"defaultAction": true,
				"isAttack": true,
				"tooltipStatus": [
					{
						"st": "Destabilization"
					}
				],
				"specialAnim": "AttackWide"
			},
			"script": "function onDamage(a) {\n\tif( a.target.guard >= vars.value2 ) {\n\t\ta.target.addStatus(Status.Destabilization, vars.value1, true);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 0,
				"y": 8
			},
			"minDmg": 9.5,
			"iconeDone": true,
			"group": 27,
			"done": 2
		},
		{
			"id": "FugitiveAxeCompanions",
			"name": "Brise-poigne",
			"desc": "Inflige [DMG] à la cible.\n\n[CapaCritical] : Applique [Disarm] à la cible pendant ::value1:: round.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true,
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Disarm"
					}
				]
			},
			"script": "function onDamage(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Disarm, vars.value1, true);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 6,
				"y": 8
			},
			"minDmg": 6,
			"maxDmg": 8,
			"iconeDone": true,
			"group": 27,
			"done": 2
		},
		{
			"id": "FugitiveSword2HCompanions",
			"name": "Touche incapacitante",
			"desc": "Inflige [DMG] à toutes les cibles dans la zone et leur applique [NoReflexes].",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 2,
				"allowedTargets": 5,
				"angle": 160
			},
			"props": {
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true,
				"tooltipStatus": [
					{
						"st": "NoReflexes"
					}
				],
				"specialAnim": "AttackWide"
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.NoReflexes);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 9
			},
			"minDmg": 6,
			"maxDmg": 8,
			"iconeDone": true,
			"group": 27,
			"done": 2
		},
		{
			"id": "ForcefulInterrogation",
			"name": "Interrogatoire musclé",
			"desc": "Inflige [DMG] à la cible et attaque de nouveau jusqu'à appliquer [Fever]. Chaque attaque augmente les chances de l'appliquer de ::value1::%.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 20,
					"value2": 0,
					"done": false
				},
				"dmgAttribute": 0,
				"isAttack": true,
				"tooltipStatus": [
					{
						"st": "Fever"
					}
				],
				"defaultAction": true
			},
			"script": "function onDamage(a) {\n\tvars.value2 += vars.value1;\n\tif( proba(vars.value2) ) {\n\t\ta.target.addStatus(Status.Fever);\n\t\tvars.value2 = 0;\n\t} else {\n\t\tattack();\n\t}\n}",
			"notes": "1",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 18,
				"y": 18
			},
			"minDmg": 2,
			"maxDmg": 4,
			"iconeDone": true,
			"group": 28,
			"done": 2
		},
		{
			"id": "ViolentFlogging",
			"name": "Flagellation violente",
			"desc": "Perd [VALUE] [Health] pour infliger [DMG] aux unités dans la zone en ignorant leur [Guard].",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 2,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"scaledValue": 4,
				"scaledValueAttribute": 0,
				"dmgAttribute": 0,
				"isAttack": true,
				"specialAnim": "AttackWide",
				"defaultAction": true,
				"flags": 1
			},
			"script": "function onSkill() {\n\tskill.unit.damages(skill, skill.value, true);\n\tattack();\n}",
			"notes": "1",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 11,
				"y": 9
			},
			"minDmg": 12,
			"iconeDone": true,
			"group": 28,
			"done": 2
		},
		{
			"id": "JusticeHand",
			"name": "Main de la Justice",
			"desc": "Inflige [DMG] à la cible et l'attire jusqu'en mêlée pour l'engager.\nSi la cible est engagée avec cette capacité, effectue une attaque d'opportunité.",
			"mode": 0,
			"range": {
				"flags": 1,
				"baseDistance": 2
			},
			"props": {
				"vars": {
					"value1": 6,
					"engaged": false
				},
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true,
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onEval(a) {\n\tif( !a.target.isEngaged() || a.target.engagedUnit != skill.unit ) {\n\t\tvars.engaged = false;\n\t} else vars.engaged = true;\n}\n\nfunction onHit(a) {\n/*\tif( !a.target.isEngaged() || a.target.engagedUnit != skill.unit ) {\n\t\tvars.engaged = false;\n\t} else vars.engaged = true;*/\n\ta.target.pushback({ unit : skill.unit },getPushback(a));\n}\n\nfunction onDamage(a) {\n\tif( a.target.isAlive() && a.target.isMelee(skill.unit) ) {\n\t\ta.target.disengage(false);\n\t\ta.target.engage(skill.unit);\n\t\tif( a.target.isEngaged() && skill.unit.engagedUnit == a.target && !vars.engaged ) {\n\t\t\tskill.unit.opportunityAttack(a.target, skill);\n\t\t}\n\t}\n}\n\nfunction getPushback( a ) {\n\treturn -vars.value1;\n}",
			"notes": "1",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 14,
				"y": 9
			},
			"minDmg": 3,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 28,
			"done": 2
		},
		{
			"id": "Hysteria",
			"name": "Histérie",
			"desc": "Inflige [DMG] à la cible. Recommence pour chaque Bonus appliqué sur la cible.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 1,
				"isAttack": true,
				"defaultAction": true,
				"vars": {
					"value1": 1
				}
			},
			"script": "function onEval(a) {\n\tvars.value1 = 1;\n\tfor( st in a.target.getAllStatus() ) {\n\t\tif( st.isBonus ) {\n\t\t\tvars.value1++;\n\t\t}\n\t}\n\ta.attackCount = vars.value1;\n}\n\nfunction onSkill() {\n\tvar count = vars.value1;\n\tfor( i in 0...count ) {\n\t\tattack({ anim : i == count - 1 ? null : \"AttackFast\"+(i+1), fast : i < count - 1 });\n\t}\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 2
			},
			"minDmg": 6,
			"maxDmg": 8,
			"iconeDone": true,
			"group": 28,
			"done": 2
		},
		{
			"id": "ConsecratedStrike",
			"name": "Frappe consacrée",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\nSi cette attaque touche plusieurs unités, crée un [Fire] sous chacune d'elles.",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 2,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"tooltipStatus": [
					{
						"st": "Fire"
					},
					{
						"st": "Burning"
					}
				],
				"defaultAction": true,
				"specialAnim": "AttackWide",
				"animFx": "prefabs/fx/fight/AttackWide/AttackWideFire_S.fx"
			},
			"script": "function onPostSkill() {\n\tvar arr = [];\n\tfor( t in skill.getTargets() ) {\n\t\tif( t.dmg > 0 ) {\n\t\t\tarr.push(t.target);\n\t\t}\n\t}\n\tif( arr.length >= 2 ) {\n\t\tfor( t in arr ) {\n\t\tskill.unit.cast(Skill.ConsecratedStrikeZone, t, skill);\n\t\t}\n\t}\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 9
			},
			"minDmg": 8,
			"iconeDone": true,
			"group": 28,
			"done": 2
		},
		{
			"id": "ConsecratedStrikeZone",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 0.9,
				"allowedTargets": 4,
				"baseDistance": 10000
			},
			"props": {},
			"script": "function onSkill() {\n\tcreateAreaEffect(\"Immediate\", 1 , {skillId: Skill.FireZone} );\n}",
			"notes": "",
			"iconeDone": true,
			"group": 28,
			"done": 2
		},
		{
			"id": "EyeArrow",
			"name": "Flèche de l'Œil",
			"desc": "Inflige [DMG] à la cible.\nSi la cible n'a ni [Guard] ni [Armor], les dégâts sont triplés.",
			"mode": 1,
			"range": {
				"minDistance": 1,
				"baseDistance": 9
			},
			"props": {
				"dmgAttribute": 1,
				"needDisengaged": true,
				"defaultAction": true,
				"isAttack": true,
				"vars": {
					"value1": 200
				},
				"feature": "Difficulty_Update"
			},
			"script": "function onEval(a) {\n\tif( a.target.armor == 0 ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "3",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 10
			},
			"minDmg": 3.5,
			"maxDmg": 5,
			"group": 28,
			"done": 2
		},
		{
			"id": "TargetsInSight",
			"name": "Cibles en vue",
			"desc": "Dégâts augmentés de ::value1::% pour chaque unité ennemie dans un rayon de ::value2:: mètres.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 20,
					"value2": 6
				},
				"feature": "Difficulty_Update"
			},
			"script": "function onSkillEval(a) {\n\tvar arr = [];\n\tfor ( u in getFoes(skill.unit) ) {\n\t\tif( getDistance(skill.unit, u) <= vars.value2 ) {\n\t\t\tarr.push(u);\n\t\t\tfor( t in a.getTargets() ) {\n\t\t\t\tt.baseDamageBonus += arr.length;\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 14
			},
			"group": 28,
			"done": 2
		},
		{
			"id": "FanaticAura",
			"name": "Aura de fanatique",
			"desc": "La troupe ennemie ne peut pas gagner [Galvanization].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Galvanization"
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 2
			},
			"iconeDone": true,
			"group": 28,
			"done": 2
		},
		{
			"id": "IronWill",
			"name": "Volonté de fer",
			"desc": "Cette unité et ses alliés ont [DmgPerBonusLeader].",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"vars": {
					"value1": 40
				},
				"tooltipStatus": [
					{
						"st": "DmgPerBonusLeader"
					}
				]
			},
			"script": "function onBeginRound() {\n\tif( !skill.unit.hasStatus(Status.DmgPerBonusLeader) ) {\n\t\tspawnFx();\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.addStatus(Status.DmgPerBonusLeader);\n\t\t}\n\t\tskill.unit.addStatus(Status.DmgPerBonusLeader);\n\t}\n}\n\nfunction onDeath(a) {\n\tif( a.target == skill.unit ) {\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.cancelStatus(Status.DmgPerBonusLeader);\n\t\t}\n\t}\n}\n\nfunction onSkillEval(a) {\n\tif( a.unit.side == skill.unit.side ) {\n\t\tvar count = 0;\n\t\tfor( t in a.getTargets() ) {\n\t\t\tfor( st in t.target.getAllStatus() ) {\n\t\t\t\tif( st.isBonus ) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.baseDamageBonus += vars.value1*count;\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 3,
				"y": 18
			},
			"iconeDone": true,
			"group": 28,
			"done": 2
		},
		{
			"id": "ExhilaratingFervour",
			"name": "Ferveur exaltante",
			"desc": "Si cette unité engage elle-même un adversaire, elle effectue une attaque d'opportunité.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"engaged": false
				},
				"descPassiveGroup": "[GROUPTYPE] : Si une unité engage elle-même un adversaire, elle effectue une attaque d'opportunité.",
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onSkillEval(a) {\n\tif( skill.unit.isEngaged() ) {\n\t\tvars.engaged = true;\n\t} else vars.engaged = false;\n}\n\nfunction onSkillPlayed(a) {\n\tif( skill.unit.isEngaged() && !vars.engaged ) {\n\t\tspawnFx();\n\t\tskill.unit.opportunityAttack(skill.unit.engagedUnit, skill);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 6,
				"y": 2
			},
			"iconeDone": true,
			"group": 28,
			"done": 2
		},
		{
			"id": "Penance",
			"name": "Pénitence",
			"desc": "Chaque fois que la [Health] de cette unité subit des dégâts, elle gagne ::value1:: [AnimalMarkedBonus]",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 2
				},
				"descPassiveGroup": "[GROUPTYPE] : Chaque fois que la [Health] d'une unité subit des dégâts, elle gagne ::value1:: [AnimalMarkedBonus]",
				"tooltipStatus": [
					{
						"st": "AnimalMarkedBonus"
					}
				]
			},
			"script": "function onHealthDamaged(a) {\n\tif( a.amount > 0 ) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value1);\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 28,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 0,
				"y": 0
			}
		},
		{
			"id": "FugitiveSwordInquisition",
			"name": "Châtiment",
			"desc": "Inflige [DMG] à la cible.\nLes dégâts sont augmentés de ::value1::% contre les cibles sans [Guard].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 40
				},
				"isAttack": true,
				"defaultAction": true
			},
			"script": "function onEval(a) {\n\tif( a.guard == 0 ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 8
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 29,
			"done": 2
		},
		{
			"id": "FugitiveMaceInquisition",
			"name": "Jeunesse éternelle",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\nSi cette attaque touche plusieurs unités, cette unité se soigne de ::value1::% de sa [Health] maximum.",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 2,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true,
				"specialAnim": "AttackWide",
				"vars": {
					"value1": 20
				}
			},
			"script": "function onPostSkill() {\n\tvar arr = [];\n\tfor( t in skill.getTargets() ) {\n\t\tif( t.dmg > 0 ) {\n\t\t\tarr.push(t.target);\n\t\t}\n\t}\n\tif( arr.length >= 2 ) {\n\t\tskill.unit.gainsHealth(ceil(skill.unit.stats.health*vars.value1/100));\n\t}\n}",
			"notes": "",
			"minDmg": 8,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 10
			},
			"iconeDone": true,
			"group": 29,
			"done": 2
		},
		{
			"id": "WildMarking",
			"name": "Marquage sauvage",
			"desc": "Inflige [DMG] à la cible et lui applique [AnimalMarked].",
			"mode": 1,
			"range": {
				"baseDistance": 4
			},
			"props": {
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true,
				"tooltipStatus": [
					{
						"st": "AnimalMarked"
					}
				],
				"specialAnim": "Throw"
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.AnimalMarked);\n}",
			"notes": "1",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 5
			},
			"minDmg": 6,
			"maxDmg": 12,
			"iconeDone": true,
			"group": 30,
			"done": 2
		},
		{
			"id": "Logging",
			"name": "Bûcheronnage",
			"desc": "Inflige [DMG] aux unité dans la zone.\nSe relance pour chaque unité touchée qui saigne.",
			"mode": 5,
			"range": {
				"radius": 2,
				"angle": 160,
				"type": 1,
				"allowedTargets": 5
			},
			"props": {
				"vars": {
					"value1": 1
				},
				"isAttack": true,
				"defaultAction": true,
				"dmgAttribute": 0,
				"specialAnim": "AttackWide"
			},
			"script": "function onEval(a) {\n\tvars.value1 = 1;\n\tfor( t in skill.getTargets() )\n\t\tfor( st in t.target.getAllStatus() ) {\n\t\t\tif( st.kind == Status.Bleeding ) {\n\t\t\t\tvars.value1++;\n\t\t\t}\n\t\t}\n\ta.attackCount = vars.value1;\n}\n\nfunction onSkill() {\n\tvar count = vars.value1;\n\tfor( i in 0...count ) {\n\t\tattack();\n\t}\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 13,
				"y": 5
			},
			"minDmg": 5.5,
			"iconeDone": true,
			"group": 30,
			"done": 2
		},
		{
			"id": "NaturalStrike",
			"name": "Frappe naturelle",
			"desc": "Inflige [DMG] à la cible.\n\nCette attaque active toujours l'Huile qui est lui est appliquée.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true
			},
			"script": "",
			"notes": "1",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 5
			},
			"minDmg": 8,
			"maxDmg": 10,
			"levels": [],
			"iconeDone": true,
			"group": 30,
			"done": 2
		},
		{
			"id": "Slaughter",
			"name": "Égorger",
			"desc": "Inflige [DMG] à la cible et gagne ::value1:: [AnimalMarkedBonus].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 1,
				"vars": {
					"value1": 3
				},
				"tooltipStatus": [
					{
						"st": "AnimalMarkedBonus"
					}
				],
				"isAttack": true,
				"defaultAction": true
			},
			"script": "function onDamage(a) {\n\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value1);\n}",
			"notes": "1",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 15,
				"y": 5
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 30,
			"done": 2
		},
		{
			"id": "FeralSoul",
			"name": "Âme farouche",
			"desc": "Cette unité a [Berserk].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Berserk"
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 16,
				"y": 5
			},
			"iconeDone": true,
			"group": 30,
			"done": 2
		},
		{
			"id": "WildShot",
			"name": "Tir sauvage",
			"desc": "Inflige ::value1:: fois [DMG] à la cible. \nSi la cible est engagée avec un animal allié, coup critique assuré.",
			"mode": 1,
			"range": {
				"baseDistance": 9
			},
			"props": {
				"dmgAttribute": 1,
				"needDisengaged": true,
				"defaultAction": true,
				"isAttack": true,
				"vars": {
					"value1": 1
				},
				"extraFx": "prefabs/fx/fight/Attack/Attack_B.fx"
			},
			"script": "function onEval(a) {\n\tif( a.target.isEngaged() && a.target.engagedUnit.isAnimal ) {\n\t\ta.criticalHitPercent = 100;\n\t}\n}\n\nfunction onSkill() {\n\tvar count = vars.value1;\n\tfor( i in 0...count ) {\n\t\tattack();\n\t}\n}",
			"notes": "2",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 17,
				"y": 5
			},
			"minDmg": 4.5,
			"maxDmg": 8.5,
			"iconeDone": true,
			"group": 30,
			"done": 2
		},
		{
			"id": "HuntingSecretTechnique",
			"name": "Technique secrète de chasse",
			"desc": "Inflige [DMG] à la cible.\nFrappe de nouveau si la cible a déjà un malus.\nFrappe de nouveau si un animal allié est adjacent à la cible.\nFrappe de nouveau si la [Health] de la cible est entamée.",
			"mode": 0,
			"range": {
				"baseDistance": 3
			},
			"props": {
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true,
				"feature": "Difficulty_Update",
				"vars": {
					"processDone": false
				}
			},
			"script": "function onDamage(a) {\n\tif (!vars.processDone){\n\t\tvar nbAtk = 0;\n\t\tfor (st in a.target.getAllStatus())\n\t\t\tif(st.isMalus){\n\t\t\t\tnbAtk++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\tfor (u in getAllies(skill.unit))\n\t\t\tif( u.isAnimal && u.isMelee(a.target)){\n\t\t\t\tnbAtk++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\tif (a.target.health != a.target.stats.health)\n\t\t\tnbAtk++;\n\t\tvars.processDone = true;\n\t\tfor (i in 0...nbAtk)\n\t\t\tattackTarget(a.target);\n\t}\n}\n\nfunction onPostSkill() {\n\tvars.processDone = false;\n}",
			"notes": "3",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 10,
				"y": 16
			},
			"minDmg": 4.5,
			"maxDmg": 5.5,
			"group": 30,
			"done": 2
		},
		{
			"id": "WildComplaint",
			"name": "Complainte sauvage",
			"desc": "Quand cette unité meurt, elle appelle ::value1:: Ours en renfort.",
			"mode": 2,
			"range": {},
			"props": {
				"feature": "Difficulty_Update",
				"vars": {
					"value1": 1
				}
			},
			"script": "function onDeath(a) {\n\tif ( a.target == skill.unit ) {\n\t\tspawnRenfort(UnitClass.Bear, vars.value1, false);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 13,
				"y": 11
			},
			"group": 30,
			"done": 2
		},
		{
			"id": "AlphaAura",
			"name": "Aura de l'alpha",
			"desc": "Tous les animaux alliés ont [Savagery].",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"specialAnim": "Taunt",
				"tooltipStatus": [
					{
						"st": "Savagery"
					}
				]
			},
			"script": "function onBeginAction() {\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( u.isAnimal ) {\n\t\t\tu.addStatusPersist(Status.Savagery, skill);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 5
			},
			"iconeDone": true,
			"group": 30,
			"done": 2
		},
		{
			"id": "AnimalUnity",
			"name": "Unité animale",
			"desc": "À la fin de son tour, cette unité soigne l'animal allié le plus proche d'un montant égal à la [Constitution] de l'animal.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"descPassiveGroup": "[GROUPTYPE] : Quand une unité non-animale termine son tour, elle soigne l'animal allié le plus proche d'un montant égal à la [Constitution] de l'animal."
			},
			"script": "function onEndTurn() {\n\tvar array = [];\n\tif( !skill.unit.isAnimal ) {\n\t\tfor( t in getAllies(skill.unit) ) {\n\t\t\tif( t.isAnimal ) {\n\t\t\t\tvar d = getDistance(skill.unit, t);\n\t\t\t\tarray.push({ dist : d, target: t });\n\t\t\t}\n\t\t}\n\t\tarray.sort(function (u1, u2) {\n\t\t\tif (u1.dist < u2.dist) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (u2.dist < u1.dist) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t\tvar nb = 1;\n\t\tnb = min(array.length, nb);\n\t\tfor( i in 0...nb ) {\n\t\t\tspawnFx();\n\t\t\tarray[i].target.gainsHealth(ceil(array[i].target.stats.health*vars.value1/100));\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 7
			},
			"iconeDone": true,
			"group": 30,
			"done": 2
		},
		{
			"id": "WildOpportunism",
			"name": "Opportunisme sauvage",
			"desc": "[DamageBonusPercent] augmentés de ::value1::% contre les unités engagées avec des animaux alliés.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"descPassiveGroup": "[GROUPTYPE] : [DamageBonusPercent] des unités augmentés de ::value1::% contre les unités engagées avec des animaux alliés."
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( t.target.isEngaged() && t.target.engagedUnit.isAnimal && t.target.engagedUnit != skill.unit ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 30,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 0,
				"y": 1
			}
		},
		{
			"id": "FugitiveTrackersBow",
			"name": "Tir d'ouverture",
			"desc": "Inflige [DMG] à la cible. Coup critique assuré si la cible n'a pas encore subi de dégâts.\nCette attaque ne peut pas effectuer de coup critique autrement.\n\n[CapaCritical] : Confère <apt>::value1::</apt>",
			"mode": 1,
			"range": {
				"baseDistance": 9
			},
			"props": {
				"dmgAttribute": 1,
				"isAttack": true,
				"defaultAction": true,
				"vars": {
					"value1": 1
				},
				"needDisengaged": true
			},
			"script": "function onEval(a) {\n\tif( a.target.armor == a.target.stats.armor && a.target.health == a.target.stats.health ) {\n\t\ta.criticalHitPercent = 100;\n\t} else a.criticalHitPercent = 0;\n}\n\nfunction onDamage(a) {\n\tif( a.isCritical ) {\n\t\tskill.unit.gainsActionPoint(vars.value1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 5,
				"y": 8
			},
			"minDmg": 6,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 31,
			"done": 2
		},
		{
			"id": "FugitivePolearmTrackers",
			"name": "Jet puissant",
			"desc": "Inflige [DMG] à toutes les unités dans la zone, les repousse de ::value1:: mètres et leur applique [Slowdown].",
			"mode": 5,
			"range": {
				"type": 2,
				"radius": 1,
				"allowedTargets": 5,
				"baseDistance": 8
			},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Slowdown"
					}
				],
				"specialAnim": "Throw",
				"vars": {
					"value1": 2
				},
				"flags": 64
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Slowdown);\n}\n\nfunction onHit(a) {\n\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n}\n\nfunction getPushback( a ) {\n\treturn (vars.value1);\n}\n",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 3,
				"y": 9
			},
			"minDmg": 5.5,
			"iconeDone": true,
			"group": 31,
			"done": 2
		},
		{
			"id": "CautiousStrike",
			"name": "Frappe prudente",
			"desc": "Inflige [DMG] à la cible.\n\n[CapaCritical] : Applique [Weakening] ::value1:: round.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Weakening"
					}
				],
				"isAttack": true,
				"defaultAction": true,
				"feature": "Alazar1_Update",
				"vars": {
					"value1": 1
				}
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Weakening, vars.value1, true);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 32,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 12
			},
			"minDmg": 8,
			"maxDmg": 10,
			"done": 2
		},
		{
			"id": "MudShot",
			"name": "Tir de boue",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\nPuis, génère une flaque de boue.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"baseDistance": 8,
				"allowedTargets": 4
			},
			"props": {
				"dmgAttribute": 1,
				"specialAnim": "AttackBellshot",
				"needDisengaged": true,
				"flags": 68,
				"feature": "Alazar1_Update",
				"castFx": "prefabs/fx/fight/AttackBellshot/MudArrows.fx",
				"isAttack": true
			},
			"script": "function onZoneHit() {\n\tcreateSkillZone(Skill.MudZone);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 32,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 11
			},
			"minDmg": 5.5,
			"done": 2
		},
		{
			"id": "PreservingStrike",
			"name": "Frappe préservatrice",
			"desc": "Inflige [DMG] à la cible et gagne [ToPosition] pendant ::value1:: round.",
			"mode": 0,
			"range": {},
			"props": {
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "ToPosition"
					}
				],
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true,
				"vars": {
					"value1": 1
				}
			},
			"script": "function onHit(a) {\n\tskill.unit.addStatus(Status.ToPosition, vars.value1, true);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 32,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 13
			},
			"minDmg": 6,
			"maxDmg": 8,
			"done": 2
		},
		{
			"id": "DefensivePrecision",
			"name": "Précision défensive",
			"desc": "Inflige [DMG] à la cible.\n\n[CapaCritical] : Gagne [Deflection].",
			"mode": 0,
			"range": {
				"baseDistance": 3
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "Deflection"
					}
				],
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.unit.addStatus(Status.Deflection);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 32,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 12
			},
			"minDmg": 8,
			"maxDmg": 10,
			"done": 2
		},
		{
			"id": "UnsettlingStrike",
			"name": "Frappe déconcertante",
			"desc": "Inflige [DMG] à la cible.\n\n[CapaCritical] : Applique [Destabilization] pendant ::value1:: round.",
			"mode": 0,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Destabilization"
					}
				],
				"defaultAction": true,
				"isAttack": true,
				"dmgAttribute": 0,
				"vars": {
					"value1": 1
				}
			},
			"script": "function onHit(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Destabilization, vars.value1, true);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 32,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 13
			},
			"minDmg": 8,
			"maxDmg": 10,
			"done": 2
		},
		{
			"id": "FortifyingStrike",
			"name": "Frappe fortifiante",
			"desc": "Inflige [DMG] à la cible et gagne ::value1:: [Entrenched].\n\n[CapaCritical] : Gagne ::value2:: [Entrenched] supplémentaires.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 1,
					"value2": 1,
					"value3": 5
				},
				"tooltipStatus": [
					{
						"st": "Entrenched"
					}
				],
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true
			},
			"script": "function onHit(a) {\n\tif(a.unit.getStatusCount(Status.Entrenched) >= vars.value3)\n\t\treturn;\n\n\ta.unit.addStatus(Status.Entrenched, vars.value1);\n\tif( a.isCritical )\n\t\ta.unit.addStatus(Status.Entrenched, vars.value2);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 32,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 14
			},
			"minDmg": 8,
			"maxDmg": 10,
			"done": 2
		},
		{
			"id": "BackEyed",
			"name": "Yeux dans le dos",
			"desc": "Cette unité a [BackEyed].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "BackEyed"
					}
				]
			},
			"script": "function onBeginRound() {\n\tskill.unit.addStatus(Status.BackEyed);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 32,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 6,
				"y": 15
			},
			"done": 2
		},
		{
			"id": "Unwavering",
			"name": "Unwavering",
			"desc": "Cette unité a [Unwavering].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Unwavering"
					}
				]
			},
			"script": "function onBeginRound() {\n\tskill.unit.addStatus(Status.Unwavering);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 32,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 16,
				"y": 5
			},
			"done": 2
		},
		{
			"id": "SupportLeader",
			"name": "Support du chef",
			"desc": "Cette unité et ses alliés ont [SupportLeader].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "SupportLeader"
					}
				]
			},
			"script": "function onBeginRound() {\n\tif( !skill.unit.hasStatus(Status.SupportLeader) ) {\n\t\tspawnFx();\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.addStatus(Status.SupportLeader);\n\t\t}\n\t\tskill.unit.addStatus(Status.SupportLeader);\n\t}\n}\n\nfunction onDeath(a) {\n\tif( a.target == skill.unit ) {\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tu.cancelStatus(Status.SupportLeader);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 32,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 15
			},
			"done": 2
		},
		{
			"id": "CritOnEngaged",
			"name": "Acharnement",
			"desc": "[CritHitPercent] contre des cibles engagées augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( t.target.isEngaged() ) {\n\t\t\tt.criticalHitPercent += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 32,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 16
			},
			"done": 2
		},
		{
			"id": "ExtremeResilience",
			"name": "Résilience extrême",
			"desc": "Tant que cette unité n'a pas de [Guard], ses attaques appliquent [Vulnerability].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Vulnerability"
					}
				],
				"descPassiveGroup": "[GROUPTYPE] : Tant que les unités n'ont pas de [Guard], leurs attaques appliquent [Vulnerability]."
			},
			"script": "function onDamageDealt(a) {\n\tif( skill.unit.guard == 0) {\n\t\ta.target.addStatus(Status.Vulnerability);\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 32,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 18,
				"y": 3
			}
		},
		{
			"id": "DodgeEndTurn",
			"name": "Esquive",
			"desc": "À la fin de son tour, cette unité gagne [Dodge].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Dodge"
					}
				]
			},
			"script": "function onEndTurn() {\n\tskill.unit.addStatus(Status.Dodge);\n\tspawnFx();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 10
			},
			"iconeDone": true,
			"group": 33,
			"done": 2
		},
		{
			"id": "TuskBlow",
			"name": "Coup de défense",
			"desc": "Inflige [DMG] à la cible.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"aiOrder": 1,
				"powerScale": 0.7
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 0
			},
			"minDmg": 6.5,
			"maxDmg": 8.5,
			"iconeDone": true,
			"group": 35,
			"done": 2
		},
		{
			"id": "WildImpalement",
			"name": "Empalement sauvage",
			"desc": "Inflige [DMG] à la cible.\nCoup critique assuré si la cible est déjà engagée avec un allié.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"attacks": 1
				},
				"dmgAttribute": 0,
				"aiOrder": 1
			},
			"script": "function onEval(a) {\n\tif( a.target.isEngaged() && a.target.engagedUnit != skill.unit ) {\n\t\ta.criticalHitPercent = 100;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 11,
				"y": 16
			},
			"minDmg": 6.5,
			"maxDmg": 8.5,
			"iconeDone": true,
			"group": 35,
			"done": 2
		},
		{
			"id": "ForestGuardian",
			"name": "Gardien de la forêt",
			"desc": "Chaque fois qu'un animal allié meurt, cette unité gagne [Fury].",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				]
			},
			"script": "function onDeath(a) {\n\tif( a.target.isAnimal && a.target.side == skill.unit.side && a.target != skill.unit ) {\n\t\tif( skill.unit.addStatus(Status.Fury) ) {\n\t\t\tspawnFx();\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 5
			},
			"iconeDone": true,
			"group": 35,
			"done": 2
		},
		{
			"id": "PathogenicBite",
			"name": "Morsure pathogène",
			"desc": "Inflige [DMG] à la cible et lui applique [Bleeding].\nSi elle saigne déjà, lui applique ::value1:: [Poison].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Bleeding"
					},
					{
						"st": "Poison"
					}
				],
				"vars": {
					"value1": 1
				},
				"aiOrder": 1,
				"powerScale": 0.7
			},
			"script": "function onHit(a) {\n\tif( a.target.hasStatus(Status.Bleeding) ) {\n\t\ta.target.addStatus(Status.Poison, vars.value1);\n\t}\n\ta.target.addStatus(Status.Bleeding);\n}",
			"notes": "",
			"minDmg": 5,
			"maxDmg": 7,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 19,
				"y": 5
			},
			"iconeDone": true,
			"group": 35,
			"done": 2
		},
		{
			"id": "SwampGuardian",
			"name": "Gardien des marais",
			"desc": "Quand cette unité meurt, une Nuée de moustiques se forme.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onDeath(a) {\n\tif ( a.target == skill.unit ) {\n\t\tspawnTrap(\"mosquitoSwarm\");\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 0,
				"y": 6
			},
			"iconeDone": true,
			"group": 35,
			"done": 2
		},
		{
			"id": "Mistrust",
			"name": "Défiance",
			"desc": "Chaque fois que cette unité termine son tour adjacente à une unité ennemie, elle gagne [Riposte].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Riposte"
					}
				],
				"descPassiveGroup": "[GROUPTYPE] : Chaque fois qu'une unité termine son tour adjacente à une unité ennemie, elle gagne [Riposte]."
			},
			"script": "function onEndTurn() {\n\tfor( u in getFoes(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) ) {\n\t\t\tskill.unit.addStatus(Status.Riposte);\n\t\t}\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 35,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 19,
				"y": 0
			}
		},
		{
			"id": "NonStopableCharge",
			"name": "Charge inéluctable",
			"desc": "Se désengage et charge en ligne droite. Inflige [DMG] à toutes les unités sur le chemin.",
			"mode": 3,
			"range": {
				"flags": 1,
				"baseDistance": 6
			},
			"props": {
				"dmgAttribute": 0,
				"apCost": 1,
				"aiOrder": 0
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 35,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 18
			},
			"minDmg": 2,
			"maxDmg": 5,
			"done": 2
		},
		{
			"id": "ShaggyCreature",
			"name": "Créature hirsute",
			"desc": "Chaque fois que cette unité subit un coup critique, elle gagne [Riposte].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Riposte"
					}
				]
			},
			"script": "function onDamageTaken(a) {\n\tif( a.isCritical ) {\n\t\tskill.unit.addStatus(Status.Riposte);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 6
			},
			"iconeDone": true,
			"group": 35,
			"done": 2
		},
		{
			"id": "ThickSkin",
			"name": "Peau épaisse",
			"desc": "[DamageTakenPercent] réduits de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 25
				},
				"attributes": [
					{
						"kind": "DamageReducePercent",
						"value": 25
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 6,
				"y": 6
			},
			"iconeDone": true,
			"group": 35,
			"done": 2
		},
		{
			"id": "GoodCompanion",
			"name": "Bon compagnon",
			"desc": "Cette unité peut être assignée au Feu de camp.",
			"mode": 6,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 6
			},
			"iconeDone": true,
			"group": 35,
			"done": 2
		},
		{
			"id": "DraughtBoar",
			"name": "Sanglier de trait",
			"desc": "[Transport] augmenté de ::value1::.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"value1": 20
				},
				"attributes": [
					{
						"kind": "Transport",
						"value": 20
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 5,
				"y": 6
			},
			"iconeDone": true,
			"group": 35,
			"done": 2
		},
		{
			"id": "FarmedBoar",
			"name": "Sanglier d'élevage",
			"desc": "Cette unité peut désormais être abattue pour sa viande.\n\nLa bête mange les restes et réduit sa consommation de Nourriture de ::value1::.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"value1": 2
				},
				"bonuses": [
					{
						"bonus": "CanBeExecuted",
						"value": 1
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 6
			},
			"iconeDone": true,
			"group": 35,
			"done": 2
		},
		{
			"id": "TruffleBoar",
			"name": "Sanglier truffier",
			"desc": "Vous avez une chance de ramasser des Champignons en marchant en forêt.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"durationDaysInForest": 0.1,
					"cooldownDays": 1.5
				}
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 3,
				"y": 6
			},
			"iconeDone": true,
			"group": 35,
			"done": 2
		},
		{
			"id": "Jostling",
			"name": "Bousculade",
			"desc": "Applique [Destabilization] à la cible pendant ::value1:: round.",
			"mode": 0,
			"range": {},
			"props": {
				"apCost": 1,
				"tooltipStatus": [
					{
						"st": "Destabilization"
					}
				],
				"vars": {
					"value1": 1
				},
				"specialAnim": "AttackPower"
			},
			"script": "function onSkill() {\n\tplay();\n\tfor( t in skill.getTargets() ) {\n\t\tt.target.addStatus(Status.Destabilization, vars.value1, true);\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 35,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 18,
				"y": 0
			}
		},
		{
			"id": "InjuredAndDangerous",
			"name": "Blessé et dangeureux",
			"desc": "Après avoir subi une attaque, cette unité gagne ::value1:: [Enervate].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Enervate"
					}
				],
				"vars": {
					"value1": 5
				}
			},
			"script": "function onDamageTaken(a) {\n\tif(skill.unit.hasStatus(Status.Enervate) && skill.unit.getStatusCount(Status.Enervate) < vars.value1)\n\t\tskill.unit.addStatus(Status.Enervate);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 35,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 12
			},
			"done": 2
		},
		{
			"id": "Bite",
			"name": "Morsure",
			"desc": "Inflige [DMG] à la cible.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"powerScale": 0.7
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 1
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 36,
			"done": 2
		},
		{
			"id": "FerociousBite",
			"name": "Morsure féroce",
			"desc": "Inflige [DMG] à la cible.\nCoup critique assuré si la cible saigne.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0
			},
			"script": "function onEval(a) {\n\tif( a.target.hasStatus(Status.Bleeding) ) {\n\t\ta.criticalHitPercent = 100;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 7,
				"y": 3
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 36,
			"done": 2
		},
		{
			"id": "SharpFangs",
			"name": "Crocs acérés",
			"desc": "Chaque attaque effectuée contre une unité sans [Armor] lui applique [Bleeding].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"check": false
				},
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				]
			},
			"script": "function onSkillEval(a) {\n\tvars.check = false;\n\tfor( t in a.getTargets() ) {\n\t\tif( t.target.armor == 0 ) {\n\t\t\tvars.check = true;\n\t\t}\n\t}\n}\n\nfunction onDamageDealt(a) {\n\tif( vars.check ) {\n\t\tif( a.target.addStatus(Status.Bleeding) ) {\n\t\t\tspawnFx();\n\t\t}\n\t\tvars.check = false;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 0,
				"y": 6
			},
			"iconeDone": true,
			"group": 36,
			"done": 2
		},
		{
			"id": "FrostenBite",
			"name": "Morsure gelée",
			"desc": "Inflige [DMG] à la cible et lui applique [Slowdown] pendant ::value1:: round.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Slowdown"
					}
				],
				"feature": "Alazar1_Update",
				"powerScale": 0.7
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Slowdown, vars.value1, true);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 36,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 15
			},
			"minDmg": 6,
			"maxDmg": 8,
			"done": 2
		},
		{
			"id": "FerociousFrostenBite",
			"name": "Morsure féroce gelée",
			"desc": "Inflige [DMG] à la cible et lui applique [Slowdown] pendant ::value1:: round.\nCoup critique assuré si la cible est ralentie.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Slowdown"
					}
				],
				"feature": "Alazar1_Update"
			},
			"script": "function onEval(a) {\n\tif( a.target.hasStatus(Status.Slowdown) ) {\n\t\ta.criticalHitPercent = 100;\n\t}\n}\n\nfunction onDamage(a) {\n\ta.target.addStatus(Status.Slowdown, vars.value1, true);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 36,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 16
			},
			"minDmg": 6,
			"maxDmg": 8,
			"done": 2
		},
		{
			"id": "WildPack",
			"name": "Meute sauvage",
			"desc": "Chaque fois que cette unité termine son tour blessée, elle gagne ::value1:: [AnimalMarkedBonus].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "AnimalMarkedBonus"
					}
				],
				"vars": {
					"value1": 2
				},
				"descPassiveGroup": "[GROUPTYPE] : Chaque fois qu'une unité termine son tour blessée, elle gagne ::value1:: [AnimalMarkedBonus]."
			},
			"script": "function onEndTurn() {\n\tif( skill.unit.health < skill.unit.stats.health ) {\n\t\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value1);\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 36,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 16,
				"y": 2
			}
		},
		{
			"id": "Evasion",
			"name": "Dérobade",
			"desc": "Cette unité gagne [Deflection].",
			"mode": 4,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Deflection"
					}
				],
				"apCost": 1,
				"aiOrder": 1,
				"specialAnim": "Howl",
				"extraFx": "prefabs/fx/fight/Creatures/BuffCry_Wolf.fx"
			},
			"script": "function onSkill() {\n\tplay();\n\tskill.unit.addStatus(Status.Deflection);\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 36,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 19,
				"y": 2
			},
			"levels": []
		},
		{
			"id": "SnowTrackers",
			"name": "Traqueurs des neiges",
			"desc": "Les attaques portées contre des cibles ralenties voient ::value1::% de leurs dégâts répliqués directement à la [Health].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"check": false,
					"value1": 50
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onSkillEval(a) {\n\tfor( u in a.getTargets() ) {\n\t\tif( u.target.hasStatus(Status.Slowdown) ) {\n\t\t\tvars.check = true;\n\t\t}\n\t}\n}\n\nfunction onDamageDealt(a) {\n\tif( vars.check ) {\n\t\ta.target.damages(skill, round(a.dmg*vars.value1/100), true);\n\t\tvars.check = false;\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 36,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 10,
				"y": 17
			},
			"done": 2
		},
		{
			"id": "Pack",
			"name": "Meute",
			"desc": "S'il y a au moins ::value1:: Loups dans la Troupe, le [CritHitPercent] de cette unité est augmenté de ::value2::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 3,
					"value2": 50
				}
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 6
			},
			"iconeDone": true,
			"group": 36,
			"done": 2
		},
		{
			"id": "SenseOfSacrifice",
			"name": "Sens du sacrifice",
			"desc": "Tant que cette unité est non-engagée et adjacente à un allié, elle gagne [Fragility] mais confère [Protection] à cet allié.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Fragility"
					},
					{
						"st": "Protection"
					}
				]
			},
			"script": "function onBeginAction() {\n\tif( !skill.unit.isEngaged() ) {\n\t\tvar melee = false;\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tif( skill.unit.isMelee(u) ) {\n\t\t\t\tmelee = true;\n\t\t\t\tu.addStatusPersist(Status.Protection, skill);\n\t\t\t} else {\n\t\t\t\tif( u.hasStatusPersist(Status.Protection, skill) ) {\n\t\t\t\t\tvar melee = false;\n\t\t\t\t\tfor( a in getAllies(u) ) {\n\t\t\t\t\t\tif( u.isMelee(a) && a.hasSkill(Skill.SenseOfSacrifice) ) {\n\t\t\t\t\t\t\tmelee = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif( !melee ) {\n\t\t\t\t\t\tu.cancelStatus(Status.Protection, skill);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif( melee ) {\n\t\t\tskill.unit.addStatusPersist(Status.Fragility, skill);\n\t\t} else skill.unit.cancelStatus(Status.Fragility, skill);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 6
			},
			"iconeDone": true,
			"group": 36,
			"done": 2
		},
		{
			"id": "CarnivorousDiet",
			"name": "Régime carnivore",
			"desc": "Chaque fois que cette unité tue un ennemi, elle se soigne de ::value1::% de sa [Health] maximum.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"vars": {
					"value1": 50
				}
			},
			"script": "function onDeath(a) {\n\tif( a.unit == skill.unit ) {\n\t\tskill.unit.gainsHealth(ceil(skill.unit.stats.health*vars.value1/100));\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 6
			},
			"iconeDone": true,
			"group": 36,
			"done": 2
		},
		{
			"id": "LockingHisWounds",
			"name": "Lécher ses plaies",
			"desc": "Cette unité soigne ::value1::% de sa [Health] maximum et se retire tous ses Malus.",
			"mode": 4,
			"range": {},
			"props": {
				"specialAnim": "Heal",
				"apCost": 1,
				"vars": {
					"value1": 30
				},
				"needDisengaged": true,
				"cursor": "CursorHeal",
				"healPreview": 0.1
			},
			"script": "function onSkill() {\n\tskill.unit.gainsHealth(ceil(skill.unit.stats.health*vars.value1/100));\n\tfor( st in skill.unit.getAllStatus() ) {\n\t\tif( !st.isBonus && !st.isInjury) {\n\t\t\tst.cancel();\n\t\t}\n\t}\n\tplay();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 10,
				"y": 6
			},
			"iconeDone": true,
			"group": 36,
			"done": 2
		},
		{
			"id": "Watchwolf",
			"name": "Loup de garde",
			"desc": "Si votre troupe est attaquée en plein repos, elle ne subit pas [Surprised] et cette unité gagne [Galvanization].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				},
				"bonuses": [
					{
						"value": -10,
						"bonus": "RestAttackChance"
					}
				],
				"tooltipStatus": [
					{
						"st": "Surprised"
					},
					{
						"st": "Galvanization"
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 6
			},
			"iconeDone": true,
			"group": 36,
			"done": 2
		},
		{
			"id": "BornHunter",
			"name": "Chasseur né",
			"desc": "Cette unité a une chance d'attraper du Gibier pendant le Repos.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"probability": 25
				}
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 6
			},
			"iconeDone": true,
			"group": 36,
			"done": 2
		},
		{
			"id": "MoonHowl",
			"name": "Hurlement à la lune",
			"desc": "Après avoir attaqué, cette unité applique [Frightened].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Frightened"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\ttrace(\"onDamageDealt\");\n\ta.target.addStatus(Status.Frightened);\n\ttrace(\"+++++++++++++++++++++++++++++++++++++++++++++++++++++++\");\n}",
			"notes": "",
			"iconeDone": true,
			"group": 36,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 17
			},
			"done": 2
		},
		{
			"id": "PrimalReflexes",
			"name": "Réflexes primaires",
			"desc": "Si cette unité devait recevoir un coup critique, le coup porté n'est pas critique et elle effectue une attaque d'opportunité en réponse.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( t.target == skill.unit )\n\t\t\tt.preventCriticalHit = true;\n\t}\n}\n\nfunction onDamageTaken(a) {\n\tif( a.target == skill.unit && a.isCritical ) {\n\t\tspawnFx();\n\t\tskill.unit.opportunityAttack(skill.unit.engagedUnit, skill);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 36,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 3,
				"y": 17
			},
			"done": 1
		},
		{
			"id": "Crush",
			"name": "Bousculade",
			"desc": "Inflige [DMG] à la cible.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 3
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 37,
			"done": 2
		},
		{
			"id": "DraughtHorse",
			"name": "Poney de trait",
			"desc": "[Transport] augmenté de ::value1::.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				},
				"attributes": [
					{
						"kind": "Transport",
						"value": 10
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 15,
				"y": 6
			},
			"iconeDone": true,
			"group": 37,
			"done": 2
		},
		{
			"id": "WarHorse",
			"name": "Poney de guerre",
			"desc": "Cette unité participe désormais aux combats et peut porter des plaques d'armure.",
			"mode": 2,
			"range": {},
			"props": {
				"bonuses": [
					{
						"bonus": "CanEquipArmor",
						"value": 0
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 6
			},
			"iconeDone": true,
			"group": 37,
			"done": 2
		},
		{
			"id": "Racking",
			"name": "Cabrure",
			"desc": "Applique [Inspiration] à tous les alliés dans la zone pendant ::value1:: rounds.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 4,
				"allowedTargets": 1,
				"baseDistance": 0
			},
			"props": {
				"vars": {
					"value1": 1
				},
				"apCost": 0,
				"tooltipStatus": [
					{
						"st": "Inspiration"
					}
				],
				"extraFx": "prefabs/fx/fight/BuffCry/BuffCryBlue.fx"
			},
			"script": "function onSkill() {\n\tplay();\n\tfor( t in skill.getTargets() ) {\n\t\tt.target.addStatus(Status.Inspiration, vars.value1, true);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 4
			},
			"iconeDone": true,
			"group": 37,
			"done": 2
		},
		{
			"id": "Vigour",
			"name": "Vigueur",
			"desc": "[Constitution] augmentée de ::value::%.",
			"mode": 2,
			"range": {},
			"props": {
				"attributes": [
					{
						"kind": "Constitution",
						"value": 5,
						"isPercentage": true
					}
				],
				"value": 10
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 4
			},
			"iconeDone": true,
			"group": 37,
			"done": 2
		},
		{
			"id": "Tireless",
			"name": "Infatigable",
			"desc": "Durée de la course augmentée de ::value1::%.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"value1": 5
				},
				"bonuses": [
					{
						"bonus": "RunStamina",
						"value": 5
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 13,
				"y": 6
			},
			"iconeDone": true,
			"group": 37,
			"done": 2
		},
		{
			"id": "PlainsRunner",
			"name": "Coureur des plaines",
			"desc": "Durée de la course augmentée de ::value1::%.\n[Transport] augmenté de ::value1::.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"value1": 5
				},
				"bonuses": [
					{
						"bonus": "RunStamina",
						"value": 5
					}
				],
				"attributes": [
					{
						"kind": "Transport",
						"value": 5
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 6,
				"y": 4
			},
			"iconeDone": true,
			"group": 37,
			"done": 2
		},
		{
			"id": "KingOfGallop",
			"name": "Roi du galop",
			"desc": "[Movement] augmenté de ::value1::.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 3
				},
				"bonuses": [
					{
						"bonus": "Movement",
						"value": 3
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 5,
				"y": 4
			},
			"iconeDone": true,
			"group": 37,
			"done": 2
		},
		{
			"id": "PonyCharge",
			"name": "Charge dévastatrice",
			"desc": "Se désengage et charge en ligne droite. Inflige [DMG] à toutes les unités sur le chemin en ignorant leur [Guard].",
			"mode": 3,
			"range": {
				"flags": 1,
				"baseDistance": 6
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 1
				},
				"apCost": 1,
				"specialAnim": "RunCharge",
				"flags": 1
			},
			"script": "",
			"notes": "",
			"minDmg": 8,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 16,
				"y": 6
			},
			"iconeDone": true,
			"levels": [],
			"group": 37,
			"done": 2
		},
		{
			"id": "Adventurer",
			"name": "Baroudeur",
			"desc": "Cette unité profite des bonus du poteau d'attelage comme si elle était un poney de trait.",
			"mode": 6,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 37,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 10,
				"y": 14
			},
			"done": 1
		},
		{
			"id": "Traveler",
			"name": "Voyageur",
			"desc": "Peut être équipe de +::value1:: équipements",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"value1": 2
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 37,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 0,
				"y": 17
			},
			"done": 1
		},
		{
			"id": "Rampart",
			"name": "Rempart",
			"desc": "Cette unité gagne [Protection] et [ToPosition] pendant ::value1:: round.",
			"mode": 4,
			"range": {},
			"props": {
				"apCost": 1,
				"tooltipStatus": [
					{
						"st": "Protection"
					},
					{
						"st": "ToPosition"
					}
				],
				"vars": {
					"value1": 1
				}
			},
			"script": "function onSkill() {\n\tskill.unit.addStatus(Status.Protection);\n\tskill.unit.addStatus(Status.ToPosition);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 37,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 10,
				"y": 12
			},
			"done": 2
		},
		{
			"id": "InfectiousBite",
			"name": "Morsure infectieuse",
			"desc": "Inflige [DMG] à la cible et lui applique ::value1:: [Fever].",
			"mode": 0,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fever"
					}
				],
				"dmgAttribute": 0,
				"vars": {
					"value1": 1
				}
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Fever, vars.value1);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 18,
				"y": 6
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 38,
			"done": 2
		},
		{
			"id": "SoilTaint",
			"name": "Souillure du sol",
			"desc": "Tant que cette unité est en vie, elle génère une zone de [Poison] autour d'elle.",
			"mode": 2,
			"range": {
				"type": 0,
				"radius": 5
			},
			"props": {
				"vars": {
					"played": false,
					"value1": 2
				},
				"tooltipStatus": [
					{
						"st": "PoisonCloud"
					},
					{
						"st": "Poison"
					}
				],
				"globalEvents": true
			},
			"script": "function onBeginAction() {\n\tif ( !vars.played ) {\n\t\tcreateAreaEffect(\"Immediate\", 0 , { skillId: Skill.PoisonZone, unit: skill.unit } );\n\t\tvars.played = true;\n\t}\n}\n\nfunction onDeath(a) {\n\tremoveAllAreaEffect();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 7
			},
			"iconeDone": true,
			"group": 38,
			"done": 2
		},
		{
			"id": "ThroatyHowl",
			"name": "Hurlement guttural",
			"desc": "Appelle des rats en renfort.\nLe nombre de rats appelés augmente de ::value1:: chaque round.\n\nRats à appeler : ::rats::",
			"mode": 4,
			"range": {},
			"props": {
				"value": 1,
				"vars": {
					"value1": 1,
					"rats": 0,
					"done": false
				},
				"specialAnim": "Howl",
				"extraFx": "prefabs/fx/fight/Rat_Matriarch/MotherRatHowl.fx"
			},
			"script": "function onBeginRound() {\n\tif( !vars.done ) {\n\t\tvars.rats = getPlayerUnits().length + vars.value1;\n\t\tvars.done = true;\n\t}\n}\n\nfunction onSkill() {\n\tplay();\n\tvars.rats += vars.value1;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 6
			},
			"levels": [],
			"iconeDone": true,
			"group": 38,
			"done": 2
		},
		{
			"id": "Nibbling",
			"name": "Grignotage",
			"desc": "Inflige [DMG] à la cible. Si elle est déjà engagée avec un allié, les dégâts sont augmentés de ::value1::%.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"dmgAttribute": 0
			},
			"script": "function onEval(a) {\n\tif( a.target.isEngaged() && a.target.engagedUnit.side == skill.unit.side && a.target.engagedUnit != skill.unit ) {\n\t\ta.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 11
			},
			"minDmg": 5,
			"maxDmg": 7,
			"iconeDone": true,
			"group": 38,
			"done": 2
		},
		{
			"id": "NumericalStrength",
			"name": "Force du nombre",
			"desc": "[DamageBonusPercent] augmentés de ::value1::% pour chaque Rat-taupe allié dans un rayon de ::value2:: mètres.\n\nActuel : ::value3::%",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 25,
					"value2": 6,
					"value3": 0
				}
			},
			"script": "function onBeginAction() {\n\tvar nb = 0;\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( u.kind == UnitClass.Molerat && getDistance(skill.unit, u) <= vars.value2 ) {\n\t\t\tnb++;\n\t\t\tvars.value3 = (vars.value1*nb);\n\t\t}\n\t}\n}\n\nfunction onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tt.baseDamageBonus += vars.value3;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 18,
				"y": 9
			},
			"iconeDone": true,
			"group": 38,
			"done": 2
		},
		{
			"id": "Snooper",
			"name": "Fouineur",
			"desc": "Cette unité a une chance de trouver du Fromage en visitant des lieux.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"cooldownDays": 1.5
				}
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 19,
				"y": 4
			},
			"iconeDone": true,
			"group": 38,
			"done": 2
		},
		{
			"id": "Necrophagy",
			"name": "Nécrophagie",
			"desc": "Si cette unité tue un ennemi, elle supprime sa consommation de Nourriture pour le prochain repas.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onDeath(a) {\n\tif( a.unit == skill.unit && skill.unit.side != a.target.side ) {\n\t\tif ( skill.unit.getCounter(Counter.SatiatedRests) == 0 )\n\t\t\tskill.unit.incCounter(Counter.SatiatedRests, 1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 16,
				"y": 4
			},
			"iconeDone": true,
			"group": 38,
			"done": 2
		},
		{
			"id": "CallOfTheSwarm",
			"name": "Appel de la nuée",
			"desc": "Appelle ::value1:: unité de son espèce en renforts.\n\nUtilisable seulement à partir de ::value2::% de [Health] restante.",
			"mode": 4,
			"range": {},
			"props": {
				"vars": {
					"value1": 1,
					"value2": 50,
					"allowed": false
				},
				"extraFx": "prefabs/fx/fight/BuffCry/BuffCryWhite.fx"
			},
			"script": "function onBeginAction() {\n\tvars.allowed = ( 100 * (skill.unit.health / skill.unit.stats.health) <= vars.value2);\n}\n\nfunction onEval(a) {\n\tvar p = 100 * (a.unit.health / a.unit.stats.health);\n\tif( p > vars.value2 ) {\n\t\tdontAllow();\n\t}\n}\n\nfunction onSkill() {\n\tspawnRenfort(skill.unit.kind, vars.value1, false);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 15,
				"y": 4
			},
			"iconeDone": true,
			"group": 38,
			"done": 2
		},
		{
			"id": "SpeciesSurvival",
			"name": "Survie de l'espèce",
			"desc": "Si deux unités de la même espèce ont cette compétence, elles ont une chance de se reproduire et de faire naître une nouvelle unité après un Repos.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"probability": 50
				}
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 5,
				"y": 5
			},
			"iconeDone": true,
			"group": 38,
			"done": 2
		},
		{
			"id": "NocturnalSnarls",
			"name": "Grognements nocturnes",
			"desc": "Cette unité a [PlaguedRatEnraged] la nuit.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "PlaguedRatEnraged"
					}
				]
			},
			"script": "function onBeginAction() {\n\tif ( isNight() )\n\t\tskill.unit.addStatusPersist(Status.PlaguedRatEnraged, skill);\n\telse\n\t\tskill.unit.consumeStatus(Status.PlaguedRatEnraged);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 17,
				"y": 4
			},
			"iconeDone": true,
			"group": 38,
			"done": 2
		},
		{
			"id": "RemarkableOrganism",
			"name": "Organisme remarquable",
			"desc": "Cette unité ne peut pas mourir de dégâts provoqués par [Bleeding], [Poison] ou [Burning].",
			"mode": 2,
			"range": {},
			"props": {
				"bonuses": [
					{
						"bonus": "CantDieFromDots",
						"value": 0
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 4
			},
			"iconeDone": true,
			"group": 38,
			"done": 2
		},
		{
			"id": "Poisoned",
			"name": "Empoisonné",
			"desc": "Chaque attaque effectuée ou subie applique ::value1:: [Poison]s à l'unité adverse.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 2
				},
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\ta.target.addStatus(Status.Poison, vars.value1);\n}\n\nfunction onDamageTaken(a) {\n\ta.unit.addStatus(Status.Poison, vars.value1);\n}",
			"notes": "",
			"iconeDone": false,
			"group": 38,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 0,
				"y": 18
			},
			"done": 2
		},
		{
			"id": "Immortal",
			"name": "Immortel",
			"desc": "Quand cette unité doit mourir, elle ne meurt pas.\nÀ la place, à chaque attaque subie, elle a ::value1::% de chance d'esquiver, sinon elle fuit le combat.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 70
				}
			},
			"script": "",
			"notes": "hard coded",
			"iconeDone": true,
			"group": 38,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 10,
				"y": 13
			},
			"done": 1
		},
		{
			"id": "Vomiting",
			"name": "Vomissement",
			"desc": "Chaque fois que cette unité s'engage, elle crée une zone de [Poison] autour d'elle.",
			"mode": 2,
			"range": {
				"radius": 2.5,
				"baseDistance": 0,
				"type": 0
			},
			"props": {
				"vars": {
					"engaged": false,
					"value1": 2
				},
				"tooltipStatus": [
					{
						"st": "PoisonCloud"
					},
					{
						"st": "Poison"
					}
				],
				"globalEvents": true
			},
			"script": "function onBeginAction() {\n\tif( !skill.unit.isEngaged() ) {\n\t\tvars.engaged = false;\n\t}\n}\n\nfunction onSkillPlayed(s) {\n\tif( skill.unit.isEngaged() && !vars.engaged ) {\n\t\tvars.engaged = true;\n\t\tspawnFx();\n\t\tcreateAreaEffect(\"Immediate\", 1 , {skillId: Skill.PoisonZone} );\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 18,
				"y": 8
			},
			"iconeDone": true,
			"group": 39,
			"done": 2
		},
		{
			"id": "InfectedScratch",
			"name": "Blessure infectieuse",
			"desc": "Inflige [DMG] à la cible et lui applique ::value1:: [Fever].",
			"mode": 0,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fever"
					}
				],
				"dmgAttribute": 0,
				"vars": {
					"value1": 1
				},
				"isAttack": true,
				"useWithoutWeapon": true
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Fever, vars.value1);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 8
			},
			"minDmg": 8,
			"maxDmg": 10,
			"iconeDone": true,
			"group": 39,
			"done": 2
		},
		{
			"id": "PlagueOrganism",
			"name": "Organisme pestiféré",
			"desc": "Cette unité a [Pyrophobia] et les dégâts de [Poison] régénèrent sa [Health] à la place.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"played": false
				},
				"tooltipStatus": [
					{
						"st": "Pyrophobia"
					}
				],
				"globalEvents": true
			},
			"script": "function onBeginAction() {\n\tif ( !vars.played ) {\n\t\tskill.unit.addStatusPersist(Status.Pyrophobia, skill);\n\t\tskill.unit.addStatusPersist(Status.PoisonHeal, skill);\n\t\tvars.played = true;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 7
			},
			"iconeDone": true,
			"group": 39,
			"done": 2
		},
		{
			"id": "PutrefiedBrain",
			"name": "Cervelle putréfiée",
			"desc": "Cette unité a [SlowReflexes]",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"played": false,
					"value1": 50
				},
				"tooltipStatus": [
					{
						"st": "SlowReflexes"
					}
				],
				"globalEvents": true
			},
			"script": "function onBeginAction() {\n\tif ( !vars.played ) {\n\t\tskill.unit.addStatusPersist(Status.SlowReflexes, skill);\n\t\tvars.played = true;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 10,
				"y": 16
			},
			"iconeDone": true,
			"group": 39,
			"done": 2
		},
		{
			"id": "DeepBite",
			"name": "Morsure profonde",
			"desc": "Inflige [DMG] à la cible.\n\n[Backstab] : Coup critique assuré.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"useWithoutWeapon": true
			},
			"script": "function onEval(a) {\n\tif( a.backstab ) {\n\t\ta.criticalHitPercent = 100;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 9
			},
			"minDmg": 6.5,
			"maxDmg": 8.5,
			"iconeDone": true,
			"group": 40,
			"done": 2
		},
		{
			"id": "Cannibalism",
			"name": "Cannibalisme",
			"desc": "Chaque fois que cette unité inflige des dégâts à la [Health], elle se soigne du même montant.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onDamageDealt(a) {\n\tif( a.damagedHealth > 0 ) {\n\t\tspawnFx();\n\t\tskill.unit.gainsHealth(a.damagedHealth);\n\t}\n}\n",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 9
			},
			"iconeDone": true,
			"group": 40,
			"done": 2
		},
		{
			"id": "AllyOfDarkness",
			"name": "Allié de l'obscurité",
			"desc": "Tant que cette unité évolue dans l'obscurité, elle a [Brutality]. Sinon, a [Fragility].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Brutality"
					},
					{
						"st": "Fragility"
					}
				],
				"globalEvents": true
			},
			"script": "function onBeginAction() {\n\tif ( skill.unit.isInLight() ) {\n\t\tskill.unit.cancelStatus(Status.Brutality, skill);\n\t\tif ( !skill.unit.hasStatusPersist(Status.Fragility, skill) ) {\n\t\t\tspawnFx();\n\t\t}\n\t\tskill.unit.addStatusPersist(Status.Fragility, skill);\n\t} else {\n\t\tskill.unit.cancelStatus(Status.Fragility, skill);\n\t\tif ( !skill.unit.hasStatusPersist(Status.Brutality, skill) ) {\n\t\t\tspawnFx();\n\t\t}\n\t\tskill.unit.addStatusPersist(Status.Brutality, skill);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 10
			},
			"iconeDone": true,
			"group": 40,
			"done": 2
		},
		{
			"id": "FrozenClawStrike",
			"name": "Coup de griffe gelé",
			"desc": "Inflige [DMG] à la cible et lui applique [Slowdown] pendant ::value1:: round.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"useWithoutWeapon": true,
				"vars": {
					"value1": 2
				},
				"tooltipStatus": [
					{
						"st": "Slowdown"
					}
				],
				"feature": "Alazar1_Update"
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Slowdown, vars.value1, true);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 40,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 13,
				"y": 12
			},
			"minDmg": 6.5,
			"maxDmg": 8.5,
			"done": 2
		},
		{
			"id": "FrozenBreath",
			"name": "Souffle glacial",
			"desc": "À la fin de son tour, cette unité inflige des dégâts à la [Health] de tous les ennemis adjacents égaux à ::value1::% de leur [Health] maximum.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 15
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onEndTurn() {\n\tfor( u in getFoes(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) ) {\n\t\t\tu.damages(skill, ceil(u.stats.health*vars.value1/100), true);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 40,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 14
			},
			"done": 2
		},
		{
			"id": "AllyOfFog",
			"name": "Allié du brouillard",
			"desc": "Tant que cette unité évolue dans le brouillard, elle a [Brutality]. Sinon, a [Fragility].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Brutality"
					},
					{
						"st": "Fragility"
					}
				],
				"globalEvents": true,
				"feature": "Alazar1_Update"
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 40,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 14
			},
			"done": 2
		},
		{
			"id": "TerrifyingAppearance",
			"name": "Allure terrifiante",
			"desc": "Chaque fois que cette unité attaque, elle applique ::value1:: [Terror].\nSi elle meurt, réduit de ::value2:: la [Terror] de l'unité l'ayant tuée.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1,
					"nightmare": false,
					"value2": 3
				},
				"tooltipStatus": [
					{
						"st": "Terror"
					}
				],
				"globalEvents": true
			},
			"script": "function onDamageDealt(a) {\n\tif( a.unit == skill.unit ) {\n\t\tspawnFx();\n\t\ta.target.addStatus(Status.Terror, vars.value1);\n\t}\n}\n\nfunction onDeath(a) {\n\tif( a.unit != null && a.target == skill.unit ) {\n\t\ta.unit.consumeStatus(Status.Terror, vars.value2);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 17,
				"y": 10
			},
			"iconeDone": true,
			"group": 41,
			"done": 2
		},
		{
			"id": "TerrorLink",
			"name": "Lien de terreur",
			"desc": "Inflige [VALUE] dégâts à la [Health] et applique [TerrorLink] à la cible et à un autre compagnon aléatoire.",
			"mode": 0,
			"range": {
				"baseDistance": 10
			},
			"props": {
				"specialAnim": "Taunt",
				"tooltipStatus": [
					{
						"st": "TerrorLink"
					},
					{
						"st": "Terror"
					}
				],
				"scaledValue": 5,
				"scaledValueAttribute": 0,
				"extraFx": "prefabs/fx/fight/BuffCry/AttackCryRed.fx"
			},
			"script": "function onSkill() {\n\tplay();\n\tvar currenttarget = null;\n\tfor( t in skill.getTargets() ) {\n\t\tcurrenttarget = t.target;\n\t\tt.target.damages(skill, skill.value, true);\n\t}\n\tvar arr = [];\n\tfor( u in getFoes(skill.unit) ) {\n\t\tif( !u.hasStatus(Status.TerrorLink) && u != currenttarget ) {\n\t\t\tarr.push(u);\n\t\t}\n\t}\n\tif( arr.length > 0 ) {\n\t\tcurrenttarget.addStatus(Status.TerrorLink);\n\t\tarr[randInt(0,arr.length-1)].addStatus(Status.TerrorLink);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 11
			},
			"minDmg": 3,
			"maxDmg": 5,
			"iconeDone": true,
			"group": 41,
			"done": 2
		},
		{
			"id": "NightmarishApperance",
			"name": "Allure cauchemardesque",
			"desc": "Chaque fois que cette unité subit des dégâts, elle applique ::value1:: [Terror] à l'attaquant.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Terror"
					}
				]
			},
			"script": "function onDamageTaken(a) {\n\tspawnFx();\n\ta.unit.addStatus(Status.Terror, vars.value1);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 10
			},
			"iconeDone": true,
			"group": 41,
			"done": 2
		},
		{
			"id": "BeastRoar",
			"name": "Hurlement de la Bête",
			"desc": "Applique ::value1:: [Terror] à tous les ennemis et [Fury] à tous les alliés.",
			"mode": 4,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Terror"
					},
					{
						"st": "Fury"
					}
				],
				"specialAnim": "Roar"
			},
			"script": "function onSkill() {\n\tbeastRoar();\n\tfor( u in getFoes(skill.unit) ) {\n\t\tu.addStatus(Status.Fury);\n\t}\n\tfor( u in getAllies(skill.unit) ) {\n\t\tu.addStatus(Status.Terror, vars.value1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 7
			},
			"iconeDone": true,
			"group": 41,
			"done": 2
		},
		{
			"id": "DreadfulSting",
			"name": "Piqûre épouvantable",
			"desc": "Inflige [DMG] à la [Health] de la cible.\nLes dégâts ignorent la [Guard].\n\n[CapaCritical] : Applique ::value1:: [Fever].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Fever"
					}
				],
				"flags": 3,
				"extraFx": "prefabs/fx/fight/Special/BloodSplash.fx",
				"powerScale": 0.7
			},
			"script": "function onDamage(a) {\n\tif( a.isCritical ) {\n\t\ta.target.addStatus(Status.Fever);\n\t}\n}",
			"notes": "",
			"minDmg": 3,
			"maxDmg": 5,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 4
			},
			"iconeDone": true,
			"group": 42,
			"done": 2
		},
		{
			"id": "BloodDrinker",
			"name": "Buveur de sang",
			"desc": "Chaque fois que cette unité inflige des dégâts, elle gagne ::value1:: application de [BloodReserve].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "BloodReserve"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tvar nb = skill.unit.getStatusCount(Status.BloodReserve);\n\tskill.unit.addStatus(Status.BloodReserve, vars.value1);\n\tnb += vars.value1;\n\tif( nb >= 2 ) {\n\t\tskill.unit.consumeStatus(Status.BloodReserve, nb);\n\t\tskill.unit.gainsHealth(skill.unit.stats.health);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 4
			},
			"iconeDone": true,
			"group": 42,
			"done": 2
		},
		{
			"id": "Lifesucker",
			"name": "Suceur de vie",
			"desc": "Chaque fois que cette unité inflige des dégâts, elle se soigne de la moitié des dégâts infligés.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "function onDamageDealt(a) {\n\tskill.unit.gainsHealth(round(a.dmg*((vars.value1)/100)) );\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 5
			},
			"iconeDone": true,
			"group": 42,
			"done": 2
		},
		{
			"id": "BloodExcitation",
			"name": "Excitation sanguine",
			"desc": "Chaque fois que cette unité se soigne, elle gagne [Fury].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"life": 0
				},
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				]
			},
			"script": "function onSkillEval(a) {\n\tvars.life = skill.unit.health;\n}\n\nfunction onDamageDealt(a) {\n\tvar life2 = skill.unit.health;\n\tif( life2 > vars.life ) {\n\t\tskill.unit.addStatus(Status.Fury);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 10,
				"y": 4
			},
			"iconeDone": true,
			"group": 42,
			"done": 2
		},
		{
			"id": "PowerReserve",
			"name": "Réserve de puissance",
			"desc": "[DamageBonusPercent] augmentés de ::value1::% pour chaque [BloodReserve].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"tooltipStatus": [
					{
						"st": "BloodReserve"
					}
				]
			},
			"script": "function onEval(a) {\n\ta.baseDamageBonus += skill.unit.getStatusCount(Status.BloodReserve)*vars.value1;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 13,
				"y": 4
			},
			"iconeDone": true,
			"group": 42,
			"done": 2
		},
		{
			"id": "VenimousTrumpet",
			"name": "Trompe venimeuse",
			"desc": "Chaque attaque applique également ::value1:: [Poison].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\ta.target.addStatus(Status.Poison, vars.value1);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 4
			},
			"iconeDone": true,
			"group": 42,
			"done": 2
		},
		{
			"id": "DopingTransfusion",
			"name": "Transfusion dopante",
			"desc": "Cette unité confère [Fury] à un compagnon adjacent pendant le Repos.",
			"mode": 6,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 4
			},
			"iconeDone": true,
			"group": 42,
			"done": 2
		},
		{
			"id": "BloodCollection",
			"name": "Prélèvement sanguin",
			"desc": "Cette unité peut piquer un compagnon pour supprimer son besoin en nourriture pendant les ::value1:: prochains repas.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"value1": 2
				}
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 3,
				"y": 5
			},
			"iconeDone": true,
			"group": 42,
			"done": 2
		},
		{
			"id": "DopingSshot",
			"name": "Piqûre dopante",
			"desc": "Si l'attaque cible un ennemi, lui inflige [DMG] et lui applique [Vulnerability].\n\nSi l'attaque cible un allié, le soigne de ::value1::% de sa [Health] maximum et lui confère [Fury].",
			"mode": 0,
			"range": {
				"allowedTargets": 5
			},
			"props": {
				"vars": {
					"value1": 10
				},
				"dmgAttribute": 0,
				"cursor": "CursorHeal",
				"healPreview": 0.1,
				"tooltipStatus": [
					{
						"st": "Vulnerability"
					},
					{
						"st": "Fury"
					}
				]
			},
			"script": "function onSkill() {\n\tif( skill.target.side != skill.unit.side ) {\n\t\tattack();\n\t\tskill.target.addStatus(Status.Vulnerability);\n\t} else {\n\t\tplay();\n\t\tskill.target.gainsHealth( ceil(skill.target.stats.health*vars.value1/100) , null);\n\t\tskill.target.addStatus(Status.Fury);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 42,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 17
			},
			"minDmg": 7,
			"maxDmg": 9,
			"done": 2
		},
		{
			"id": "Browser",
			"name": "Fureteur",
			"desc": "Cette unité a une chance de trouver des composants d'alchimie pendant le Repos.",
			"mode": 6,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 42,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 17
			},
			"done": 1
		},
		{
			"id": "MonstrousPawStrike",
			"name": "Coup de patte monstrueux",
			"desc": "Inflige [DMG] à la cible. \nSi cette unité est déjà engagée, elle gagne [Relentlessness].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"engaged": false
				},
				"tooltipStatus": [
					{
						"st": "Relentlessness"
					}
				],
				"powerScale": 0.2,
				"aiOrder": 1
			},
			"script": "function onEval(a) {\n\tvars.engaged = ( a.target.isEngaged() && a.target.engagedUnit == skill.unit && a.unit == skill.unit );\n}\n\nfunction onPostSkill() {\n\tif( vars.engaged && skill.unit.isEngaged() ) {\n\t\tskill.unit.addStatus(Status.Relentlessness);\n\t}\n}",
			"notes": "",
			"minDmg": 7,
			"maxDmg": 9,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 3,
				"y": 4
			},
			"iconeDone": true,
			"group": 43,
			"done": 2
		},
		{
			"id": "WildTenacity",
			"name": "Ténacité sauvage",
			"desc": "Quand cette unité doit mourir, elle gagne [Berserk] et ne meurt pas. \nSi elle a déjà [Berserk], elle meurt.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Berserk"
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 4
			},
			"iconeDone": true,
			"group": 43,
			"done": 2
		},
		{
			"id": "RagingPawStrike",
			"name": "Coup de patte rageur",
			"desc": "Inflige ::value3:: fois [DMG] à la cible.\nSi cette unité a accumulé plus de ::value1:: [AnimalMarkedBonus], elle gagne [Relentlessness].\nSi elle en accumulé plus de ::value2::, elle gagne également [Berserk].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 8,
					"value2": 16,
					"value3": 2
				},
				"tooltipStatus": [
					{
						"st": "Relentlessness"
					},
					{
						"st": "Berserk"
					}
				],
				"feature": "Alazar1_Update",
				"powerScale": 0.2,
				"aiOrder": 1
			},
			"script": "function onSkill() {\n\tfor( i in 0...vars.value3 ) {\n\t\tattack();\n\t}\n}\n\nfunction onDamage(a) {\n\tif( skill.unit.getStatusCount(Status.AnimalMarkedBonus) >= vars.value1 ) {\n\t\tskill.unit.addStatus(Status.Relentlessness);\n\t}\n\tif( skill.unit.getStatusCount(Status.AnimalMarkedBonus) >= vars.value2 ) {\n\t\tskill.unit.addStatus(Status.Berserk);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 43,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 17
			},
			"minDmg": 4,
			"maxDmg": 6,
			"done": 2
		},
		{
			"id": "HotBlood",
			"name": "Sang chaud",
			"desc": "Chaque fois que cette unité effectue ou subit une attaque, elle gagne ::value1:: [AnimalMarkedBonus].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "AnimalMarkedBonus"
					}
				],
				"vars": {
					"value1": 2
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onDamageDealt(a) {\n\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value1);\n}\n\nfunction onDamageTaken(a) {\n\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 43,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 17
			},
			"done": 2
		},
		{
			"id": "NaturalSprinter",
			"name": "Sprinter né",
			"desc": "Cette unité gagne [Inspiration] pendant ::value1:: round.",
			"mode": 4,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Inspiration"
					}
				],
				"vars": {
					"value1": 1
				},
				"feature": "Alazar1_Update",
				"apCost": 1,
				"aiOrder": 0
			},
			"script": "function onSkill() {\n\tplay();\n\tskill.unit.addStatus(Status.Inspiration, vars.value1, true);\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 43,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 19,
				"y": 3
			}
		},
		{
			"id": "PrimalWrath",
			"name": "Courroux primal",
			"desc": "Tant que cette unité n'est pas [Surrounded], elle a [Fury].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Surrounded"
					},
					{
						"st": "Fury"
					}
				],
				"globalEvents": true,
				"descPassiveGroup": "[GROUPTYPE] : Tant qu'une unité n'est ni engagée ni [Surrounded], elle a [Fury]."
			},
			"script": "function onBeginAction() {\n\tif( !skill.unit.hasStatus(Status.Surrounded) ) {\n\t\tskill.unit.addStatusPersist(Status.Fury, skill);\n\t} else skill.unit.cancelStatus(Status.Fury, skill);\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 43,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 18,
				"y": 2
			}
		},
		{
			"id": "Indomitability",
			"name": "Indomptabilité",
			"desc": "[Strength] et [Constitution] augmentées de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				},
				"attributes": [
					{
						"kind": "Strength",
						"value": 10,
						"isPercentage": true
					},
					{
						"kind": "Constitution",
						"value": 10,
						"isPercentage": true
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 19,
				"y": 3
			},
			"iconeDone": true,
			"group": 43,
			"done": 2
		},
		{
			"id": "KingOfTheForest",
			"name": "Roi de la forêt",
			"desc": "Si cette unité débute un combat dans une forêt, elle a [Galvanization].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Galvanization"
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 4
			},
			"levels": [],
			"iconeDone": true,
			"group": 43,
			"done": 2
		},
		{
			"id": "KingOfTheMountain",
			"name": "Roi de la montagne",
			"desc": "Si cette unité débute un combat dans une montagne, elle a [Galvanization].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Galvanization"
					}
				],
				"feature": "Alazar1_Update"
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 43,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 17
			},
			"done": 2
		},
		{
			"id": "FeralVividness",
			"name": "Vivacité farouche",
			"desc": "Les attaques d'opportunité de cette unité ignorent la [Guard].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "",
			"notes": "Hard coded",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 3
			},
			"iconeDone": true,
			"group": 43,
			"done": 2
		},
		{
			"id": "IntimidatingGrowl",
			"name": "Grognement intimidant",
			"desc": "Force la cible à s'engager et lui applique [Fragility] pendant ::value1:: rounds.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"apCost": 1,
				"tooltipStatus": [
					{
						"st": "Fragility"
					}
				],
				"specialAnim": "Growl",
				"extraFx": "prefabs/fx/fight/Creatures/DebuffCry_Bear.fx"
			},
			"script": "function onSkill() {\n\tfor( t in skill.getTargets() ) {\n\t\tt.target.addStatus(Status.Fragility, vars.value1, true);\n\t\tif( t.target.engagedUnit != skill.unit ) {\n\t\t\tt.target.disengage(false);\n\t\t\tt.target.engage(skill.unit);\n\t\t}\n\t}\n\tplay();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 0,
				"y": 4
			},
			"iconeDone": true,
			"group": 43,
			"done": 2
		},
		{
			"id": "ComfortableFur",
			"name": "Fourrure confortable",
			"desc": "Tout compagnon qui passe son Repos adjacent à cette unité génère <ap>::value1::</ap> supplémentaire.\n\nLimité à ::value2:: compagnon par ours.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"value1": 1,
					"value2": 1
				}
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 17,
				"y": 3
			},
			"iconeDone": true,
			"group": 43,
			"done": 2
		},
		{
			"id": "MasterAngler",
			"name": "Maître-pêcheur",
			"desc": "Vous avez une chance d'attraper des Poissons en marchant près des cours d'eau.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"durationDaysNextToWater": 0.1,
					"cooldownDays": 1.2
				}
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 4
			},
			"iconeDone": true,
			"group": 43,
			"done": 2
		},
		{
			"id": "Enraged",
			"name": "Enragé",
			"desc": "Les unités ennemies adjacentes ont [Immobile].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Immobile"
					}
				]
			},
			"script": "function onSkill() {\n\tfor( u in getFoes(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) ) {\n\t\t\tu.addStatus(Status.Immobile);\n\t\t}\n\t\telse {\n\t\t\tu.cancelStatus(Status.Immobile);\n\t\t}\n\t}\n}",
			"notes": "Je n'arrive pas à le faire marcher en script.",
			"iconeDone": true,
			"group": 43,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 18
			},
			"done": 2
		},
		{
			"id": "Tamed",
			"name": "Dompté",
			"desc": "Transport +[ATTR]",
			"mode": 6,
			"range": {},
			"props": {
				"attributes": [
					{
						"kind": "Transport",
						"value": 50
					}
				]
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 43,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 17
			},
			"done": 2
		},
		{
			"id": "Uncontrollable",
			"name": "Incontrôlable",
			"desc": "Cette unité ne peut ni être engagée ni repoussée.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 6
			},
			"iconeDone": true,
			"group": 45,
			"done": 2
		},
		{
			"id": "LucillaJudgment",
			"name": "Jugement de Lucilla",
			"desc": "Applique [Sentence] à l'ennemi le plus proche.",
			"mode": 0,
			"range": {
				"flags": 6,
				"allowedTargets": 0,
				"baseDistance": 30
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "Sentence"
					}
				]
			},
			"script": "function onSkill() {\n\tfor( u in getFoes(skill.unit) )\n\t\tu.cancelStatus(Status.Sentence);\n\tfor (t in skill.getTargets()) {\n\t\tt.target.addStatus(Status.Sentence);\n\t\tsetPriorityTarget(t.target);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 6
			},
			"iconeDone": true,
			"group": 45,
			"done": 2
		},
		{
			"id": "LucillaVengeance",
			"name": "Vengeance de Lucilla",
			"desc": "Cible une zone.\nInflige [DMG] à toutes les unités dans la zone et les repousse de ::value1:: mètres au début du tour suivant.",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 3,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Targeting"
					}
				],
				"isAttack": true,
				"vars": {
					"value1": 6
				},
				"specialAnim": "AttackWide",
				"pendingSkill": 0,
				"defaultAction": true,
				"fxSuffix": 0,
				"extraFx": "prefabs/fx/fight/Special/PushingWhooshCone_M2.fx"
			},
			"script": "function onSkill() {\n\tif( waitNextTurn() ) {\n\t\tprepareAttack();\n\t\tcreateZone();\n\t\tskill.unit.addStatus(Status.Targeting);\n\t\treturn;\n\t}\n\tattack();\n\tcancelZone();\n}\n\nfunction onHit(a) {\n\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n}\n\nfunction getPushback( a ) {\n\treturn vars.value1;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 14,
				"y": 6
			},
			"minDmg": 13.5,
			"iconeDone": true,
			"group": 45,
			"done": 2
		},
		{
			"id": "ToxicBlade",
			"name": "Lame toxique",
			"desc": "Inflige [DMG] à la cible. Consomme tous les [Poison]s appliqués pour augmenter les dégâts de ::value1::% par application.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 25
				},
				"dmgAttribute": 1,
				"isAttack": true,
				"defaultAction": true,
				"specialAnim": "AttackPower",
				"fxSuffix": 0,
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				],
				"extraFx": "prefabs/fx/fight/Special/PoisonSlashTrail.fx"
			},
			"script": "function onEval(a) {\n\tfor( s in a.target.getAllStatus() ) {\n\t\tif( s.kind == Status.Poison ) {\n\t\t\ta.baseDamageBonus += s.count * vars.value1;\n\t\t}\n\t}\n}\n\nfunction onDamage(a) {\n\tfor( st in a.target.getAllStatus() ) {\n\t\tif( st.kind == Status.Poison ) {\n\t\t\tst.cancel();\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 7,
				"y": 11
			},
			"minDmg": 6,
			"iconeDone": true,
			"group": 46,
			"done": 2
		},
		{
			"id": "RatMaster",
			"name": "Maître des rats",
			"desc": "Tous les ::value1:: rats alliés tués, cette unité gagne [Berserk] pendant ::value2:: round.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 3,
					"value2": 1,
					"value3": 1
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Berserk"
					}
				]
			},
			"script": "function onDeath(a) {\n\tif( a.target.kind == UnitClass.PlaguedRat && a.target.side == skill.unit.side && !skill.unit.hasStatus(Status.Berserk) ) {\n\t\tskill.unit.addStatus(Status.BerserkStack, vars.value3);\n\t}\n\tif( skill.unit.getStatusCount(Status.BerserkStack) >= vars.value1 ) {\n\t\tskill.unit.cancelStatus(Status.BerserkStack);\n\t\tskill.unit.addStatus(Status.Berserk, vars.value2, true);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 4,
				"y": 15
			},
			"iconeDone": true,
			"group": 46,
			"done": 2
		},
		{
			"id": "Nepti",
			"name": "Semeur de laideur",
			"desc": "Inflige [DMG] à toutes les cibles dans la zone et applique ::value1:: [Corrosion] et [Poison].",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 3,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 2
				},
				"defaultAction": true,
				"isAttack": true,
				"specialAnim": "AttackWide",
				"fxSuffix": 0,
				"tooltipStatus": [
					{
						"st": "Corrosion"
					},
					{
						"st": "Poison"
					}
				],
				"extraFx": "prefabs/fx/fight/Special/PoisonSlashTrail.fx"
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Corrosion, vars.value1);\n\ta.target.addStatus(Status.Poison, vars.value1);\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 47,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 17,
				"y": 0
			},
			"minDmg": 7
		},
		{
			"id": "PiercingArrow",
			"name": "Flèche perforante",
			"desc": "Inflige [DMG] à toutes les unités dans la zone.\n\n[CapaCritical] : La cible est repoussée de ::value2:: mètres et perd ::value1::% de sa [Health] maximum.",
			"mode": 5,
			"range": {
				"type": 2,
				"radius": 1,
				"allowedTargets": 5,
				"baseDistance": 10
			},
			"props": {
				"vars": {
					"value1": 10,
					"value2": 2
				},
				"dmgAttribute": 1,
				"isAttack": true,
				"preventEngage": true,
				"defaultAction": true,
				"flags": 64,
				"fxSuffix": 0
			},
			"script": "function onDamage(a) {\n\tif( a.isCritical ) {\n\t\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n\t\ta.target.damages(skill, ceil(a.target.stats.health*vars.value1/100), true);\n\t}\n}\n\nfunction getPushback( a ) {\n\treturn vars.value2;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 8,
				"y": 11
			},
			"minDmg": 5,
			"iconeDone": true,
			"group": 48,
			"done": 2
		},
		{
			"id": "Training",
			"name": "Dressage",
			"desc": "Tous les animaux alliés engagés effectuent une attaque d'opportunité contre leur adversaire.\n\nS'il n'y a pas d'animaux alliés, appelle des renforts.",
			"mode": 4,
			"range": {},
			"props": {
				"specialAnim": "Taunt",
				"vars": {
					"value1": 3
				},
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onSkill() {\n\tplay();\n\tvar nb = 0;\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( u.isAnimal ) {\n\t\t\tnb++;\n\t\t\tif( u.isEngaged() ) {\n\t\t\t\tu.opportunityAttack(u.engagedUnit, skill);\n\t\t\t}\n\t\t}\n\t}\n\tif( nb == 0 ) {\n\t\tspawnRenfort(UnitClass.KaghalBoar, vars.value1, false);\n\t\tspawnRenfort(UnitClass.KaghalWolf, vars.value1, false);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 4,
				"y": 13
			},
			"iconeDone": true,
			"group": 48,
			"done": 2
		},
		{
			"id": "PackLeader",
			"name": "Chef de meute",
			"desc": "Gagne [AnimalProtection] pour chaque animal allié non-engagé.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "AnimalProtection"
					}
				]
			},
			"script": "function onBeginAction() {\n\tvar nb = 0;\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( u.isAnimal && !u.isEngaged() ) {\n\t\t\tnb++;\n\t\t}\n\t}\n\tvar count = skill.unit.getStatusCount(Status.AnimalProtection);\n\tvar delta = nb - count;\n\tif( delta > 0 ) {\n\t\tskill.unit.addStatus(Status.AnimalProtection, delta);\n\t} else skill.unit.consumeStatus(Status.AnimalProtection, (count-nb));\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 13
			},
			"iconeDone": true,
			"group": 48,
			"done": 2
		},
		{
			"id": "BattleBrothers",
			"name": "Frères de bataille",
			"desc": "Chaque fois qu'un animal allié meurt, cette unité gagne ::value1:: [Wrath].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Wrath"
					}
				]
			},
			"script": "function onDeath(a) {\n\tif( a.target.isAnimal && a.target.side == skill.unit.side ) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.Wrath, vars.value1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 10,
				"y": 11
			},
			"iconeDone": true,
			"group": 48,
			"done": 2
		},
		{
			"id": "FeralCharge",
			"name": "Charge farouche",
			"desc": "Se désengage et charge en ligne droite. Inflige [DMG] à toutes les unités sur le chemin et applique [Vulnerability].",
			"mode": 3,
			"range": {
				"flags": 1,
				"baseDistance": 8
			},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Vulnerability"
					}
				]
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Vulnerability);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 7,
				"y": 14
			},
			"minDmg": 5,
			"iconeDone": true,
			"group": 48,
			"done": 2
		},
		{
			"id": "DefenseOfTheOwner",
			"name": "Défense du maître",
			"desc": "Inflige [DMG] à la cible et la force à s'engager.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"defaultAction": true
			},
			"script": "function onDamage(a) {\n\tif( a.target.engagedUnit != skill.unit ) {\n\t\ta.target.disengage(false);\n\t\ta.target.engage(skill.unit);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 15
			},
			"minDmg": 7,
			"maxDmg": 9,
			"iconeDone": true,
			"group": 48,
			"done": 2
		},
		{
			"id": "SliceAndDice",
			"name": "Bonne tranche",
			"desc": "Inflige [VALUE] dégâts à toutes les unités dans la zone.\nLes dégâts sont partagés entre les unités touchées qui subissent autant d'applications de [Bloodshed].",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 3,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"scaledValue": 9,
				"scaledValueAttribute": 0,
				"vars": {
					"value1": 100,
					"healthproc": 50
				},
				"tooltipStatus": [
					{
						"st": "Bloodshed"
					}
				],
				"isAttack": true,
				"defaultAction": true,
				"specialAnim": "AttackWide",
				"fxSuffix": 0
			},
			"script": "function onEval(a) {\n\ta.dmg = round(skill.value/skill.getTargets().length);\n}\n\nfunction onDamage(a) {\n\ta.target.addStatus(Status.Bloodshed, a.dmgDealt);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 15
			},
			"minDmg": 0,
			"iconeDone": true,
			"group": 49,
			"levels": [],
			"done": 2
		},
		{
			"id": "LossOfControl",
			"name": "Perte de contrôle",
			"desc": "Quand cette unité a moins de ::value1::% de [Health], elle a [Brutality].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"tooltipStatus": [
					{
						"st": "Brutality"
					}
				]
			},
			"script": "function onDamageTaken(a) {\n\tif( skill.unit.health < (skill.unit.stats.health*vars.value1/100) ) {\n\t\tskill.unit.addStatusPersist(Status.Brutality, skill);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 4,
				"y": 14
			},
			"iconeDone": true,
			"group": 49,
			"done": 2
		},
		{
			"id": "BionnAttack",
			"name": "Frappe de la Traque",
			"desc": "Inflige [DMG] à la cible et gagne ::value1:: [AnimalMarkedBonus].\n\n[CapaCritical] : Gagne ::value1:: [AnimalMarkedBonus].",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 2
				},
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "AnimalMarkedBonus"
					}
				],
				"isAttack": true,
				"defaultAction": true,
				"specialAnim": "AttackPower",
				"fxSuffix": 0
			},
			"script": "function onDamage(a) {\n\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value1);\n\tif( a.isCritical ) {\n\t\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 5,
				"y": 1
			},
			"minDmg": 7,
			"maxDmg": 9,
			"iconeDone": true,
			"group": 50,
			"done": 2
		},
		{
			"id": "TransformedBionnAttack",
			"name": "Violent coup de griffe pestiféré",
			"desc": "Inflige [DMG] à la cible, gagne ::value1:: [AnimalMarkedBonus] et applique ::value2:: [Fever].\n\n[CapaCritical] : Gagne ::value1:: [AnimalMarkedBonus].",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 2,
					"value2": 5
				},
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Fever"
					},
					{
						"st": "AnimalMarkedBonus"
					}
				],
				"useWithoutWeapon": true,
				"animFx": "prefabs/fx/fight/Attack/TransformedBionnAttack.fx"
			},
			"script": "function onDamage(a) {\n\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value1);\n\ta.target.addStatus(Status.Fever, vars.value2);\n\tif( a.isCritical ) {\n\t\tskill.unit.addStatus(Status.AnimalMarkedBonus, vars.value1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 6,
				"y": 5
			},
			"minDmg": 12,
			"maxDmg": 14,
			"iconeDone": true,
			"group": 50,
			"done": 2
		},
		{
			"id": "IrrationalScreaming",
			"name": "Hurlement irraisonné",
			"desc": "Hurle pour appeler en renforts un nombre de pestiférés égal à son nombre de [BionnPanic]. Puis, retire toutes ses applications.",
			"mode": 4,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "BionnPanic"
					}
				]
			},
			"script": "function onSkill() {\n\tvar count = skill.unit.getStatusCount(Status.BionnPanic);\n\tspawnRenfort(UnitClass.Plagueridden, count, false);\n\tskill.unit.consumeStatus(Status.BionnPanic, count);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 5
			},
			"iconeDone": true,
			"group": 50,
			"done": 2
		},
		{
			"id": "DisturbedMind",
			"name": "Esprit perturbé",
			"desc": "[DamageBonusPercent] réduits de ::value1::% pour chaque pestiféré au combat.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				}
			},
			"script": "function onBeginAction() {\n\tvar nb = 0;\n\tfor ( p in getUnits() ) {\n\t\tif( p.kind == UnitClass.Plagueridden ) {\n\t\t\tnb++;\n\t\t}\n\t}\n\tvar count = skill.unit.getStatusCount(Status.FearPlague);\n\tvar delta = nb - count;\n\tif( delta > 0 ) {\n\t\tskill.unit.addStatus(Status.FearPlague, delta);\n\t} else skill.unit.consumeStatus(Status.FearPlague, (count-nb));\n\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 5
			},
			"iconeDone": true,
			"group": 50,
			"done": 2
		},
		{
			"id": "GlimmersOfMortality",
			"name": "Lueurs de mortalité",
			"desc": "Chaque fois que cette unité subit une attaque, elle gagne une application de [BionnPanic].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "BionnPanic"
					}
				]
			},
			"script": "function onDamageTaken(a) {\n\tskill.unit.addStatus(Status.BionnPanic);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 10,
				"y": 5
			},
			"iconeDone": true,
			"group": 50,
			"done": 2
		},
		{
			"id": "Transformation",
			"name": "Transformation",
			"desc": "Quand cette unité atteint ::value1::% de sa [Health] maximum, elle se transforme.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"globalEvents": true,
				"extraFx": "prefabs/fx/fight/BuffCry/BionnTransformation.fx"
			},
			"script": "function checkHealth() {\n\tvar pc = 100 * (skill.unit.health / skill.unit.stats.health);\n\tif ( pc < vars.value1 && skill.unit.kind != UnitClass.BionnZombie ) {\n\t\tskill.unit.cancelStatus(Status.Plagued);\n\t\tbionnTransformation();\n\t}\n}\n\nfunction onBeginAction() {\n\tcheckHealth();\n}\n\nfunction onPostSkill() {\n\tcheckHealth();\n}",
			"notes": "",
			"iconeDone": true,
			"group": 50,
			"done": 2,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 5
			}
		},
		{
			"id": "FenrisSeek",
			"name": "Cibler les faibles",
			"desc": "Applique [Sentence] à l'ennemi le plus faible à portée.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Sentence"
					}
				],
				"vars": {
					"value1": 16
				},
				"globalEvents": true
			},
			"script": "function onBeginAction() {\n\tvar current = null;\n\tvar scores : Array<{ u : battle.skill.UnitView, score : Int }> = [];\n\tfor( t in getPlayerUnits() ) {\n\t\tif(\tt.hasStatus(Status.Sentence) )\n\t\t\tcurrent = t;\n\t\tvar power = t.armor + (t.armor > 0 ? t.guard : 0) + t.health;\n\t\tif( !t.hasStatus(Status.Dying) ) {\n\t\t\tvar idx = 0;\n\t\t\tfor( i in 0...scores.length ) {\n\t\t\t\tvar s = scores[idx];\n\t\t\t\tif( power < s.score )\n\t\t\t\t\tbreak;\n\t\t\t\tidx = i;\n\t\t\t}\n\t\t\tscores.insert(idx, { u : t, score : power });\n\t\t}\n\t}\n\n\tvar validUnits = [];\n\tfor( s in scores )\n\t\tvalidUnits.push(s.u);\n\n\tvar target = getFirstReachableUnit(skill.unit, validUnits);\n\tif( target == null && scores.length > 0 ) {\n\t\ttarget = scores[0].u;\n\t}\n\n\tif( target != null ) {\n\t\ttarget.addStatus(Status.Sentence);\n\t\tif( current != null && current != target )\n\t\t\tcurrent.cancelStatus(Status.Sentence);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 15,
				"y": 7
			},
			"iconeDone": true,
			"group": 51,
			"done": 2
		},
		{
			"id": "FenrisElimination",
			"name": "Eliminer les faibles",
			"desc": "Inflige [DMG] et force la cible à se désengager.\nSi cette unité était déjà engagée, réinitialise cette compétence.",
			"mode": 0,
			"range": {
				"flags": 16,
				"baseDistance": 3
			},
			"props": {
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true,
				"vars": {
					"value1": 16,
					"wasEngaged": false
				},
				"fxSuffix": 0
			},
			"script": "function onBeginAction() {\n\tif( skill.unit.kind == UnitClass.FenrisFleeing ) {\n\t\treturn;\n\t}\n\tif(!skill.unit.isEngaged()) {\n\t\tfor(u in getPlayerUnits()) {\n\t\t\tif(u.hasStatus(Status.Sentence)) {\n\t\t\t\tsetPriorityTarget(u);\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tsetPriorityTarget(skill.unit.engagedUnit);\n\t}\n}\n\nfunction onEval(a) {\n\tvars.wasEngaged = skill.unit.isEngaged();\n}\n\nfunction onDamage(a) {\n\tif( vars.wasEngaged ) {\n\t\tallowReplay();\n\t}\n\ta.target.disengage(false);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 8
			},
			"minDmg": 8,
			"iconeDone": true,
			"group": 51,
			"done": 2
		},
		{
			"id": "FenrisFreedom",
			"name": "Pour la liberté !",
			"desc": "Inflige [DMG] à toutes les unités dans la zone, les repousse de ::value1:: mètres et leur applique [Bleeding].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"specialAnim": "AttackSpin",
				"vars": {
					"value1": 2
				}
			},
			"script": "function onHit(a) {\n\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n}\n\nfunction getPushback( a ) {\n\treturn vars.value1;\n}\n\nfunction onDamage(a) {\n\ta.target.addStatus(Status.Bleeding);\n}\n",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 16,
				"y": 7
			},
			"minDmg": 8,
			"maxDmg": 12,
			"iconeDone": true,
			"group": 51,
			"done": 2
		},
		{
			"id": "FenrisCourage",
			"name": "Force du Courage",
			"desc": "Chaque fois que cette unité inflige des dégâts, elle gagne une application de [FenrisCourage].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "FenrisCourage"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tskill.unit.addStatus(Status.FenrisCourage);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 8
			},
			"iconeDone": true,
			"group": 51,
			"done": 2
		},
		{
			"id": "FenrisCourageTrigger",
			"name": "Gagner ou Fuir !",
			"desc": "Quand l'unité atteint ::value1:: applications de [FenrisCourage], elle gagne [Brutality]. Quand l'unité a moins de ::value2::% de ses points de vie, elle décide de fuir le combat.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10,
					"value2": 20,
					"init": false
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "FenrisCourage"
					},
					{
						"st": "Brutality"
					}
				]
			},
			"script": "function checkCourage() {\n\tif( skill.unit.kind != UnitClass.FenrisFleeing ) {\n\t\tvar count = skill.unit.getStatusCount(Status.FenrisCourage);\n\n\t\tif ( count >= vars.value1 ) {\n\t\t\tskill.unit.addStatus(Status.Brutality);\n\t\t}\n\t}\n}\n\nfunction checkHealth() {\n\tif( skill.unit.kind != UnitClass.FenrisFleeing ) {\n\t\tvar pc = 100 * (skill.unit.health / skill.unit.stats.health);\n\t\tif ( pc < vars.value2 ) {\n\t\t\tnotify(\"fenris_transformation\");\n\t\t\tplayProcFx();\n\t\t\tskill.unit.setUnitClass(UnitClass.FenrisFleeing);\n\t\t\tsetPriorityTarget(null);\n\t\t\tfor(u in getPlayerUnits()) {\n\t\t\t\tu.cancelStatus(Status.Sentence);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction onBeginRound() {\n\tcheckHealth();\n\tcheckCourage();\n}\n\nfunction onBeginAction() {\n\tcheckHealth();\n\tcheckCourage();\n}\n\nfunction onPostSkill() {\n\tcheckCourage();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 11
			},
			"iconeDone": true,
			"group": 51,
			"done": 2
		},
		{
			"id": "FenrisCharge",
			"name": "Je dois fuir !",
			"desc": "Se désengage et charge en ligne droite. Inflige [DMG] à toutes les unités sur le chemin.",
			"mode": 3,
			"range": {
				"flags": 1,
				"baseDistance": 6
			},
			"props": {
				"dmgAttribute": 0,
				"specialAnim": "RunCharge"
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 15,
				"y": 9
			},
			"minDmg": 10,
			"iconeDone": true,
			"group": 51,
			"done": 2
		},
		{
			"id": "FenrisFlee",
			"name": "Fuite",
			"desc": "Si elle n'a plus de [FenrisCourage], l'unité fuit le combat. Sinon, elle perd ::value1:: [FenrisCourage].",
			"mode": 4,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 2
				}
			},
			"script": "function onSkill() {\n\tif(!skill.unit.hasStatus(Status.FenrisCourage)) {\n\t\twin(false);\n\t}\n\telse {\n\t\tskill.unit.consumeStatus(Status.FenrisCourage, vars.value1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 17,
				"y": 3
			},
			"iconeDone": true,
			"group": 51,
			"done": 2
		},
		{
			"id": "LightningSpin",
			"name": "Trombe fulgurante",
			"desc": "Inflige [DMG] à toutes les unités dans la zone et les repousse de ::value1:: mètres.\nLes unités qui n'ont pas pu être entièrement repoussées subissent ::value2::% de dégâts supplémentaires.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 5,
				"baseDistance": 0
			},
			"props": {
				"dmgAttribute": 0,
				"specialAnim": "AttackSpin",
				"isAttack": true,
				"defaultAction": true,
				"vars": {
					"value1": 2,
					"value2": 150
				},
				"fxSuffix": 0,
				"extraFx": "prefabs/fx/fight/Special/PushingWoosh.fx"
			},
			"script": "var arr = [];\n\nfunction onHit(a) {\n\tvar pushbackData = a.target.getPushbackData({ unit : skill.unit }, getPushback(a));\n\tif( pushbackData.touchObstacle || pushbackData.touchUnit )\n\t\tarr.push({unit : a.target, dmg : 0 });\n\ta.target.pushback({ unit : skill.unit }, getPushback(a));\n}\n\nfunction onDamage(a) {\n\tfor( t in arr ) {\n\t\tif( t.unit == a.target ) {\n\t\t\tt.dmg = round(a.dmg*vars.value2/100);\n\t\t}\n\t}\n\n}\n\nfunction getPushback( a ) {\n\treturn (vars.value1);\n}\n\nfunction onPostSkill() {\n\tfor( u in arr ) {\n\t\tif( u.unit != null && u.unit.isAlive() ) {\n   \t    \tu.unit.damages( skill, u.dmg);\n\t\t}\n\t}\n}",
			"notes": "",
			"minDmg": 7,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 19
			},
			"iconeDone": true,
			"group": 52,
			"done": 2
		},
		{
			"id": "BrotherUnion",
			"name": "Union fraternelle",
			"desc": "Si l'autre frère est à moins de ::value1:: mètres de portée, cette unité gagne [BrothersFury].",
			"mode": 2,
			"range": {
				"radius": 4
			},
			"props": {
				"vars": {
					"value1": 4
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "BrothersFury"
					}
				]
			},
			"script": "function onBeginAction() {\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( getDistance(u, skill.unit) <= vars.value1 ) {\n\t\t\tskill.unit.addStatus(Status.BrothersFury);\n\t\t} else skill.unit.cancelStatus(Status.BrothersFury);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 7,
				"y": 19
			},
			"iconeDone": true,
			"group": 52,
			"done": 2
		},
		{
			"id": "ValiantAssault",
			"name": "Assaut vaillant",
			"desc": "Inflige [DMG] à la cible\nSi cette unité est déjà engagée, elle gagne [Protection] pendant ::value1:: round.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"engaged": false,
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Protection"
					}
				],
				"dmgAttribute": 0,
				"defaultAction": true,
				"isAttack": true,
				"specialAnim": "AttackPower",
				"fxSuffix": 0
			},
			"script": "function onEval(a) {\n\tvars.engaged = ( a.target.isEngaged() && a.target.engagedUnit == skill.unit && a.unit == skill.unit );\n}\n\nfunction onPostSkill() {\n\tif( vars.engaged && skill.unit.isEngaged() ) {\n\t\tskill.unit.addStatus(Status.Protection, vars.value1, true);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 16,
				"y": 4
			},
			"minDmg": 7,
			"maxDmg": 9,
			"iconeDone": true,
			"group": 52,
			"done": 2
		},
		{
			"id": "ForGlory",
			"name": "Pour la gloire !",
			"desc": "Crée une <skill>PowerZone</skill>.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 5,
				"baseDistance": 0
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "PrideInfused"
					}
				],
				"specialAnim": "Taunt",
				"flags": 16
			},
			"script": "function onSkill() {\n\tplay();\n\tskill.unit.cast(Skill.PowerZone, skill.unit, skill);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 19
			},
			"iconeDone": true,
			"group": 52,
			"done": 2
		},
		{
			"id": "PowerZone",
			"name": "Zone de Puissance",
			"desc": "Tant qu'un Champion est dans cette zone, il a [PrideInfused].",
			"mode": 5,
			"range": {
				"allowedTargets": 1,
				"radius": 3,
				"type": 0
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "PrideInfused"
					}
				]
			},
			"script": "function onSkill() {\n\tcreateAreaEffect(\"Immediate\");\n}\n\nfunction onZoneIn(a) {\n\tif( a.target.kind == UnitClass.Kogo || a.target.kind == UnitClass.Toro )\n\t\ta.target.addStatus(Status.PrideInfused);\n}\n\nfunction onZoneOut(a) {\n\ta.target.cancelStatus(Status.PrideInfused);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 10,
				"y": 19
			},
			"iconeDone": true,
			"group": 52,
			"done": 2
		},
		{
			"id": "KogoPassive",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 20
				}
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( a.unit == skill.unit && t.target.hasStatus(Status.KogoTarget) ) {\n\t\t\tt.baseDamageBonus += t.target.getStatusCount(Status.KogoTarget)*vars.value1;\n\t\t}\n\t}\n\tfor( t in a.getTargets() ) {\n\t\tif( t.target == skill.unit && a.unit.side != skill.unit.side && a.unit.hasStatus(Status.ToroTarget) ) {\n\t\t\tt.baseDamageBonus += a.unit.getStatusCount(Status.ToroTarget)*vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 52,
			"done": 2
		},
		{
			"id": "ToroPassive",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 20
				}
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( a.unit == skill.unit && t.target.hasStatus(Status.ToroTarget) ) {\n\t\t\tt.baseDamageBonus += t.target.getStatusCount(Status.ToroTarget)*vars.value1;\n\t\t}\n\t}\n\tfor( t in a.getTargets() ) {\n\t\tif( t.target == skill.unit && a.unit.side != skill.unit.side && a.unit.hasStatus(Status.KogoTarget) ) {\n\t\t\tt.baseDamageBonus += a.unit.getStatusCount(Status.KogoTarget)*vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 52,
			"done": 2
		},
		{
			"id": "KogoTargetPassive",
			"name": "Acharnement de Kogo",
			"desc": "Infliger des dégâts à une unité lui donne [KogoTarget].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "KogoTarget"
					}
				]
			},
			"script": "function onDamageDealt(s) {\n\ts.target.addStatus(Status.KogoTarget);\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 18,
				"y": 19
			},
			"group": 52,
			"done": 2
		},
		{
			"id": "ToroTargetPassive",
			"name": "Acharnement de Toro",
			"desc": "Infliger des dégâts à une unité lui donne [ToroTarget].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "ToroTarget"
					}
				]
			},
			"script": "function onDamageDealt(s) {\n\ts.target.addStatus(Status.ToroTarget);\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 17,
				"y": 19
			},
			"group": 52,
			"done": 2
		},
		{
			"id": "SoakedAxe",
			"name": "Hache imbibée",
			"desc": "Inflige [DMG] à la cible.\nSi la cible est affectée par [Burning], ce coup est critique.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Burning"
					}
				],
				"specialAnim": "AttackPower",
				"fxSuffix": 0
			},
			"script": "function onEval(a) {\n\tfor ( t in skill.getTargets() ) {\n\t\tif( t.target.hasStatus(Status.Burning) ) {\n\t\t\tt.criticalHitPercent = 100;\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 19
			},
			"minDmg": 7.5,
			"iconeDone": true,
			"group": 53,
			"done": 2,
			"maxDmg": 8.5
		},
		{
			"id": "IncendiaryFlaskThrowing",
			"name": "Jet de Fiole Incendiaire",
			"desc": "Inflige [DMG] à toutes les unités dans la zone puis crée un [Fire].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"baseDistance": 10,
				"allowedTargets": 4
			},
			"props": {
				"dmgAttribute": 0,
				"tooltipStatus": [
					{
						"st": "Fire"
					},
					{
						"st": "Burning"
					}
				],
				"damageType": [
					0
				],
				"specialAnim": "ThrowLeftGrenade",
				"flags": 68
			},
			"script": "function onZoneHit() {\n\tcreateSkillZone(Skill.FireZone);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 11,
				"y": 19
			},
			"minDmg": 5,
			"iconeDone": true,
			"group": 53,
			"done": 2
		},
		{
			"id": "FireResistant",
			"name": "Résistant au feu",
			"desc": "Immunisé aux dégâts de feu et à [Burning].",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 9,
				"y": 19
			},
			"iconeDone": true,
			"group": 53,
			"done": 2
		},
		{
			"id": "EquipedWithIncendiaryFlask",
			"name": "Equipé de fioles incendiaires",
			"desc": "Quand cette unité subit des dégâts, une Fiole Incendiaire explose aléatoirement autour d'elle.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onDamageTaken(a) {\n\tskill.unit.cast(Skill.EquipedWithIncendiaryFlaskZone, null, skill); // target : null => around caster if the skill is a zone with baseDistance\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 8,
				"y": 19
			},
			"iconeDone": true,
			"group": 53,
			"done": 2
		},
		{
			"id": "EquipedWithIncendiaryFlaskZone",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 4,
				"baseDistance": 5
			},
			"props": {},
			"script": "function onSkill() {\n\tcreateAreaEffect(\"Immediate\", 1, { skillId: Skill.FireZone });\n}",
			"notes": "",
			"iconeDone": true,
			"group": 53,
			"done": 2
		},
		{
			"id": "BeheditePenalty",
			"name": "Sanction de Behedite",
			"desc": "Inflige [DMG] à la cible.\n[DamageBonusPercent] augmentés de ::value2::% si aucun allié de la cible n'est présent dans un rayon de ::value1:: mètres.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"value1": 4,
					"value2": 100
				},
				"dmgAttribute": 1,
				"specialAnim": "AttackPower",
				"fxSuffix": 0,
				"isAttack": true,
				"defaultAction": true
			},
			"script": "function onEval(a) {\n\tvar alone = true;\n\tfor(u in getAllies(a.target)) {\n\t\tif( getDistance(u, skill.unit) <= vars.value1 ) {\n\t\t\talone = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(alone) {\n\t\ta.baseDamageBonus += vars.value2;\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 32,
				"x": 48,
				"y": 24,
				"width": 3,
				"height": 3
			},
			"minDmg": 5.5,
			"maxDmg": 7.5,
			"group": 54,
			"done": 2
		},
		{
			"id": "DaganPunishment",
			"name": "Punition de Dagan",
			"desc": "Inflige [DMG] dégâts à toutes les unités dans la zone.\nSi plus d'une unité subit des dégâts, attaque ::value1:: fois de plus.",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 3,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"vars": {
					"value1": 2
				},
				"dmgAttribute": 0,
				"specialAnim": "AttackWide",
				"fxSuffix": 0
			},
			"script": "function onEval(t) {\n\tif(skill.getTargets().length > 1 )\n\t\tt.attackCount += vars.value1;\n}",
			"notes": "",
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 15,
				"y": 8
			},
			"minDmg": 3.5,
			"group": 55,
			"done": 2
		},
		{
			"id": "GluckStiffingAttack",
			"name": "Attaque handicapante",
			"desc": "Inflige [DMG] à la cible et lui applique ::value1:: [Poison], ainsi que  [Slowdown] et [SlowReflexes] pendant ::value2:: rounds.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 1,
				"tooltipStatus": [
					{
						"st": "Poison"
					},
					{
						"st": "Slowdown"
					},
					{
						"st": "SlowReflexes"
					}
				],
				"feature": "Alazar1_Update",
				"vars": {
					"value1": 1,
					"value2": 1
				}
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Poison, vars.value1);\n\ta.target.addStatus(Status.Slowdown, vars.value2, true);\n\ta.target.addStatus(Status.SlowReflexes, vars.value2, true);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 56,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 6,
				"y": 11
			},
			"done": 2,
			"minDmg": 8,
			"maxDmg": 10
		},
		{
			"id": "GluckRenfort",
			"name": "Renforts",
			"desc": "Appelle des hors-la-loi en renforts.",
			"mode": 4,
			"range": {},
			"props": {
				"feature": "Alazar1_Update"
			},
			"script": "function onSkill() {\n\tplay();\n\tvar tab = [UnitClass.Mobster, UnitClass.Poacher, UnitClass.Marauder, UnitClass.MischiefMaker];\n\tfor(u in getAllies(skill.unit)) {\n\t\ttab.remove(u.kind);\n\t}\n\tfor(t in tab)\n\t\tspawnRenfort(t, 1, false);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 56,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 13,
				"y": 17
			},
			"done": 2
		},
		{
			"id": "GluckTraitorSwap",
			"name": "Interversion traître",
			"desc": "Chaque fois que cette unité inflige des dégâts en étant engagée, elle échange de place avec un allié non-engagé à moins de ::value1:: mètres. L’allié s’engage et subit une attaque d’opportunité. Si aucun allié n'est à portée, échange de place avec l'ennemi engagé.",
			"mode": 2,
			"range": {
				"allowedTargets": 1,
				"radius": 15
			},
			"props": {
				"targetAlly": true,
				"vars": {
					"value1": 15
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onDamageDealt(a) {\n\tif(!a.unit.isEngaged())\n\t\treturn;\n\n\tvar engagedUnit = a.unit.engagedUnit;\n\n\tvar tab = [];\n\tfor(u in getAllies(skill.unit)) {\n\t\tif( getDistance(u, skill.unit) <= vars.value1 && !u.isEngaged() && !u.isAnimal && u.canMove() ) {\n\t\t\ttab.push(u);\n\t\t}\n\t}\n\tif(tab.length > 0) {\n\t\tvar target = tab[randInt(0, tab.length-1)];\n\n\t\ta.unit.swapPositionWith(target, 0.2);\n\n\t\ttarget.engage(engagedUnit);\n\t\tif( target != skill.unit ) {\n\t\t\tengagedUnit.opportunityAttack(target, skill);\n\t\t}\n\t}\n\telse {\n\t\ta.unit.swapPositionWith(engagedUnit, 0.2);\n\t\ta.unit.engage(engagedUnit);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 56,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 15,
				"y": 17
			},
			"done": 2
		},
		{
			"id": "GluckUnlimitedDodge",
			"name": "Intouchable",
			"desc": "Cette unité a [Dodge] en permanence à moins d'être adjacent à au moins ::value1:: unités ennemies.",
			"mode": 2,
			"range": {},
			"props": {
				"feature": "Alazar1_Update",
				"globalEvents": true,
				"vars": {
					"nbAdjacent": 0,
					"value1": 3
				},
				"tooltipStatus": [
					{
						"st": "Dodge"
					}
				]
			},
			"script": "function onBeginAction() {\n\tfor( u in getFoes(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) ) {\n\t\t\tvars.nbAdjacent++;\n\t\t}\n\t}\n\tif(vars.nbAdjacent < vars.value1) {\n\t\tskill.unit.addStatus(Status.Dodge);\n\t}\n\telse {\n\t\tskill.unit.cancelStatus(Status.Dodge);\n\t}\n\tvars.nbAdjacent = 0;\n}",
			"notes": "",
			"iconeDone": true,
			"group": 56,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 19
			},
			"done": 2
		},
		{
			"id": "CrawlerChaosClaws",
			"name": "Griffes du chaos",
			"desc": "Inflige [DMG] à toutes les unités dans la zone et leur applique [Bleeding].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 5,
				"baseDistance": 0
			},
			"props": {
				"dmgAttribute": 0,
				"specialAnim": "Spin",
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"feature": "Alazar1_Update",
				"useWithoutWeapon": true
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Bleeding);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 57,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 18
			},
			"minDmg": 6,
			"done": 2
		},
		{
			"id": "CrawlerSerratedTalons",
			"name": "Serres dentelées",
			"desc": "Inflige [DMG] à toutes les unités dans la zone, les attire en mêlée et leur applique [Immobilisation] pendant ::value2:: rounds..",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 5,
				"allowedTargets": 0,
				"baseDistance": 0
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "Immobile"
					}
				],
				"dmgAttribute": 0,
				"vars": {
					"value1": 3,
					"value2": 1
				},
				"specialAnim": "Spin",
				"feature": "Alazar1_Update",
				"useWithoutWeapon": true
			},
			"script": "function onHit(a) {\n\ta.target.pushback({ unit : skill.unit },-vars.value1);\n\ta.target.addStatus(Status.Immobile, 1, true);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 57,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 17,
				"y": 18
			},
			"minDmg": 3,
			"done": 2
		},
		{
			"id": "CrawlerMassiveAttack",
			"name": "Attaque Massive",
			"desc": "Si l’unité subit une attaque en étant [Surrounded], elle riposte en infligeant [DMG] à toutes les unités adjacentes et les repousse de ::value1:: mètres.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Surrounded"
					}
				],
				"feature": "Alazar1_Update",
				"vars": {
					"value1": 3
				},
				"dmgAttribute": 0
			},
			"script": "function onDamageTaken(s) {\n\tif(skill.unit.hasStatus(Status.Surrounded)) {\n\t\tskill.unit.cast(Skill.CrawlerMassiveAttackEffect, s.unit, skill);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 57,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 17
			},
			"minDmg": 3,
			"done": 2
		},
		{
			"id": "CrawlerMassiveAttackEffect",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 0,
				"baseDistance": 0
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 3
				},
				"specialAnim": "AttackSpin",
				"feature": "Alazar1_Update"
			},
			"script": "function onHit( a ) {\n\ta.target.pushback({ unit : skill.unit }, vars.value1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 57,
			"minDmg": 3,
			"done": 2
		},
		{
			"id": "CrawlerSurvival",
			"name": "Survivre",
			"desc": "Si un allié est à portée, aspire l'intégralité de sa [Health] pour se soigner.\nSinon, appelle ::value1:: Rampants en renfort.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 5,
				"baseDistance": 0
			},
			"props": {
				"vars": {
					"value1": 2
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onSkill() {\n\tplay();\n\tvar tab = skill.getTargets();\n\tif(tab.length > 0) {\n\t\tvar target = tab[randInt(0, tab.length-1)];\n\t\tskill.unit.gainsHealth(target.damagedHealth);\n\t}\n\telse {\n\t\tspawnRenfort(UnitClass.Crawler, vars.value1, false);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 57,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 15,
				"y": 18
			},
			"done": 2
		},
		{
			"id": "TacticalSlam",
			"name": "Heurtoir tactique",
			"desc": "Inflige [DMG] à la cible. Les dégâts sont augmentés de ::value1::% pour chaque Bonus et Malus appliqués sur la cible et sur cette unité.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 15
				},
				"feature": "Alazar1_Update",
				"specialAnim": "AttackShield",
				"apCost": 1
			},
			"script": "function onEval(a) {\n\tvar nb = 0;\n\tfor( st in skill.unit.getAllStatus() ) {\n\t\tif( st.isBonus || st.isMalus ) {\n\t\t\tnb++;\n\t\t}\n\t}\n\tfor( st in a.target.getAllStatus() ) {\n\t\tif( st.isBonus || st.isMalus ) {\n\t\t\tnb++;\n\t\t}\n\t}\n\ta.baseDamageBonus += vars.value1*nb;\n}",
			"notes": "",
			"iconeDone": true,
			"group": 58,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 19
			},
			"minDmg": 3,
			"maxDmg": 4,
			"done": 2
		},
		{
			"id": "Duel",
			"name": "Duel",
			"desc": "Inflige [DMG] et applique à la cible un malus aléatoire déjà appliqué sur cette unité puis gagne un bonus aléatoire déjà appliqué sur la cible.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"isAttack": false,
				"feature": "Alazar1_Update"
			},
			"script": "function onDamage(a) {\n\tvar malus = [];\n\tvar bonus = [];\n\tfor(st in skill.unit.getAllStatus())\n\t\tif(st.isMalus && !a.target.hasStatus(st.kind))\n\t\t\tmalus.push(st);\n\tfor(st in a.target.getAllStatus())\n\t\tif(st.isBonus && !skill.unit.hasStatus(st.kind))\n\t\t\tbonus.push(st);\n\tif (malus.length > 0)\n\t\ta.target.addStatus(malus[randInt(0, malus.length - 1)].kind);\n\tif (bonus.length > 0)\n\t\tskill.unit.addStatus(bonus[randInt(0, bonus.length - 1)].kind);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 58,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 13,
				"y": 19
			},
			"minDmg": 8,
			"maxDmg": 10,
			"done": 2
		},
		{
			"id": "StanceDancing",
			"name": "Danse de postures",
			"desc": "Chaque fois que cette unité subit des dégâts, elle gagne ::value1:: [DefensiveStance] ou [BerserkerStance].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1,
					"value2": 10,
					"check": false
				},
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "DefensiveStance"
					},
					{
						"st": "BerserkerStance"
					}
				]
			},
			"script": "function onBeginRound() {\n\tif( !vars.check ) {\n\t\tskill.unit.addStatus(Status.DefensiveStance);\n\t\tvars.check = true;\n\t}\n}\n\nfunction onDamageTaken(a) {\n\tvar def = skill.unit.getStatusCount(Status.DefensiveStance);\n\tvar bers = skill.unit.getStatusCount(Status.BerserkerStance);\n\tif( (def > 0 && def < vars.value2 - 1) || bers == vars.value2 - 1 ) {\n\t\tskill.unit.addStatus(Status.DefensiveStance);\n\t\tskill.unit.cancelStatus(Status.BerserkerStance);\n\t}\n\tif( (bers > 0 && bers < vars.value2 - 1 ) || def == vars.value2 - 1 ) {\n\t\tskill.unit.addStatus(Status.BerserkerStance);\n\t\tskill.unit.cancelStatus(Status.DefensiveStance);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 58,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 14,
				"y": 19
			},
			"done": 2
		},
		{
			"id": "CombatFlow",
			"name": "Flux du combat",
			"desc": "Quand cette unité termine son tour, elle gagne un bonus aléatoire pendant ::value1:: round. Si elle est engagée, son adversaire engagé gagne un malus aléatoire pendant ::value1:: round.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onEndRound() {\n\tvar bonus = [Status.Fury, Status.Brutality, Status.Protection, Status.Inspiration, Status.Deflection, Status.Riposte, Status.Berserk, Status.Relentlessness];\n\tbonus = bonus.filter( function(s) { return !skill.unit.statusResist(s) && !skill.unit.hasStatus(s); } );\n\tif( bonus.length > 0 ) {\n\t\tskill.unit.addStatus(bonus[randInt(0, bonus.length-1)], vars.value1, true);\n\t}\n\tif( skill.unit.isEngaged() ) {\n\t\tvar u = skill.unit.engagedUnit;\n\t\tvar malus = [Status.Weakening, Status.Fragility, Status.Destabilization, Status.Vulnerability, Status.Disarm, Status.SlowReflexes, Status.NoReflexes];\n\t\tmalus = malus.filter( function(s) { return !u.statusResist(s) && !u.hasStatus(s); } );\n\t\tif( malus.length > 0 ) {\n\t\t\tu.addStatus(malus[randInt(0, malus.length-1)], vars.value1, true);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 58,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 15,
				"y": 19
			},
			"done": 2
		},
		{
			"id": "ImpalingStrike",
			"name": "Frappe écrasante",
			"desc": "Inflige [DMG] à la cible. Ignore la [Guard] dans [A1ArenaRedGazZone] et repousse de ::value1:: mètres dans [A1ArenaBlueGazZone].",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"defaultAction": true,
				"feature": "Alazar1_Update",
				"vars": {
					"value1": 2
				},
				"tooltipStatus": [
					{
						"st": "A1ArenaRedGazZone"
					},
					{
						"st": "A1ArenaBlueGazZone"
					}
				]
			},
			"script": "function onEval(a){\n\ta.forceIgnoreGuard = skill.unit.hasStatus(Status.A1ArenaRedGazZone);\n}\n\nfunction onHit(a){\n\tif (skill.unit.hasStatus(Status.A1ArenaBlueGazZone))\n\t\ta.target.pushback({ unit : skill.unit }, vars.value1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 59,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 16,
				"y": 19
			},
			"minDmg": 8,
			"maxDmg": 10,
			"done": 2
		},
		{
			"id": "ThrowingAlazarianAxes",
			"name": "Lancer de hache alazarienne",
			"desc": "Après avoir utilisé une compétence, cette unité inflige [DMG] à l’ennemi le plus éloigné dans un rayon de ::value1:: mètres, même si elle est engagée.",
			"mode": 2,
			"range": {
				"baseDistance": 6
			},
			"props": {
				"dmgAttribute": 2,
				"vars": {
					"value1": 6
				},
				"flags": 64,
				"preventEngage": true,
				"specialAnim": "ThrowLeft",
				"feature": "Alazar1_Update"
			},
			"script": "function onSkillPlayed(s) {\n\tvar dTmp = -1.;\n\tvar foeTmp = null;\n\tif(s.kind == Skill.KnockOut)\n\t\treturn;\n\tfor( u in getFoes(skill.unit) ) {\n\t\tvar d = getDistance(skill.unit, u);\n\t\tif(d > dTmp && d < vars.value1) {\n\t\t\tdTmp = d;\n\t\t\tfoeTmp = u;\n\t\t}\n\t}\n\tif (foeTmp != null) {\n\t\tspawnFx();\n\t\tattackTarget(foeTmp);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 59,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 17,
				"y": 19
			},
			"minDmg": 2,
			"done": 2
		},
		{
			"id": "EuphoricAddiction",
			"name": "Addiction euphorique",
			"desc": "Si cette unité termine son tour dans la même zone que ses vapeurs actuelles, elle gagne ::value1:: [Euphoria].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "Euphoria"
					}
				]
			},
			"script": "function onEndRound() {\n\tif( skill.unit.hasStatus(Status.A1ArenaBlueGaz) && skill.unit.hasStatus(Status.A1ArenaBlueGazZone) ) {\n\t\tskill.unit.addStatus(Status.Euphoria, vars.value1);\n\t}\n\tif( skill.unit.hasStatus(Status.A1ArenaRedGaz) && skill.unit.hasStatus(Status.A1ArenaRedGazZone) ) {\n\t\tskill.unit.addStatus(Status.Euphoria, vars.value1);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 59,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 19
			},
			"done": 2
		},
		{
			"id": "UnbreakableBond1",
			"name": "Lien indéfectible",
			"desc": "Si Nairolf meurt, cette unité gagne [Berserk].",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "Berserk"
					}
				]
			},
			"script": "function onDeath(a) {\n\tif( a.target.kind == UnitClass.Nairolf ) {\n\t\tskill.unit.addStatus(Status.Berserk);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 60,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 19
			},
			"done": 2
		},
		{
			"id": "UnbreakableBond2",
			"name": "Lien indéfectible",
			"desc": "Si Ecila meurt, cette unité gagne [Berserk].",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "Berserk"
					}
				]
			},
			"script": "function onDeath(a) {\n\tif( a.target.kind == UnitClass.Ecila ) {\n\t\tskill.unit.addStatus(Status.Berserk);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 60,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 3,
				"y": 19
			},
			"done": 2
		},
		{
			"id": "ThrillOfTheTrack",
			"name": "Frisson de la traque",
			"desc": "Tant que les unités du joueur n'ont pas d'allié à moins de ::value1:: mètres, gagne [Inspiration] et [Brutality].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 4
				},
				"tooltipStatus": [
					{
						"st": "Inspiration"
					},
					{
						"st": "Brutality"
					}
				],
				"globalEvents": true,
				"feature": "Alazar1_Update"
			},
			"script": "function onBeginAction() {\n\tvar foes = getFoes(skill.unit);\n\tvar valid = true;\n\tif( isFoe(skill.unit) ) {\n\t\tfor( u1 in foes ) {\n\t\t\tfor( u2 in foes ) {\n\t\t\t\tif( u1 != u2 ) {\n\t\t\t\t\tif( getDistance(u1, u2) < vars.value1 ) {\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( !valid )\n\t\t\t\tbreak;\n\t\t}\n\t\tif( valid ) {\n\t\t\tskill.unit.addStatusPersist(Status.Inspiration, skill);\n\t\t\tskill.unit.addStatusPersist(Status.Brutality, skill);\n\t\t} else {\n\t\t\tskill.unit.cancelStatus(Status.Inspiration, skill);\n\t\t\tskill.unit.cancelStatus(Status.Brutality, skill);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 60,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 19,
				"y": 1
			},
			"done": 2
		},
		{
			"id": "EcilaWrath",
			"name": "Colère d'Ecila",
			"desc": "Inflige [DMG] à toutes les unités dans la zone et les repousse de ::value1:: mètres.\nLes dégâts sont augmentés de ::value2::% par animal allié tué ce combat.",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 2,
				"angle": 160,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 2,
					"value2": 20
				},
				"defaultAction": true,
				"feature": "Alazar1_Update"
			},
			"script": "function onHit(a) {\n\ta.target.pushback({ unit : skill.unit }, vars.value1);\n}\n\nfunction onEval(s){\n\tvar nbAnimal = 0;\n\tfor( u in getAllUnits() ) {\n\t\tif( u.isAnimal && !u.isAlive() )\n\t\t\tnbAnimal++;\n\t}\n\ts.baseDamageBonus += vars.value2 * nbAnimal;\n}",
			"notes": "",
			"iconeDone": true,
			"group": 60,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 5,
				"y": 19
			},
			"minDmg": 8,
			"done": 2
		},
		{
			"id": "PheromoneShooting",
			"name": "Tir de phéromones",
			"desc": "Inflige [DMG] à la cible et lui applique [Chased] pendant ::value1:: round.",
			"mode": 1,
			"range": {
				"minDistance": 1,
				"baseDistance": 9
			},
			"props": {
				"dmgAttribute": 1,
				"tooltipStatus": [
					{
						"st": "Chased"
					}
				],
				"isHeroic": true,
				"apCost": 1,
				"vars": {
					"value1": 1
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onDamage(a) {\n\ta.target.addStatus(Status.Chased, vars.value1, true);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 60,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 19
			},
			"minDmg": 6,
			"maxDmg": 10,
			"done": 2
		},
		{
			"id": "BestialShooting",
			"name": "Tir bestial",
			"desc": "Inflige [DMG] à la cible et tous les animaux adjacents à la cible effectuent une attaque d'opportunité sur la cible.",
			"mode": 1,
			"range": {
				"baseDistance": 9
			},
			"props": {
				"dmgAttribute": 1,
				"tooltipStatus": [],
				"isHeroic": true,
				"vars": {
					"value1": 2,
					"value2": 1
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onDamage(a) {\n\tfor(u in getAllies(skill.unit) ) {\n\t\tif( u.isAnimal && u.isMelee(a.target) ) {\n\t\t\tu.opportunityAttack(a.target, skill);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 60,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 19
			},
			"minDmg": 4,
			"maxDmg": 8,
			"done": 2
		},
		{
			"id": "Savagery",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onEndTurn() {\n\tif ( skill.unit.isEngaged() ) {\n\t\tskill.unit.addStatus(Status.Riposte);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 61,
			"done": 2
		},
		{
			"id": "Relentlessness",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"hasStatus": false
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onBeginAction() {\n\tif( skill.unit.hasStatus(Status.Relentlessness) ) {\n\t\tvars.hasStatus = true;\n\t} else vars.hasStatus = false;\n\tif ( !skill.unit.isEngaged() ) {\n\t\tskill.unit.cancelStatus(Status.Relentlessness);\n\t}\n}\n\nfunction onSkillPlayed(s) {\n\tif( s.unit == skill.unit ) {\n\t\tif ( s.kind == Skill.OpportunityAttack ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( skill.unit.isEngaged() && vars.hasStatus ) {\n\t\t\tskill.unit.opportunityAttack(skill.unit.engagedUnit, skill);\n\t\t}\n\t\tif ( !skill.unit.isEngaged() ) {\n\t\t\tskill.unit.cancelStatus(Status.Relentlessness);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 61,
			"done": 2
		},
		{
			"id": "AnimalMarked",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onDamageTaken(a) {\n\tif ( a.unit.isAnimal ) {\n\t\ta.unit.addStatus(Status.AnimalMarkedBonus, 1);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 61,
			"done": 2
		},
		{
			"id": "Rivalry",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"vars": {
					"value1": 50
				}
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( t.target == skill.unit && t.unit.engagedUnit == skill.unit ) {\n\t\t\tt.baseDamageBonus -= vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 61,
			"done": 2
		},
		{
			"id": "LatentTerror",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"proba": 1
				}
			},
			"script": "function onDamageTaken(a) {\n\tif (skill.unit.isAlive() && !a.kills && proba(vars.proba)) {\n\t\tskill.unit.cancelStatus(Status.LatentTerror);\n\t\tterrorize();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 61,
			"done": 2
		},
		{
			"id": "Electrified",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true
			},
			"script": "function onSkillEval(a) {\n\tif( a.kind == Skill.Lightning || a.kind == Skill.SportLightning ||\n\t\ta.kind == Skill.CelestiumLightningStatusZone || a.kind == Skill.CelestiumLightning ) {\n\n\t\tfor( t in a.getTargets() ) {\n\t\t\tif( t.target == skill.unit ) {\n\t\t\t\tt.dmg = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction onSkillPlayed( a ) {\n\tif( a.unit.isMelee(skill.unit) ) {\n\t\tcast(Skill.ElectrifiedSkill, { unit : a.unit }, a);\n\t}\n}\n\nfunction onEndTurn() {\n\t// if( a)\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 61
		},
		{
			"id": "ElectrifiedSkill",
			"name": "",
			"desc": "",
			"mode": 0,
			"range": {
				"allowedTargets": 5
			},
			"props": {
				"flags": 2,
				"vars": {
					"value1": 20,
					"value2": 5
				},
				"castFx": "prefabs/fx/fight/status/Electrified.fx"
			},
			"script": "function onEval(a) {\n\tvar value = a.target.hasStatus(Status.Champion) ? vars.value2 : vars.value1;\n\ta.dmg = floor(a.target.health * value / 100);\n}",
			"notes": "",
			"done": 2,
			"iconeDone": true,
			"group": 61,
			"minDmg": 1
		},
		{
			"id": "Chased",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 30
				},
				"globalEvents": true
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( t.target == skill.unit ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 61
		},
		{
			"id": "Condemn",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 2
				}
			},
			"script": "function onDeath(a) {\n\tif( a.target == skill.unit ) {\n\t\tskill.unit.gainsActionPoint(vars.value1);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 61,
			"done": 2
		},
		{
			"id": "Corrosion",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 15
				}
			},
			"script": "function onEndTurn() {\n\tif( skill.unit.isLastTurnThisRound() ) {\n\t\tvar nbStacks = skill.unit.getStatusCount(Status.Corrosion);\n\t\tvar value = floor((vars.value1 * nbStacks) / 100 * skill.unit.stats.armor);\n\t\tif( skill.unit.hasStatus(Status.Champion) ) {\n\t\t\tvalue = floor(value*0.25);\n\t\t}\n\t\telse skill.unit.damages(skill, value, false);\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 61
		},
		{
			"id": "FrenzyStatus",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true
			},
			"script": "function onSkillEval(a) {\n\tif( a.unit == skill.unit ) {\n\t\tfor( t in a.getTargets() ) {\n\t\t\tvar p = round(100 * (1-(skill.unit.health / skill.unit.stats.health)));\n\t\t\tt.baseDamageBonus += p;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 61,
			"done": 2
		},
		{
			"id": "CelestiumLightningStatus",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onEndTurn() {\n\tskill.unit.consumeStatus(Status.CelestiumLightning);\n\tcast(Skill.CelestiumLightningStatusZone, { unit : skill.unit }, skill);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 61,
			"done": 2
		},
		{
			"id": "CelestiumLightningStatusZone",
			"name": "Châtiment de l'Œil",
			"desc": "À la fin du tour, toutes les unités à moins de ::value2:: mètres perdront ::value1::% de leur [Health].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 4
			},
			"props": {
				"castFx": "prefabs/fx/environment/lightning/CelestiumBattleLightning.fx",
				"vars": {
					"value1": 10,
					"value2": 2
				},
				"flags": 2
			},
			"script": "function onEval(a) {\n\ta.dmg = floor(a.target.stats.health * vars.value1 / 100);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 61,
			"done": 2
		},
		{
			"id": "Tear",
			"name": "Déchirure",
			"desc": "Cette unité ne peut plus infliger de coup critique.",
			"mode": 2,
			"range": {},
			"props": {
				"isInjury": true
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tt.criticalHitPercent = 0;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 3,
				"y": 1
			},
			"iconeDone": true,
			"group": 62,
			"done": 2
		},
		{
			"id": "OilStrengthProcWeak",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances d'augmenter la [Strength] pendant ::value2:: rounds.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 30,
					"value2": 2
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.OilStrengthProc1);\n\t}\n}",
			"notes": "",
			"done": 2,
			"iconeDone": true,
			"group": 64
		},
		{
			"id": "OilDexterityProcWeak",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances d'augmenter la [Dexterity] pendant ::value2:: rounds.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 30,
					"value2": 2
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.OilDexterityProc1, vars.value2, true);\n\t}\n}",
			"notes": "",
			"done": 2,
			"iconeDone": true,
			"group": 64
		},
		{
			"id": "OilDamageTakenProcWeak",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances de réduire les [DamageTakenPercent] pendant ::value2:: rounds.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 30,
					"value2": 2
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.OilDamageTakenProc1, vars.value2, true);\n\t}\n}",
			"notes": "",
			"done": 2,
			"iconeDone": true,
			"group": 64
		},
		{
			"id": "OilProcPoison1",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances d'appliquer ::value2:: [Poison].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50,
					"value2": 1
				},
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\ta.target.addStatus(Status.Poison, vars.value2);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilProcBurning1",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances d'appliquer [Burning].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"tooltipStatus": [
					{
						"st": "Burning"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\ta.target.addStatus(Status.Burning);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilProcBleeding1",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances d'appliquer [Bleeding].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilProcTrueDmg1",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances d'infliger à sa [Health] ::value2::% de la [Health] maximum de la cible.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50,
					"value2": 5
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\ta.target.damages(skill, a.target.getPercentHealth(vars.value2), true);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilStrengthProc1",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances d'augmenter la [Strength] pendant ::value2:: rounds.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50,
					"value2": 3
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.OilStrengthProc1);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilDexterityProc1",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances d'augmenter la [Dexterity] pendant ::value2:: rounds.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50,
					"value2": 3
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.OilDexterityProc1, vars.value2, true);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilDamageTakenProc1",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances de réduire les [DamageTakenPercent] pendant ::value2:: rounds.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50,
					"value2": 3
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.OilDamageTakenProc1, vars.value2, true);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilIgnoreGuard1",
			"name": "",
			"desc": "Les attaques effectuées ignorent ::value1::% de la [Guard] de la cible.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"attributes": [
					{
						"kind": "IgnoreGuard",
						"value": 50
					}
				]
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilSlowProc1",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances d'appliquer [Slowdown] pendant ::value2:: round.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50,
					"value2": 1
				},
				"tooltipStatus": [
					{
						"st": "Slowdown"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\ta.target.addStatus(Status.Slowdown, vars.value2, true);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilAnimalsDmg1",
			"name": "",
			"desc": "[DamageBonusPercent] infligés aux animaux augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 25
				}
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( t.target.isAnimal ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilSelfheal1",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances de rendre de la [Health] égale à ::value2::% des dégâts infligés.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50,
					"value2": 20
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\tskill.unit.gainsHealth(ceil(a.dmg*vars.value2/100));\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilPlagueDmg1",
			"name": "",
			"desc": "[DamageBonusPercent] infligés aux unités pestiférées augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 25
				}
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( t.target.isAnimal ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilDotEffect1",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances d'appliquer un statut infligeant des dégâts égaux à ::value2::% de l'attaque.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50,
					"value2": 50
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\ta.target.addStatus(Status.OilDotEffect1, ceil(a.dmg*vars.value2/100));\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilCleave1",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances d'infliger également ::value2::% de ses dégâts aux ennemis adjacents à la cible.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50,
					"value2": 50
				}
			},
			"script": "function onDamageDealt(a) {\n\tif( checkOilProc(vars.value1) ) {\n\t\tspawnFx();\n\t\tfor( u in getFoes(skill.unit) ) {\n\t\t\tif( u.isMelee(a.target) ) {\n\t\t\t\tu.damages(skill, ceil(a.dmg*vars.value2/100));\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilWindfury1",
			"name": "",
			"desc": "Après avoir attaqué un ennemi en mêlée, a ::value1::% de chances d'enchaîner sur une attaque d'opportunité.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 75
				},
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onSkillPlayed(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( t.target.isAlive() && t.dmg > 0 && t.target.side != skill.unit.side && t.target.isMelee(skill.unit) && checkOilProc(vars.value1) ) {\n\t\t\tspawnFx();\n\t\t\tskill.unit.opportunityAttack(t.target, skill);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilHemorraghe1",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts à un ennemi qui saigne, a ::value1::% de chances de déclencher des dégâts de [Bleeding].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 25
				},
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tif ( a.target.hasStatus(Status.Bleeding) && checkOilProc(vars.value1) ) {\n\t\ta.target.applyDot(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilSticky1",
			"name": "",
			"desc": "Le compagnon commence le combat avec [Deflection].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Deflection"
					}
				]
			},
			"script": "function onBeginBattle() {\n\tskill.unit.addStatus(Status.Deflection, 1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilProtection1",
			"name": "",
			"desc": "Le porteur ne peut subir aucun dégât direct de la part de ses alliés.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( skill.unit == t.target && skill.unit.side == s.unit.side ) {\n\t\t\tt.baseDamageBonus = -100;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilPlague1",
			"name": "",
			"desc": "Empêche le porteur d'être affecté par la Peste. Bloque le stade de contamination tant qu'il porte la ceinture.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilProcSolid",
			"name": "",
			"desc": "Tant que l'unité a de l'armure, elle a ::value1::% de chance de doubler sa garde.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"globalEvents": true
			},
			"script": "function onBeforeHit(t){\n\tif (skill.unit == t.target && skill.unit.armor > 0 && proba(vars.value1)){\n\t\tt.bonusGuard = t.guard;\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 1
		},
		{
			"id": "OilSwipping",
			"name": "",
			"desc": "L'unité a ::value1::% de chances de ne pas être affectée par [Poison], [Burning] ou [Bleeding].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Poison"
					},
					{
						"st": "Burning"
					},
					{
						"st": "Bleeding"
					}
				],
				"vars": {
					"value1": 50
				}
			},
			"script": "function onStatus(a) {\n\tif( a.kind == Status.Poison || a.kind == Status.Bleeding || a.kind == Status.Burning ) {\n\t\tif( proba(vars.value1) ) {\n\t\t\tspawnFx();\n\t\t\ta.cancel();\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 1
		},
		{
			"id": "OilProcFever",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégâts, a ::value1::% de chances d'appliquer [Fever].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fever"
					}
				],
				"vars": {
					"value1": 50
				}
			},
			"script": "function onDamageDealt(a) {\n\tif ( a.target.hasStatus(Status.Bleeding) && checkOilProc(vars.value1) ) {\n\t\ta.target.addStatus(Status.Fever);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "OilBrave",
			"name": "",
			"desc": "Quand l'unité utilise une compétence demandant de la Bravoure, a ::value1::% de chances de regagner <apt>::value2::</apt>.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50,
					"value2": 1
				}
			},
			"script": "function onSkillPlayed( a ) {\n\tif( a.apCost > 0 && proba(vars.value1) ) {\n\t\tskill.unit.gainsActionPoint(vars.value2);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 1
		},
		{
			"id": "OilProcSlowReflexes",
			"name": "",
			"desc": "Chaque fois qu'une compétence inflige des dégats, a ::value::% de chances d'appliquer [NoReflexes].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "NoReflexes"
					}
				],
				"vars": {
					"value1": 50
				}
			},
			"script": "function onDamageDealt(a) {\n\tif ( a.target.hasStatus(Status.Bleeding) && checkOilProc(vars.value1) ) {\n\t\ta.target.addStatus(Status.NoReflexes);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 64,
			"done": 2
		},
		{
			"id": "BeltAccPoisonExtra",
			"name": "Flacon de poison",
			"desc": "Après avoir utilisé une compétence, cette unité a ::value1::% de chances d'appliquer ::value2:: [Poison]s aux cibles touchées.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 30,
					"value2": 1
				},
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				]
			},
			"script": "function onSkillPlayed(s) {\n\tif( proba(vars.value1) ) {\n\t\tfor( t in s.getTargets() ) {\n\t\t\tif( t.target.side != skill.unit.side )\n\t\t\t\tt.target.addStatus(Status.Poison, vars.value2);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccNoMovePenalty",
			"name": "Aisance",
			"desc": "Annule le malus de mouvement provenant des armures.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccLightArmorCrit",
			"name": "Percée",
			"desc": "[CriticalHit] contre les cibles qui portent une armure légère augmenté de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				}
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( t.target.hasLightArmor() ) {\n\t\t\tt.criticalHitPercent += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccPoisonDmgBonus",
			"name": "Baume infectieux",
			"desc": "[DamageBonusPercent] infligés aux ennemis empoisonnés augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 5
				}
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( t.target.hasStatus(Status.Poison) ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilProcPoison",
			"name": "Concentré d'huile empoisonnée",
			"desc": "L'Huile empoisonnée a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccPoisonResist",
			"name": "Antidote",
			"desc": "Cette unité résiste aux applications de [Poison].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				]
			},
			"script": "function onStatus(s) {\n\tif( s.kind == Status.Poison ) {\n\t\tspawnFx();\n\t\ts.cancel();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccBleedingCrit",
			"name": "Croc acéré",
			"desc": "[CriticalHit] contre les cibles qui saignent augmenté de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				}
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( t.target.hasStatus(Status.Bleeding) ) {\n\t\t\tt.criticalHitPercent += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilProcBleeding",
			"name": "Concentré d'huile d'aiguisage",
			"desc": "L'Huile d'aiguisage a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccBleedingResist",
			"name": "Cataplasme",
			"desc": "Cette unité résiste aux applications de [Bleeding].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				]
			},
			"script": "function onStatus(s) {\n\tif( s.kind == Status.Bleeding ) {\n\t\tspawnFx();\n\t\ts.cancel();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilProcBurning",
			"name": "Concentré d'huile acide",
			"desc": "L'Huile acide a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccHumanTorch",
			"name": "Onguent ignifugé ",
			"desc": "Cette unité ne subit plus les dégâts de [Burning] mais le statut n'est pas retiré suite à un déplacement spécial.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Burning"
					}
				]
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccBurningResist",
			"name": "Onguent anti-brûlure",
			"desc": "Cette unité résiste aux applications de [Burning].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Burning"
					}
				]
			},
			"script": "function onStatus(s) {\n\tif( s.kind == Status.Burning ) {\n\t\tspawnFx();\n\t\ts.cancel();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccRangeDmg",
			"name": "Projectiles de qualité",
			"desc": "[DamageBonusPercent] des attaques de Tir augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				}
			},
			"script": "function onSkillEval(s) {\n\tif ( s.isPrecisionSkill() ) {\n\t\tfor( t in s.getTargets() ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccBackstabCritBonus",
			"name": "Pierre à aiguiser",
			"desc": "[CritHitPercent] augmenté de ::value1::% lors d'une attaque dans le dos.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				}
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( t.backstab ) {\n\t\t\tt.criticalHitPercent += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccBackstabDmg",
			"name": "Coffin",
			"desc": "[DamageBonusPercent] des attaques dans le dos augmentés de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 5
				}
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( t.backstab ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccAutoHeal",
			"name": "Chique",
			"desc": "À la fin de son tour, cette unité régénère ::value1::% de sa [Health] maximum.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "function onEndTurn() {\n\tskill.unit.gainsHealth(ceil(skill.unit.stats.health*vars.value1/100));\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "TargetHeal",
			"name": "Distance Heal",
			"desc": "Applique ::value1:: [Poison]s à toutes les unités dans la zone.",
			"mode": 0,
			"range": {
				"allowedTargets": 1,
				"baseDistance": 8
			},
			"props": {
				"apCost": 1,
				"vars": {
					"value1": 50
				},
				"needDisengaged": true,
				"cursor": "CursorHeal",
				"healPreview": 1,
				"useWithoutWeapon": true,
				"flags": 64
			},
			"script": "function onSkill() {\n\tplay();\n\tskill.target.gainsHealth( ceil(skill.target.stats.health*skill.unit.stats.willpower/50) , null);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 12
			},
			"iconeDone": true,
			"group": 2,
			"done": 2
		},
		{
			"id": "RangeHeal",
			"name": "Healing Bomb",
			"desc": "Applique ::value1:: [Poison]s à toutes les unités dans la zone.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 4,
				"baseDistance": 6
			},
			"props": {
				"specialAnim": "ThrowLeftGrenade",
				"apCost": 1,
				"vars": {
					"value1": 25
				},
				"needDisengaged": true,
				"cursor": "CursorHeal",
				"healPreview": 1,
				"useWithoutWeapon": true,
				"castFx": "prefabs/fx/fight/Explosion/PoisonBomb/PoisonBomb.fx",
				"flags": 64,
				"throwModel": "chars/Weapons/LeftHand_IncendiaryFlask.fbx"
			},
			"script": "function onSkill() {\n\tplayAttack();\n\tfor( t in skill.getTargets() ) {\n\t\tif( t.target.side == skill.unit.side ) {\n\t\t\tt.target.gainsHealth(ceil(t.target.stats.health*vars.value1/100));\n\t\t\tspawnFx();\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 9,
				"y": 13
			},
			"iconeDone": true,
			"group": 2,
			"done": 2
		},
		{
			"id": "GroupHeal",
			"name": "Group Heal",
			"desc": "Applique ::value1:: [Poison]s à toutes les unités dans la zone.",
			"mode": 4,
			"range": {},
			"props": {
				"specialAnim": "Taunt",
				"apCost": 2,
				"vars": {
					"value1": 25
				},
				"needDisengaged": true,
				"cursor": "CursorHeal",
				"healPreview": 1,
				"useWithoutWeapon": true,
				"flags": 64,
				"extraFx": "prefabs/fx/fight/BuffCry/BuffCryBlue.fx"
			},
			"script": "function onSkill() {\n\tplay();\n\t@sync for( u in getAllies(skill.unit) ) {\n\t\tu.gainsHealth(ceil(u.stats.health*vars.value1/100));\n\t\tspawnFx();\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 15
			},
			"iconeDone": true,
			"group": 2,
			"done": 2
		},
		{
			"id": "BeltAccGuardEngaged",
			"name": "Lanières de cuir",
			"desc": "Tant que cette unité est engagée, elle a [BeltAccGuardEngaged].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "BeltAccGuardEngaged"
					}
				],
				"globalEvents": true
			},
			"script": "function onBeginAction() {\n\tif ( skill.unit.isEngaged() ) {\n\t\tskill.unit.addStatusPersist(Status.BeltAccGuardEngaged, skill);\n\t} else skill.unit.cancelStatus(Status.BeltAccGuardEngaged, skill);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccReduceOpportunityAttack",
			"name": "Porte-bonheur en étain",
			"desc": "[DamageTakenPercent] des attaques d'opportunité réduits de ::value1::%.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 75
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tif( s.kind == Skill.OpportunityAttack && t.target == skill.unit ) {\n\t\t\tt.baseDamageBonus -= vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccBarbs",
			"name": "Tonifiant à la moutarde",
			"desc": "Chaque fois que cette unité subit des dégâts en mêlée, elle renvoie des dégâts égaux à ::value1::% de son [Armor] maximum.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 5
				}
			},
			"script": "function onDamageTaken(a) {\n\tif( skill.unit.isMelee(a.unit) ) {\n\t\ta.unit.damages(skill, ceil(skill.unit.stats.armor*vars.value1/100));\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccBaseActionOnly",
			"name": "Petit gantelet",
			"desc": "[DamageBonusPercent] augmentés de ::value1::% mais cette unité peut seulement utiliser une [ActionBase].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				},
				"tooltipStatus": [
					{
						"st": "ActionBase"
					}
				]
			},
			"script": "function onSkillEval(s) {\n\tfor( t in s.getTargets() ) {\n\t\tt.baseDamageBonus += vars.value1;\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccMoraleBonus",
			"name": "Idole ancienne",
			"desc": "Chaque fois que cette unité tue un ennemi, elle génère ::value1:: Moral de plus.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"vars": {
					"value1": 1
				}
			},
			"script": "function onDeath(a) {\n\tif( a.unit == skill.unit ) {\n\t\ta.unit.gainsMorale(vars.value1);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccGritEndTurn",
			"name": "Blason cousu",
			"desc": "À la fin de son tour, cette unité a ::value1::% de chances d'obtenir <apt>::value2::</apt>.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 5,
					"value2": 1
				}
			},
			"script": "function onEndTurn() {\n\tif( proba(vars.value1) ) {\n\t\tskill.unit.gainsActionPoint(vars.value2);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilProcTrueDmg",
			"name": "Concentré d'huile explosive",
			"desc": "L'Huile explosive a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilStrengthProc",
			"name": "Concentré d'huile de force",
			"desc": "L'Huile de force a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilDexterityProc",
			"name": "Concentré d'huile de promptitude",
			"desc": "L'Huile de promptitude a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilDamageTakenProc",
			"name": "Concentré d'huile de renforcement",
			"desc": "L'Huile de renforcement a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilSlowProc",
			"name": "Concentré d'huile paralysante",
			"desc": "L'Huile paralysante a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilSelfHeal",
			"name": "Concentré d'huile de conversion",
			"desc": "L'Huile de conversion a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilDotEffect",
			"name": "Concentré d'huile infectieuse",
			"desc": "L'Huile infectieuse a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilCleave",
			"name": "Concentré d'huile vaporeuse",
			"desc": "L'Huile vaporeuse a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilWindfury",
			"name": "Concentré d'huile instable",
			"desc": "L'Huile instable a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 25
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilHemorraghe",
			"name": "Concentré d'huile hémorragique",
			"desc": "L'Huile hémorragique a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 25
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilSticky",
			"name": "Concentré d'huile poisseuse",
			"desc": "L'Huile hémorragique a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilProcSolid",
			"name": "Concentré d'huile solidifiante",
			"desc": "L'Huile solidifiante a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilSwipping",
			"name": "Concentré d'huile glissante",
			"desc": "L'Huile glissante a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccProcFever",
			"name": "Concentré d'huile fiévreuse",
			"desc": "L'Huile fiévreuse a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 30
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilBrave",
			"name": "Concentré d'huile de bravoure",
			"desc": "L'Huile de bravoure a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccOilProcSlowReflexes",
			"name": "Concentré d'huile d'épuisement",
			"desc": "L'Huile d'épuisement a ::value1::% de chances supplémentaires d'appliquer ses effets.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccTerrorMax",
			"name": "Charme des Traqueurs",
			"desc": "Augmente le maximum de [Terror] que peut subir le compagnon de ::value1::.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Terror"
					}
				]
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccGoldTeeth",
			"name": "Davier",
			"desc": "Cette unité a une chance de ramasser des dents en or à la fin des combats.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"probability": 1
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccTerrorReduceRound",
			"name": "Fétiche des Anciens",
			"desc": "Réduit de ::value1:: la quantité de [Terror] appliquée sur ce compagnon à la fin de son tour.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Terror"
					}
				]
			},
			"script": "function onEndTurn() {\n\tskill.unit.consumeStatus(Status.Terror, vars.value1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccBlindDay",
			"name": "Miroir en étain",
			"desc": "Chaque fois que cette unité s'engage, elle a une chance d'appliquer [Blind]. Ne fonctionne que par beau temps.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"engaged": false,
					"value1": 20
				},
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Blind"
					}
				]
			},
			"script": "function onBeginAction() {\n\tif( !skill.unit.isEngaged() ) {\n\t\tvars.engaged = false;\n\t}\n}\n\nfunction onSkillPlayed(s) {\n\tif( !vars.engaged && skill.unit.isEngaged() ) {\n\t\tvars.engaged = true;\n\t\tif( proba(vars.value1) ) {\n\t\t\tskill.unit.engagedUnit.addStatus(Status.Blind);\n\t\t}\n\t}\n}",
			"notes": "",
			"levels": [],
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccBeastH1",
			"name": "Poil de la Bête",
			"desc": "Chaque fois que cette unité est censée subir [Terror], elle gagne autant de [AnimalMarkedBonus] à la place.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Terror"
					},
					{
						"st": "AnimalMarkedBonus"
					}
				]
			},
			"script": "function onStatus(st) {\n\tvar nb = 0;\n\tif( st.kind == Status.Terror ) {\n\t\tspawnFx();\n\t\tnb = st.status.count;\n\t\tst.cancel();\n\t\tskill.unit.addStatus(Status.AnimalMarkedBonus, nb);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccWeighted",
			"name": "Ceinture lestée",
			"desc": "Le porteur ne peut ni être attiré, ni repoussé. Gagne le statut [Unwavering].",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Unwavering"
					}
				]
			},
			"script": "function onBeginBattle() {\n\tskill.unit.addStatus(Status.Unwavering);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccMudGuard",
			"name": "Garde boue",
			"desc": "Cette unité ne subit pas les malus de [Boue].",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccPushDistance",
			"name": "Gaine dorsale",
			"desc": "Les unités repoussées par le porteur parcourent le double de la distance.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccPlague1",
			"name": "Ceinture de peste",
			"desc": "Empêche le porteur d'être affecté par la Peste. \nBloque le stade de contamination tant qu'il porte la ceinture.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccProtection1",
			"name": "Pansière",
			"desc": "Le porteur a ::value1::% de chance de ne pas subir de blessure.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 25
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccPrisonerTrust",
			"name": "Timbale personnelle",
			"desc": "Chaque jour, le prisonnier équipé bénéficie d'un grand bonus de confiance envers le groupe.",
			"mode": 6,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccPrisonerPony",
			"name": "Figurine de poney",
			"desc": "Le prisonnier porteur augmente sa capacité de transport.",
			"mode": 6,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccPrisonerWorkMeatDryer",
			"name": "Torchon propre",
			"desc": "Le prisonnier équipé augmente la production de ::value1::% lorsqu'il est assigné à un séchoir à viande.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccPrisonerWorkBrewBarrel",
			"name": "Levure sèche",
			"desc": "Le prisonnier équipé augmente la production de ::value1::% lorsqu'il est assigné à un tonneau de brassage.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccPrisonerWorkSkinDryingRack",
			"name": "Tanin végétal",
			"desc": "Le prisonnier équipé augmente la production de ::value1::% lorsqu'il est assigné à un étendoir à peau.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "BeltAccPrisonerWorkBeeHive",
			"name": "Masque d'apiculteur",
			"desc": "Le prisonnier équipé augmente la production de ::value1::% lorsqu'il est assigné à une ruche.",
			"mode": 6,
			"range": {},
			"props": {
				"vars": {
					"value1": 50
				}
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"done": 2
		},
		{
			"id": "Corrupt",
			"name": "Soudoyer",
			"desc": "Vous dépensez ::value1:: krowns pour tenter de soudoyer une unité ennemie adjacente afin qu'elle combatte pour votre camp.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"allowed": false,
					"value1": 50
				},
				"defaultAction": true,
				"itemCost": {
					"item": "Gold",
					"qty": 50
				}
			},
			"script": "function onBeginAction() {\n\tvars.allowed = false;\n\tfor( u in getFoes(skill.unit) )\n\t\tif( canCaptureTarget(u) ) {\n\t\t\tvars.allowed = true;\n\t\t\tbreak;\n\t\t}\n}\n\nfunction onEval(a) {\n\tif( !canCaptureTarget(a.target) ){\n\t\tdontAllow();\n\t}\n}\n\nfunction onSkill() {\n\tfor (t in skill.getTargets()){\n\t\tcaptureTarget(t);\n\t}\n}\n\nfunction canCaptureTarget(t){\n\treturn true;\n}",
			"notes": "",
			"iconeDone": true,
			"group": 65,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 15,
				"y": 12
			},
			"done": 2
		},
		{
			"id": "BeltAccSong",
			"name": "Chant des anciens",
			"desc": "Applique [Motivation] aux alliés dans la zone.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 4,
				"allowedTargets": 1,
				"baseDistance": 0
			},
			"props": {
				"specialAnim": "Taunt",
				"tooltipStatus": [
					{
						"st": "Motivation"
					}
				],
				"apCost": 1
			},
			"script": "function onSkill() {\n\tplay();\n\tfor( a in skill.getTargets() ) {\n\t\ta.target.addStatusPersist(Status.Motivation, skill);\n\t}\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 65,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 2,
				"y": 6
			}
		},
		{
			"id": "BeltAccHunt",
			"name": "Chasse des anciens",
			"desc": "Capture un animal ennemi à coup sûr.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"allowed": false
				}
			},
			"script": "function onBeginAction() {\n\tvars.allowed = false;\n\tfor( u in getFoes(skill.unit) )\n\t\tif( canCaptureTarget(u) ) {\n\t\t\tvars.allowed = true;\n\t\t\tbreak;\n\t\t}\n}\n\nfunction onEval(a) {\n\tif( !canCaptureTarget(a.target) ){\n\t\tdontAllow();\n\t}\n}\n\nfunction onSkill() {\n\tfor (t in skill.getTargets()){\n\t\tcaptureTarget(t);\n\t}\n}\n\nfunction canCaptureTarget(t){\n\treturn t.isAnimal && !t.isGhost && skill.unit.canCapture(t, false);\n}",
			"notes": "",
			"done": 1,
			"iconeDone": true,
			"group": 65,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 1,
				"y": 6
			}
		},
		{
			"id": "BeltAccElderSong",
			"name": "Chant des anciens",
			"desc": "Applique [Motivation] aux alliés dans la zone.",
			"mode": 0,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"done": 0,
			"iconeDone": false,
			"group": 65
		},
		{
			"id": "AnimAccAllyMelee",
			"name": "",
			"desc": "[DamageBonusPercent] augmentés de ::value1::% si adjacent à un allié au combat.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"vars": {
					"value1": 10
				}
			},
			"script": "function onBeginAction() {\n\tvar count = 0;\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( skill.unit.isMelee(u) ) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif( count >= 1 ) {\n\t\tskill.unit.addStatusPersist(Status.Unity, skill);\n\t} else skill.unit.cancelStatus(Status.Unity, skill);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 66,
			"done": 2
		},
		{
			"id": "AnimAccNoAllyMelee",
			"name": "",
			"desc": "[DamageBonusPercent] augmentés de ::value1::% si non-adjacent à un allié au combat.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"vars": {
					"value1": 5
				}
			},
			"script": "function onBeginAction() {\n\tvar count = 0;\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( skill.unit.isMelee(u) ) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif( count == 0 ) {\n\t\tskill.unit.addStatusPersist(Status.Loneliness, skill);\n\t} else skill.unit.cancelStatus(Status.Loneliness, skill);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 66,
			"done": 2
		},
		{
			"id": "AnimAccObey",
			"name": "",
			"desc": "Cette unité peut être contrôlée au combat.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 66,
			"done": 2
		},
		{
			"id": "AnimAccSecondLife",
			"name": "",
			"desc": "Quand cette unité doit mourir, elle ne meurt pas puis le collier est détruit.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 66,
			"done": 2
		},
		{
			"id": "AnimAccBerserkProc",
			"name": "",
			"desc": "Quand cette unité a ::value1::% ou moins de [Health] restante, elle a [Berserk].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 30
				},
				"tooltipStatus": [
					{
						"st": "Berserk"
					}
				]
			},
			"script": "function onDamageTaken(a) {\n\tif( skill.unit.health <= (skill.unit.stats.health*vars.value1/100)) {\n\t\tspawnFx();\n\t\tskill.unit.addStatus(Status.Berserk);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 66,
			"done": 2
		},
		{
			"id": "AnimAccRegen",
			"name": "",
			"desc": "À la fin de son tour, cette unité soigne ::value1::% de sa [Health] maximum.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				}
			},
			"script": "function onEndTurn() {\n\tspawnFx();\n\tskill.unit.gainsHealth(ceil(skill.unit.stats.health*vars.value1/100));\n}",
			"notes": "",
			"iconeDone": true,
			"group": 66,
			"done": 2
		},
		{
			"id": "AnimAccGuard",
			"name": "",
			"desc": "Lorsque la troupe subit une attaque par surprise, un ennemi aléatoire commence avec une blessure.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 66,
			"done": 2
		},
		{
			"id": "AnimAccPoison",
			"name": "",
			"desc": "L'animal porteur a ::value1::% de probabilité d'empoisonner sa cible mais il commence le combat avec le statut [Poison].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				],
				"vars": {
					"value1": 50,
					"value2": 2
				}
			},
			"script": "function onBeginBattle() {\n\tskill.unit.addStatus(Status.Poison);\n}\n\nfunction onSkillPlayed(s) {\n\tif( skill.unit.hasStatus(Status.Poison) && proba(vars.value1) ) {\n\t\tfor( t in s.getTargets() ) {\n\t\t\tif( t.target.side != skill.unit.side )\n\t\t\t\tt.target.addStatus(Status.Poison, vars.value2);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 66,
			"done": 2
		},
		{
			"id": "AnimAccFire",
			"name": "",
			"desc": "L'animal porteur a ::value1::% de probabilité de brûler sa cible mais il commence le combat avec le statut [Burning].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Burning"
					}
				],
				"vars": {
					"value1": 50,
					"value2": 2
				}
			},
			"script": "function onBeginBattle() {\n\tskill.unit.addStatus(Status.Burning);\n}\n\nfunction onSkillPlayed(s) {\n\tif(skill.unit.hasStatus(Status.Burning) && proba(vars.value1) ) {\n\t\tfor( t in s.getTargets() ) {\n\t\t\tif( t.target.side != skill.unit.side )\n\t\t\t\tt.target.addStatus(Status.Burning, vars.value2);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 66,
			"done": 2
		},
		{
			"id": "ArmorLastUnitPlay",
			"name": "",
			"desc": "Si l'unité est le dernier compagnon à jouer, alors elle gagne [Executer].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Executer"
					}
				]
			},
			"script": "function onBeginTurn(){\n\tvar isLast = true;\n\tfor (u in getAllies(skill.unit, false))\n\t\tif (!hasPlayed(u)){\n\t\t\tisLast = false;\n\t\t\tbreak;\n\t\t}\n\tif (isLast){\n\t\tskill.unit.addStatus(Status.Executer);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 66,
			"done": 2
		},
		{
			"id": "ArmorOpportunityCrit",
			"name": "",
			"desc": "Lorsqu'elle reçoit une attaque d'opportunité, l'unité effectue également une attaque d'opportunité, avec ::value1::% de [Critique].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 30
				},
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onEval( a ) {\n\tif( a.isOpportunityAttack() && a.castOrigin == Skill.ArmorOpportunityCrit ) {\n\t\ta.criticalHitPercent += vars.value1;\n\t}\n}\n\nfunction onDamageTaken(a) {\n\tif( a.isOpportunityAttack() ) {\n\t\tskill.unit.opportunityAttack(a.unit, skill);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 66,
			"done": 3
		},
		{
			"id": "ArmorSurrounded",
			"name": "",
			"desc": "L'unité compte pour 2 compagnons lorsqu'elle encercle un ennemi.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 66,
			"done": 3
		},
		{
			"id": "FireZone",
			"name": "Feu",
			"desc": "Une zone de feu qui applique [Burning] à toutes les unités qui traversent la zone.",
			"mode": 5,
			"range": {
				"allowedTargets": 4
			},
			"props": {
				"damageType": [
					0
				],
				"tooltipStatus": [
					{
						"st": "Fire"
					},
					{
						"st": "Burning"
					}
				]
			},
			"script": "function onZoneIn(a) {\n\ta.target.addStatus(Status.Burning);\n}\n\nfunction onZoneMoveEnd(a) {\n\ta.target.addStatus(Status.Burning);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 15,
				"y": 2
			},
			"minDmg": 10,
			"iconeDone": true,
			"group": 68,
			"done": 2
		},
		{
			"id": "PoisonZone",
			"name": "Poison",
			"desc": "Une zone de poison qui applique ::value1:: [Poison]s à toutes les unités qui traversent ou terminent leur tour dedans.",
			"mode": 5,
			"range": {
				"allowedTargets": 4
			},
			"props": {
				"damageType": [
					1
				],
				"vars": {
					"value1": 2
				},
				"tooltipStatus": [
					{
						"st": "PoisonCloud"
					}
				]
			},
			"script": "function onZoneIn(a) {\n\tif (a.target.kind == UnitClass.RatNest) return;\n\ta.target.addStatus(Status.PoisonCloud);\n\ta.target.addStatus(Status.Poison, vars.value1);\n}\n\nfunction onZoneEndTurn(a) {\n\tif (a.target.kind == UnitClass.RatNest) return;\n\ta.target.addStatus(Status.Poison, vars.value1);\n}\n\nfunction onZoneOut(a) {\n\tif (a.target.kind == UnitClass.RatNest) return;\n\ta.target.cancelStatus(Status.PoisonCloud);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 12,
				"y": 2
			},
			"minDmg": 10,
			"iconeDone": true,
			"group": 68,
			"done": 2
		},
		{
			"id": "CastPoisonZone",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 0.9,
				"allowedTargets": 4,
				"baseDistance": 10000
			},
			"props": {},
			"script": "function onSkill() {\n\tcreateAreaEffect(\"Immediate\", 1 , {skillId: Skill.PoisonZone} );\n}",
			"notes": "Cast PoisonZone sur un socle sans toucher l'attaquant si adjacent.",
			"iconeDone": true,
			"group": 68,
			"done": 2
		},
		{
			"id": "FogZone",
			"name": "Brouillard",
			"desc": "Une zone de brouillard qui masque la visibilité.",
			"mode": 5,
			"range": {
				"allowedTargets": 4
			},
			"props": {},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 18,
				"y": 2
			},
			"iconeDone": true,
			"group": 68,
			"done": 2
		},
		{
			"id": "TerrorFogZone",
			"name": "Brouillard fantôme",
			"desc": "Une zone de brouillard qui masque la visibilité et qui applique ::value1:: [Terror] à toutes les unités qui traversent ou terminent leur tour dedans.",
			"mode": 5,
			"range": {
				"allowedTargets": 4
			},
			"props": {
				"vars": {
					"value1": 1
				},
				"tooltipStatus": [
					{
						"st": "Terror"
					}
				]
			},
			"script": "function onZoneIn(a) {\n\ta.target.addStatus(Status.TerrorFog);\n\ta.target.addStatus(Status.Terror, vars.value1);\n}\n\nfunction onZoneEndTurn(a) {\n\ta.target.addStatus(Status.Terror, vars.value1);\n}\n\nfunction onZoneOut(a) {\n\ta.target.cancelStatus(Status.TerrorFog);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 17,
				"y": 2
			},
			"iconeDone": true,
			"group": 68,
			"done": 2
		},
		{
			"id": "MudZone",
			"name": "Boue",
			"desc": "Une zone de boue qui ralentit toutes les unités qui la traversent.",
			"mode": 5,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Mud"
					}
				]
			},
			"script": "function onZoneIn(a) {\n\ta.target.addStatus(Status.Mud);\n}\n\nfunction onZoneMoveEnd(a) {\n\ta.target.addStatus(Status.Mud);\n}\n\nfunction onZoneOut(a) {\n\ta.target.cancelStatus(Status.Mud);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 4,
				"y": 5
			},
			"iconeDone": true,
			"group": 68,
			"done": 2
		},
		{
			"id": "A1ArenaRedGazZone",
			"name": "Vapeurs stimulantes",
			"desc": "Une zone qui applique [A1ArenaRedGaz] aux unités adverses.",
			"mode": 5,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "A1ArenaRedGaz"
					}
				],
				"feature": "Alazar1_Update",
				"globalEvents": true
			},
			"script": "function onZoneIn(a) {\n\tif (isFoe(a.target))\n\t\ta.target.addStatus(Status.A1ArenaRedGazZone);\n}\n\nfunction onZoneOut(a) {\n\tif (isFoe(a.target))\n\t\ta.target.cancelStatus(Status.A1ArenaRedGazZone);\n}\n\nfunction onBeginRound() {\n\tfor( u in getFoeUnits() ) {\n\t\tif( u.hasStatus(Status.A1ArenaRedGazZone) ) {\n\t\t\tu.addStatus(Status.A1ArenaRedGaz);\n\t\t\tu.cancelStatus(Status.A1ArenaBlueGaz);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 68,
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 17,
				"y": 8
			},
			"done": 2
		},
		{
			"id": "A1ArenaRedGazStatus",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 100
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( t.target.isEngaged() ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 68,
			"done": 2
		},
		{
			"id": "A1ArenaBlueGazZone",
			"name": "Vapeurs tonifiantes",
			"desc": "Une zone qui applique [A1ArenaBlueGaz] aux unités adverses.",
			"mode": 5,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "A1ArenaBlueGaz"
					}
				],
				"feature": "Alazar1_Update",
				"globalEvents": true
			},
			"script": "function onZoneIn(a) {\n\tif (isFoe(a.target))\n\t\ta.target.addStatus(Status.A1ArenaBlueGazZone);\n}\n\nfunction onZoneOut(a) {\n\tif (isFoe(a.target))\n\t\ta.target.cancelStatus(Status.A1ArenaBlueGazZone);\n}\n\nfunction onBeginRound() {\n\tfor( u in getFoeUnits() ) {\n\t\tif( u.hasStatus(Status.A1ArenaBlueGazZone) ) {\n\t\t\tu.addStatus(Status.A1ArenaBlueGaz);\n\t\t\tu.cancelStatus(Status.A1ArenaRedGaz);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 68,
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 4,
				"y": 9
			},
			"done": 2
		},
		{
			"id": "A1ArenaBlueGazStatus",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 100
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onSkillEval(a) {\n\tfor( t in a.getTargets() ) {\n\t\tif( !t.target.isEngaged() ) {\n\t\t\tt.baseDamageBonus += vars.value1;\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 68,
			"done": 2
		},
		{
			"id": "RockSlideZone",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 6
			},
			"props": {
				"castFx": "prefabs/fx/environment/RockSlide/RockSlide_Sign.fx"
			},
			"script": "function onSkill() {\n\tcreateEvent(Skill.RockSlide, 1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 69,
			"done": 2
		},
		{
			"id": "RockSlideZone_Matriarch",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 6
			},
			"props": {
				"castFx": "prefabs/fx/environment/RockSlide/RockSlide_Sign.fx"
			},
			"script": "function onSkill() {\n\tcreateEvent(Skill.RockSlide, 2); // 2 end round because trigger at the end of a round\n}",
			"notes": "",
			"iconeDone": true,
			"group": 69,
			"done": 2
		},
		{
			"id": "RockSlide",
			"name": "Éboulement",
			"desc": "Un éboulement va s'abattre et tuer toute unité touchée.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 4
			},
			"props": {
				"castFx": "prefabs/fx/environment/RockSlide/RockSlide.fx",
				"flags": 1
			},
			"script": "function onEval(a) {\n\ta.dmg = a.target.health + a.target.armor;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 3,
				"y": 7
			},
			"iconeDone": true,
			"group": 69,
			"done": 2
		},
		{
			"id": "LightningZone",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 6
			},
			"props": {
				"castFx": "prefabs/fx/environment/lightning/BattleLightning_Sign.fx"
			},
			"script": "function onSkill() {\n\tcreateEvent(Skill.Lightning, 1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 69,
			"done": 2
		},
		{
			"id": "Lightning",
			"name": "Éclair",
			"desc": "Un éclair va s'abattre et tuer toute unité touchée.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 4
			},
			"props": {
				"castFx": "prefabs/fx/environment/lightning/BattleLightning.fx",
				"flags": 2
			},
			"script": "function onEval(a) {\n\ta.dmg = a.target.health;\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 7
			},
			"iconeDone": true,
			"group": 69,
			"done": 2
		},
		{
			"id": "SportLightningZone",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 6
			},
			"props": {
				"castFx": "prefabs/fx/environment/lightning/BattleLightning_Sign.fx"
			},
			"script": "function onSkill() {\n\tcreateEvent(Skill.SportLightning, 1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 69,
			"done": 2
		},
		{
			"id": "SportLightning",
			"name": "Éclair Mineur",
			"desc": "Un éclair va s'abattre et mettre hors de combat toute unité touchée.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 4
			},
			"props": {
				"castFx": "prefabs/fx/environment/lightning/BattleLightning.fx",
				"flags": 2
			},
			"script": "function onEval(a) {\n\ta.dmg = a.target.health;\n}",
			"notes": "",
			"iconeDone": true,
			"group": 69,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 1,
				"y": 5
			},
			"done": 2
		},
		{
			"id": "CelestiumLightningZone",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 6
			},
			"props": {
				"castFx": "prefabs/fx/environment/lightning/BattleLightning_Sign.fx"
			},
			"script": "function onSkill() {\n\tcreateEvent(Skill.CelestiumLightning, 1);\n}",
			"notes": "Timeline event",
			"iconeDone": true,
			"group": 69,
			"done": 2
		},
		{
			"id": "CelestiumLightning",
			"name": "Châtiment de l'Œil",
			"desc": "Le Châtiment de l'Œil va s'abattre et foudroyer la zone.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 4
			},
			"props": {
				"castFx": "prefabs/fx/environment/lightning/CelestiumBattleLightning.fx",
				"flags": 2,
				"vars": {
					"value1": 50
				}
			},
			"script": "function onEval(a) {\n\ta.dmg = floor(a.target.stats.health * vars.value1 / 100);\n}\n\nfunction onPostSkill() {\n\tcast(Skill.CelestiumLightningPersist, { skill : skill }, skill);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 69,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 0,
				"y": 19
			},
			"done": 2
		},
		{
			"id": "CelestiumLightningPersist",
			"name": "Châtiment de l'Œil",
			"desc": "L'Œil a châtié la zone et applique [CelestiumLightning] à la première unité qui la traverse.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 4
			},
			"props": {
				"castFx": "prefabs/fx/environment/lightning/CelestiumBattleLightning.fx",
				"flags": 2,
				"tooltipStatus": [
					{
						"st": "CelestiumLightning"
					}
				],
				"vars": {
					"value1": 25
				},
				"zoneFx": "prefabs/fx/environment/lightning/BattleCelestiumElectrifiedZone.fx"
			},
			"script": "function onSkill() {\n\tcreateAreaEffect(\"Infinite\", 0);\n}\n\nfunction onZoneIn( a ) {\n\tfor( u in a.getTargets() )\n\t\tu.addStatus(Status.CelestiumLightning);\n\ta.remove();\n}",
			"notes": "",
			"iconeDone": true,
			"group": 69,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 19
			},
			"done": 2
		},
		{
			"id": "PoisonTrap",
			"name": "Piège de poison",
			"desc": "Marcher à proximité de ce piège pourrait le déclencher et créer un nuage de poison.",
			"mode": 5,
			"range": {
				"allowedTargets": 4,
				"type": 0,
				"radius": 4
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "PoisonCloud"
					}
				]
			},
			"script": "function onZoneIn(a) {\n\tcreateSkillZone(Skill.PoisonZone, { aoe: a });\n\ta.remove();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 14,
				"y": 15
			},
			"iconeDone": true,
			"group": 70,
			"done": 2
		},
		{
			"id": "FireTrap",
			"name": "Piège de feu",
			"desc": "Marcher à proximité de ce piège pourrait le déclencher et créer une surface enflammée.",
			"mode": 5,
			"range": {
				"allowedTargets": 4,
				"type": 0,
				"radius": 2
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fire"
					}
				]
			},
			"script": "function onZoneIn(a) {\n\tcreateSkillZone(Skill.FireZone, { aoe: a });\n\ta.remove();\n}",
			"notes": "L'icone a été prise dans la banque pour ne pas que ce soit \"IG\" pour le joueur",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 1,
				"y": 9
			},
			"iconeDone": true,
			"group": 70,
			"done": 2
		},
		{
			"id": "PushTrap",
			"name": "Piège d'exil",
			"desc": "Marcher à proximité de ce piège pourrait le déclencher et repousser toutes les unités dans la zone.",
			"mode": 5,
			"range": {
				"allowedTargets": 4,
				"type": 0,
				"radius": 4
			},
			"props": {
				"vars": {
					"value1": 3,
					"value2": 4
				},
				"castFx": "prefabs/fx/fight/Explosion/Grenade/GrenadeBlast.fx"
			},
			"script": "function onZoneIn(a) {\n\ta.stopMove(false);\n\ta.remove();\n\tplay();\n\tfunction pushbackAllTargets() {\n\t\tfor( t in a.getUnitsInRadius(vars.value2) ) {\n\t\t\tt.pushback(getPushbackOrigin(), getPushback(null));\n\t\t}\n\t}\n\ta.addMoveEvent(pushbackAllTargets);\n}\n\nfunction getPushback( a ) {\n\treturn vars.value1;\n}\n\nfunction getPushbackOrigin() {\n\treturn { skill : skill };\n}",
			"notes": "L'icone a été prise dans la banque pour ne pas que ce soit \"IG\" pour le joueur",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 17
			},
			"iconeDone": true,
			"group": 70,
			"done": 2
		},
		{
			"id": "BearTrap",
			"name": "Piège à ours",
			"desc": "Marcher à proximité de ce piège pourrait le déclencher et infliger de lourds dégâts.",
			"mode": 5,
			"range": {
				"allowedTargets": 4,
				"type": 0,
				"radius": 3
			},
			"props": {
				"vars": {
					"value1": 20
				}
			},
			"script": "function onZoneIn(a) {\n\ta.sfx(Sound.Skill_BearTrap);\n\ta.target.damages(skill, round((a.target.stats.health*vars.value1)/100), true);\n\ta.remove();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 14
			},
			"iconeDone": true,
			"group": 70,
			"done": 2
		},
		{
			"id": "FearZone",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"allowedTargets": 4,
				"type": 0,
				"radius": 3
			},
			"props": {
				"vars": {
					"value1": 20
				}
			},
			"script": "function onZoneIn(a) {\n\tif( isPlayer(a.target) )\n\t\ta.target.addStatus(Status.Terror, 10);\n}",
			"notes": "",
			"done": 2,
			"iconeDone": true,
			"group": 70
		},
		{
			"id": "MosquitoZone",
			"name": "Nuée de moustique",
			"desc": "Inflige [VALUE]% dégâts à la [Health] de toute unité qui traverse ou termine son tour dans le nuage.\n\nCes insectes semblent attirés par la sueur.",
			"mode": 5,
			"range": {
				"allowedTargets": 4,
				"radius": 1
			},
			"props": {
				"vars": {
					"maxRange": 5
				},
				"value": 10
			},
			"script": "function onZoneIn(a) {\n\ta.target.damages(skill, ceil(a.target.stats.health*skill.value/100), true);\n}\n\nfunction onZoneEndTurn(a) {\n\ta.target.damages(skill, ceil(a.target.stats.health*skill.value/100), true);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 19,
				"y": 6
			},
			"iconeDone": true,
			"group": 70,
			"done": 2
		},
		{
			"id": "Brazier",
			"name": "Brasero",
			"desc": "Du feu pourrait embraser ce brasero.",
			"mode": 5,
			"range": {
				"allowedTargets": 4,
				"type": 0,
				"radius": 4
			},
			"props": {},
			"script": "function onZoneIn(a) {\n\tfor( u in getUnits() ) {\n\t}\n\ta.remove();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 12,
				"y": 14
			},
			"iconeDone": true,
			"group": 70,
			"done": 2
		},
		{
			"id": "SpearWeaponZone",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"allowedTargets": 4
			},
			"props": {
				"provideSkill": "SpearWeapon"
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 2
			},
			"iconeDone": true,
			"group": 70,
			"done": 2
		},
		{
			"id": "SpearWeapon",
			"name": "Jet de lance",
			"desc": "Inflige [DMG] à la cible.",
			"mode": 1,
			"range": {
				"baseDistance": 8
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 1
				},
				"weapon": "PolearmArena",
				"specialAnim": "Throw",
				"apCost": 0,
				"flags": 4,
				"needDisengaged": true
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 19,
				"y": 2
			},
			"minDmg": 10,
			"iconeDone": true,
			"group": 70,
			"done": 2
		},
		{
			"id": "Plague_Madness",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 100
				}
			},
			"script": "function onBeginRound(){\n\tif (randInt(0, 100) <= vars.value1) {\n\t\tskill.unit.madness();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 71,
			"done": 2
		},
		{
			"id": "FleeArea",
			"name": "Zone de fuite",
			"desc": "Lorsqu’un compagnon atteint cette zone, utilisez sa compétence <iskill>Flee</iskill> afin de quitter le champ de bataille.",
			"mode": 5,
			"range": {
				"type": 2,
				"radius": 10,
				"allowedTargets": 0
			},
			"props": {},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 1,
				"y": 16
			},
			"iconeDone": true,
			"group": 71,
			"done": 2
		},
		{
			"id": "EquipTorch",
			"name": "Équiper une torche",
			"desc": "S'équiper d'une torche.",
			"mode": 4,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 13,
				"y": 15
			},
			"iconeDone": true,
			"group": 71,
			"done": 2
		},
		{
			"id": "AIBehaviourDefault",
			"name": "Comportement : Attaquer",
			"desc": "À son tour, cette unité se déplacera et attaquera les unités à proximité.",
			"mode": 4,
			"range": {},
			"props": {
				"defaultAction": false,
				"flags": 8
			},
			"script": "function onSkill() {\n\tskill.unit.cancelStatus(Status.AIBehaviourRunaway);\n\tskill.unit.cancelStatus(Status.AIBehaviourDefault);\n\tskill.unit.cancelStatus(Status.AIBehaviourStop);\n\n\tskill.unit.addStatus(Status.AIBehaviourStop);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 18,
				"y": 15
			},
			"iconeDone": true,
			"group": 72,
			"done": 2
		},
		{
			"id": "AIBehaviourStop",
			"name": "Comportement : Défendre",
			"desc": "À son tour, cette unité restera à sa position et attaquera les unités à proximité.",
			"mode": 4,
			"range": {},
			"props": {
				"defaultAction": false,
				"flags": 8
			},
			"script": "function onSkill() {\n\tskill.unit.cancelStatus(Status.AIBehaviourRunaway);\n\tskill.unit.cancelStatus(Status.AIBehaviourDefault);\n\tskill.unit.cancelStatus(Status.AIBehaviourStop);\n\n\tskill.unit.addStatus(Status.AIBehaviourRunaway);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 17,
				"y": 15
			},
			"iconeDone": true,
			"group": 72,
			"done": 2
		},
		{
			"id": "AIBehaviourRunaway",
			"name": "Comportement : Fuir",
			"desc": "À son tour, cette unité cherchera à s'éloigner des unités ennemies et à rester à proximité des unités alliées.",
			"mode": 4,
			"range": {},
			"props": {
				"defaultAction": false,
				"flags": 8
			},
			"script": "function onSkill() {\n\tskill.unit.cancelStatus(Status.AIBehaviourRunaway);\n\tskill.unit.cancelStatus(Status.AIBehaviourDefault);\n\tskill.unit.cancelStatus(Status.AIBehaviourStop);\n\tif (skill.unit.hasStatus(Status.ScaredUnit))\n\t\tskill.unit.addStatus(Status.AIBehaviourStop);\n\telse\n\t\tskill.unit.addStatus(Status.AIBehaviourDefault);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 16,
				"y": 15
			},
			"iconeDone": true,
			"group": 72,
			"done": 2
		},
		{
			"id": "ArenaVulnerability",
			"name": "Pression",
			"desc": "Tous les ennemis débutent le combat sous [Vulnerability].",
			"mode": 2,
			"range": {
				"allowedTargets": 0
			},
			"props": {
				"tooltipStatus": [
					{
						"st": "Vulnerability"
					}
				]
			},
			"script": "function onInit() {\n\tfor ( f in getFoeUnits() ) {\n\t\tf.addStatus(Status.Vulnerability, 1);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 4,
				"y": 12
			},
			"levels": [],
			"iconeDone": true,
			"group": 74,
			"done": 2
		},
		{
			"id": "ArenaStrengthBonus",
			"name": "Force améliorée",
			"desc": "[Strength] des compagnons augmentée de [ATTR]%.",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"attributes": [
					{
						"kind": "Strength",
						"value": 5,
						"isPercentage": true
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 5,
				"y": 12
			},
			"iconeDone": true,
			"group": 74,
			"done": 2
		},
		{
			"id": "ArenaDexterityBonus",
			"name": "Dextérité améliorée",
			"desc": "[Dexterity] des compagnons augmentée de [ATTR]%.",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"attributes": [
					{
						"kind": "Dexterity",
						"value": 5,
						"isPercentage": true
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 6,
				"y": 12
			},
			"iconeDone": true,
			"group": 74,
			"done": 2
		},
		{
			"id": "ArenaCriticalDamage",
			"name": "Dégâts des coups critiques améliorés",
			"desc": "[CritHitDamageBonusPercent] augmentés de [ATTR]%.",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"attributes": [
					{
						"kind": "CritHitDamageBonusPercent",
						"value": 15
					}
				]
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 7,
				"y": 12
			},
			"iconeDone": true,
			"group": 74,
			"done": 2
		},
		{
			"id": "ArenaGritBonusOnKill",
			"name": "À mort !",
			"desc": "La mort d'un ennemi génère <ap>::value1::</ap>.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 2
				}
			},
			"script": "function onDeath(a) {\n\tif ( isFoe(a.target) ) {\n\t\tvar unit = getPlayerUnits()[0];\n\t\tif (unit != null) {\n\t\t\tunit.gainsActionPoint(vars.value1);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 7,
				"y": 17
			},
			"iconeDone": true,
			"group": 74,
			"done": 2
		},
		{
			"id": "ArenaExigenceGritBonus",
			"name": "Public en folie",
			"desc": "Réussir une exigence confère <ap>::value1::</ap> supplémentaire.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				}
			},
			"script": "",
			"notes": "Hard codé",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 9,
				"y": 12
			},
			"iconeDone": true,
			"group": 74,
			"done": 2
		},
		{
			"id": "ArenaVengeanceBonus",
			"name": "Esprit de vengeance",
			"desc": "Chaque fois qu'un compagnon subit une attaque, il gagne [Fury].",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				]
			},
			"script": "function onDamageTaken(a) {\n\tif (a.target == skill.unit && isPlayer(skill.unit)) {\n\t\tskill.unit.addStatus(Status.Fury);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 74,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 18
			},
			"done": 2
		},
		{
			"id": "ArenaDodgeBonus",
			"name": "État d'alerte",
			"desc": "Chaque fois qu'un compagnon réussit un coup critique, il gagne [AnimalMarkedBonus].",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "AnimalMarkedBonus"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tif (a.unit == skill.unit && isPlayer(skill.unit) && a.isCritical) {\n\t\tskill.unit.addStatus(Status.AnimalMarkedBonus, 1);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 74,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 5,
				"y": 18
			},
			"done": 2
		},
		{
			"id": "ArenaBleedingBonus",
			"name": "Sauvagerie",
			"desc": "Chaque fois qu'un compagnon réussit un coup critique, il inflige [Bleeding].",
			"mode": 2,
			"range": {
				"allowedTargets": 0
			},
			"props": {
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tif (a.unit == skill.unit && isPlayer(skill.unit) && a.isCritical) {\n\t\tif (a.target.addStatus(Status.Bleeding))\n\t\t\tspawnFx();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 74,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 6,
				"y": 18
			},
			"done": 2
		},
		{
			"id": "ArenaInspirationBonus",
			"name": "Exaltation",
			"desc": "Réussir une exigence applique [Galvanization] aux compagnons.",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "Galvanization"
					}
				]
			},
			"script": "function onSuccessExigence() {\n\tfor (f in getPlayerUnits())\n\t\tf.addStatus(Status.Galvanization, 1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 74,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 7,
				"y": 18
			},
			"done": 2
		},
		{
			"id": "ArenaComeBackBonus",
			"name": "Repli stratégique",
			"desc": "Chaque fois qu'un compagnon termine son tour sans avoir infligé de dégâts, l'équipe gagne [Inspiration] pendant ::value1:: round.",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"vars": {
					"value1": 1,
					"hasAttacked": false
				},
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "Inspiration"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tvars.hasAttacked = true;\n}\n\nfunction onEndTurn() {\n\tif (!vars.hasAttacked && isPlayer(skill.unit)) {\n\t\tfor (f in getPlayerUnits()) {\n\t\t\tf.addStatus(Status.Inspiration, 1);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 74,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 8,
				"y": 18
			},
			"done": 2
		},
		{
			"id": "ArenaSupportBonus",
			"name": "L'union fait la force",
			"desc": "Chaque fois qu'un compagnon est supporté, il gagne [Riposte].",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "Riposte"
					}
				]
			},
			"script": "function onStatus(s) {\n\tif( s.unit == skill.unit && isPlayer(skill.unit) && s.kind == Status.Supported) {\n\t\t\ts.unit.addStatus(Status.Riposte, 1);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 74,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 18
			},
			"done": 2
		},
		{
			"id": "ArenaSurroundBonus",
			"name": "Intimidation",
			"desc": "Tant qu'un ennemi est encerclé, il a [Destabilization].",
			"mode": 2,
			"range": {
				"allowedTargets": 0
			},
			"props": {
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "Destabilization"
					}
				]
			},
			"script": "function onStatus(s) {\n\tif( s.unit == skill.unit && !isPlayer(skill.unit) && s.kind == Status.Surrounded) {\n\t\ts.unit.addStatus(Status.Destabilization, 1);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 74,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 18
			},
			"done": 2
		},
		{
			"id": "ArenaEngageBonus",
			"name": "Joute",
			"desc": "Tant qu'un ennemi est engagé, il a [Fragility].",
			"mode": 2,
			"range": {
				"allowedTargets": 0
			},
			"props": {
				"feature": "Alazar1_Update",
				"globalEvents": true,
				"tooltipStatus": [
					{
						"st": "Fragility"
					}
				]
			},
			"script": "function onBeginAction() {\n\tif ( skill.unit.isEngaged() && !isPlayer(skill.unit)) {\n\t\tskill.unit.addStatusPersist(Status.Fragility, skill);\n\t} else skill.unit.cancelStatus(Status.Fragility, skill);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 74,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 10,
				"y": 18
			},
			"done": 2
		},
		{
			"id": "ArenaDisengageBonus",
			"name": "Diversion",
			"desc": "Chaque fois qu'un compagnon se désengage, il effectue une attaque d'opportunité.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"engaged": false
				},
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onBeginAction() {\n\tif (isPlayer(skill.unit)) {\n\t\tif (!skill.unit.isEngaged()) {\n\t\t\tif (vars.engaged){\n\t\t\t\tvars.engaged = false;\n\t\t\t\tskill.unit.cast(Skill.OpportunityAttack, getUnitToAttack(), skill);\n\t\t\t}\n\t\t} else if (!vars.engaged){\n\t\t\tvars.engaged = true;\n\t\t}\n\t}\n}\n\nfunction getUnitToAttack(){\n\tvar fs = getFoeUnits();\n\tvar f = fs[0];\n\tvar d = getDistance(skill.unit, f);\n\tfor (foe in getFoeUnits()){\n\t\tvar dTmp = getDistance(skill.unit, foe);\n\t\tif (dTmp < d){\n\t\t\td = dTmp;\n\t\t\tf = foe;\n\t\t}\n\t}\n\treturn f;\n}",
			"notes": "",
			"iconeDone": true,
			"group": 74,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 13,
				"y": 18
			},
			"done": 1
		},
		{
			"id": "ArenaSkillBonus",
			"name": "Assurance",
			"desc": "Chaque fois qu'un compagnon utilise un ou plusieurs points de Bravoure, il gagne [Protection] pendant ::value1:: round.",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"vars": {
					"value1": 1
				},
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "Protection"
					}
				]
			},
			"script": "function onSkillPlayed(s){\n\tif (isPlayer(s.unit) && s.apCost > 0)\n\t\ts.unit.addStatus(Status.Protection, 1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 74,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 18
			},
			"done": 2
		},
		{
			"id": "ArenaRulePoisonZone",
			"name": "",
			"desc": "Des nuages de poison apparaissent sous toutes les unités chaque fin de round.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onBeginRound() {\n\tfor (u in getUnits()) {\n\t\tif (!u.hasStatus(Status.Champion)) {\n\t\t\tskill.unit.cast(Skill.ArenaRulePoisonZoneSkill, u, skill);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "ArenaRulePoisonZoneSkill",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 1.5,
				"allowedTargets": 4
			},
			"props": {
				"isHeroic": true,
				"specialAnim": "Throw"
			},
			"script": "function onSkill() {\n\tcreateAreaEffect(\"EndRound\", 1, { skillId: Skill.PoisonZone });\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "ArenaRuleRatSpawn",
			"name": "",
			"desc": "Des rats pestiférés sont lâchés dans l'arène chaque fin de round.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onEndRound() {\n\tspawnRenfort(UnitClass.PlaguedRat, 2, false);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "ArenaRulePlagueRidden",
			"name": "",
			"desc": "L'équipe ennemie commence le combat avec un Pestiféré en tant qu'allié.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onInit() {\n\tspawnRenfort(UnitClass.Plagueridden, 1, false);\n}",
			"notes": "",
			"levels": [],
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "G2Arena1RuleHeal",
			"name": "",
			"desc": "À la fin de chaque round, chaque unité ennemie voit sa [Health] devenir égale à celle de son allié ayant le plus de [Health] restante.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onEndRound() {\n\tvar maxHpPercent = 0.;\n\tfor(u in getFoeUnits()) {\n\t\tif( u.health / u.stats.health > maxHpPercent ) {\n\t\t\tmaxHpPercent = u.health / u.stats.health;\n\t\t}\n\t}\n\tfor(u in getFoeUnits()) {\n\t\tvar gain = maxHpPercent * u.stats.health - u.health;\n\t\tu.gainsHealth(ceil(gain));\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "G2Arena1RuleLifeLinked",
			"name": "",
			"desc": "Les unités ennemies gagnent le statut [Arena_Willforce] quand elles ont ::value:: [Health].\nLes alliés gagnent quand toutes les unités ennemies ont le statut [Arena_Willforce].",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value": 1
				},
				"tooltipStatus": [
					{
						"st": "Arena_Willforce"
					}
				],
				"globalEvents": true
			},
			"script": "function onBeginAction() {\n\tfor(t in getFoeUnits()) {\n\t\tif(t.health == vars.value) {\n\t\t\tif(!t.hasStatus(Status.Arena_Willforce)) {\n\t\t\t\tt.addStatus(Status.Arena_Willforce);\n\t\t\t\tspawnFx(t);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tt.cancelStatus(Status.Arena_Willforce);\n\t\t}\n\t}\n\n\tfor(u in getFoeUnits()) {\n\t\tif(!u.hasStatus(Status.Arena_Willforce)) {\n\t\t\treturn;\n\t\t}\n\t}\n\twin(true);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "G2Arena1RuleExigence",
			"name": "",
			"desc": "Échouer à une éxigence du public soigne toutes les unités ennemies de ::value1::% de leur [Health] maximum.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 20
				}
			},
			"script": "function onFailExigence() {\n\tfor(u in getFoeUnits()) {\n\t\tif(u.hasStatus(Status.Dying)) {\n\t\t\tu.cancelStatus(Status.Dying);\n\t\t}\n\t\tu.gainsHealth(ceil(u.stats.maxHealth * (vars.value1 / 100.) ) );\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "G2Arena2RuleRage",
			"name": "",
			"desc": "Les unités ennemies gagnent le statut [AnimalMarkedBonus] lorsqu’elles ont le statut [Burning].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "AnimalMarkedBonus"
					},
					{
						"st": "Burning"
					}
				]
			},
			"script": "function onStatus(s) {\n\tif( s.kind == Status.Burning ) {\n\t\tif( isFoe(s.unit) && !s.unit.hasStatus(Status.AnimalMarkedBonus) ) {\n\t\t\ts.unit.addStatus(Status.AnimalMarkedBonus);\n\t\t}\n\t}\n}\n\nfunction onStatusRemoved(s) {\n\tif( s.kind == Status.AnimalMarkedBonus ) {\n\t\tif( isFoe(s.unit) && !s.unit.hasStatus(Status.AnimalMarkedBonus) && s.unit.hasStatus(Status.Burning) ) {\n\t\t\ts.unit.addStatus(Status.AnimalMarkedBonus);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "G2Arena2RuleVulnerability",
			"name": "",
			"desc": "Les unités alliées gagnent le statut [Fragility] lorsqu'ils ont le statut [Burning].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fragility"
					},
					{
						"st": "Burning"
					}
				]
			},
			"script": "function onBeginAction() {\n\tfor(u in getPlayerUnits()) {\n\t\tif(u.hasStatus(Status.Burning) && !u.hasStatus(Status.Fragility)) {\n\t\t\tu.addStatusPersist(Status.Fragility, skill);\n\t\t}\n\t\telse if(!u.hasStatus(Status.Burning) && u.hasStatus(Status.Fragility)) {\n\t\t\tu.cancelStatus(Status.Fragility, skill);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "G2Arena2RuleExigence",
			"name": "",
			"desc": "Quand une unité passe [Arena_Dying], le public lance des Fioles Incendiaires sur une unité aléatoire de l'équipe adverse.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Arena_Dying"
					}
				]
			},
			"script": "function onStatus(a) {\n\tif(a.kind != Status.Arena_Dying) {\n\t\treturn;\n\t}\n\n\tvar units = [];\n\tfor(u in getUnits()) {\n\t\tif(u.side != a.unit.side) {\n\t\t\tunits.push(u);\n\t\t}\n\t}\n\n\tif(units.length > 0) {\n\t\tvar target = units[randInt(0, units.length-1)];\n\t\tcast(Skill.G2Arena2IncendiaryFlask, { unit : target }, skill);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "G2Arena2IncendiaryFlask",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 1.5,
				"allowedTargets": 4,
				"baseDistance": 10000
			},
			"props": {},
			"script": "function onSkill() {\n\tcreateAreaEffect(\"Immediate\", 1, { skillId: Skill.FireZone });\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "H1ArenaRuleVulnerability",
			"name": "",
			"desc": "Chaque fois qu'un animal adverse s'engage, il applique [Vulnerability].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Vulnerability"
					}
				],
				"vars": {
					"engaged": false
				}
			},
			"script": "function onBeginAction() {\n\tif( isFoeAnimal() && !skill.unit.isEngaged() ) {\n\t\tvars.engaged = false;\n\t}\n}\n\nfunction onSkillPlayed(s) {\n\tif( isFoeAnimal() && !vars.engaged && skill.unit.isEngaged() ) {\n\t\tvars.engaged = true;\n\t\tfor (t in s.getTargets())\n\t\t\tt.target.addStatus(Status.Vulnerability);\n\t}\n}\n\nfunction isFoeAnimal(){\n\treturn isFoe(skill.unit) && skill.unit.isAnimal;\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "H1ArenaRuleOpportunity",
			"name": "",
			"desc": "Chaque fois qu'une unité adverse inflige un coup critique, un animal adverse effectue une attaque d'opportunité si possible.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "OpportunityAttack"
					}
				]
			},
			"script": "function onDamageDealt(a) {\n\tif( a.isCritical && isFoe(a.unit) ) {\n\t\tvar animalTmp : battle.skill.UnitView = null;\n\t\tfor( f in getFoeUnits() ) {\n\t\t\tif( f.isAnimal && (animalTmp == null || animalTmp.health < f.health) && f.isMelee(a.target) )\n\t\t\t\tanimalTmp = f;\n\t\t}\n\t\tif (animalTmp != null)\n\t\t\tanimalTmp.opportunityAttack(a.target, null);\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "H1ArenaRulePlayAgain",
			"name": "",
			"desc": "Chaque fois qu'une unité adverse est mise hors-de-combat, l'animal adverse avec le plus de [Health] peut rejouer ce round.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onStatus(s){\n\tif (s.kind == Status.Arena_Dying && isFoe(s.unit)){\n\t\tvar animalTmp : battle.skill.UnitView = null;\n\t\tfor (f in getFoeUnits())\n\t\t\tif( f.isAnimal && f != s.unit && (animalTmp == null || animalTmp.health < f.health) && !f.hasStatus(Status.Replay) )\n\t\t\t\tanimalTmp = f;\n\t\tif (animalTmp != null){\n\t\t\tanimalTmp.addStatus(Status.Replay);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "E1ArenaRuleRandomBonus",
			"name": "",
			"desc": "Au début de chaque round, toutes les unités gagnent un bonus aléatoire pendant ::value1:: round.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 1
				}
			},
			"script": "function onBeginRound() {\n\tfor( u in getUnits() ) {\n\t\tvar bonus = [Status.Fury, Status.Brutality, Status.Protection, Status.Inspiration, Status.Deflection, Status.Riposte, Status.Berserk, Status.Relentlessness];\n\t\tbonus = bonus.filter( function(s) { return !u.statusResist(s) && !u.hasStatus(s); } );\n\t\tif( bonus.length > 0 ) {\n\t\t\tu.addStatus(bonus[randInt(0, bonus.length - 1)], vars.value1);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "E1ArenaRuleRemovedBonusHeal",
			"name": "",
			"desc": "Quand un bonus appliqué sur une unité adverse est retiré, elle se soigne de ::value1::% de sa [Health] maximum.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 10
				}
			},
			"script": "function onStatusRemoved(s){\n\tif (s.status.isBonus && isFoe(s.unit))\n\t\ts.unit.gainsHealth(ceil(s.unit.stats.health * vars.value1 / 100), null);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "E1ArenaRuleChallengeLegionary",
			"name": "",
			"desc": "Un légionnaire rejoint le groupe adverse chaque fois qu'une Exigence du public est échouée.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onFailExigence() {\n\tspawnRenfort(UnitClass.Legionary, 1, false);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "A1ArenaRuleZones",
			"name": "",
			"desc": "Des flaques de vapeurs sont répandues dans l'arène et améliorent les unités adverses au début de chaque round.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true
			},
			"script": "function onBeginRound() {\n\ttrace(\"hi\");\n\tfor( u in getFoeUnits() ) {\n\t\ttrace(\"hi2\");\n\t\tif( u.hasStatus(Status.A1ArenaRedGazZone) ) {\n\t\t\ttrace(\"hi3\");\n\t\t\tu.addStatus(Status.A1ArenaRedGaz);\n\t\t\tu.cancelStatus(Status.A1ArenaBlueGaz);\n\t\t}\n\t}\n\tfor( u in getFoeUnits() ) {\n\t\ttrace(\"hiblue2\");\n\t\tif( u.hasStatus(Status.A1ArenaBlueGazZone) ) {\n\t\t\ttrace(\"hiblue3\");\n\t\t\tu.addStatus(Status.A1ArenaBlueGaz);\n\t\t\tu.cancelStatus(Status.A1ArenaRedGaz);\n\t\t}\n\t}\n}",
			"notes": "Fait dans le prefab de l'arena",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "A1ArenaRuleRoot",
			"name": "",
			"desc": "Des fioles sont lancées sur les unités du joueur à chaque fin de round, les immobilisant le round suivant.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onBeginRound(){\n\tfor (u in getPlayerUnits())\n\t\tcast(Skill.A1ArenaRuleRootSkill, {unit : u}, skill);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 1
		},
		{
			"id": "A1ArenaRuleRootSkill",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 1
			},
			"props": {},
			"script": "function onSkill() {\n\tcreateAreaEffect(\"EndRound\", 0, { skillId: Skill.A1ArenaRuleRootPot });\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 1
		},
		{
			"id": "A1ArenaRuleRootPot",
			"name": "",
			"desc": "Une fiole immobilisante sera jetée ici.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 1
			},
			"props": {},
			"script": "function onSkill() {\n\tfor(t in skill.getTargets())\n\t\tif (isPlayer(t.target))\n\t\t\tt.target.addStatus(Status.Immobile);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"icon": {
				"file": "ui/Icons/BattleIcons_03_96PX.png",
				"size": 96,
				"x": 16,
				"y": 0
			},
			"done": 1
		},
		{
			"id": "A1ArenaRuleBear",
			"name": "",
			"desc": "Au début du second round, un ours des neiges est lâché dans l'arène.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"value1": 0,
					"check": false
				}
			},
			"script": "function onBeginRound() {\n\tif( vars.value1 == 2 && !vars.check ) {\n\t\tspawnRenfort(UnitClass.WhiteBear, 1, false);\n\t\tvars.check = true;\n\t} else if ( !vars.check ) {\n\t\tvars.value1++;\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 75,
			"done": 2
		},
		{
			"id": "ArenaUnitToEngage",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true
			},
			"script": "function onInit() {\n\tvar units = getFoeUnits();\n\tvar selectedUnit = units[0];\n\tselectedUnit.addStatus(Status.Arena_DemandTarget, 1);\n}\n\nfunction onEndRound() {\n\tvar isAlive = false;\n\tfor( u in getFoeUnits() ) {\n\t\tif( u.hasStatus(Status.Arena_DemandTarget) ) {\n\t\t\tisAlive = true;\n\t\t\tif( u.isEngaged()) {\n\t\t\t\tsuccessObjective();\n\t\t\t} else {\n\t\t\tfailObjective();\n\t\t\t}\n\t\t}\n\t}\n\tif(!isAlive){\n\t\tsuccessObjective();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 76,
			"done": 2
		},
		{
			"id": "ArenaUnitNoDamage",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true
			},
			"script": "function onInit() {\n\tvar units = getPlayerUnits();\n\tvar selectedUnit = units[randInt(0, units.length-1)];\n\tselectedUnit.addStatus(Status.Arena_DemandTarget, 1);\n}\n\nfunction onDamageTaken(a) {\n\tif (a.target.hasStatus(Status.Arena_DemandTarget)) {\n\t\tfailObjective();\n\t}\n}\n\nfunction onEndRound() {\n\tvar found = false;\n\tfor ( u in getPlayerUnits() ) {\n\t\tif (u.hasStatus(Status.Arena_DemandTarget)) {\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (found) {\n\t\tsuccessObjective();\n\t} else {\n\t\tfailObjective();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 76,
			"done": 2
		},
		{
			"id": "ArenaUnitToDamage",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"feature": "HideInCheatMenu"
			},
			"script": "function onInit() {\n\tvar units = getFoeUnits();\n\tvar selectedUnit = units[randInt(0, units.length-1)];\n\tselectedUnit.addStatus(Status.Arena_DemandTarget, 1);\n}\n\nfunction onDamageTaken(a) {\n\tif (a.target.hasStatus(Status.Arena_DemandTarget)) {\n\t\tsuccessObjective();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 76,
			"done": 2
		},
		{
			"id": "ArenaTwoCrits",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"feature": "HideInCheatMenu"
			},
			"script": "function onDamageDealt(a) {\n\tif (a.isCritical && isPlayer(a.unit)) {\n\t\tif (!a.unit.hasStatus(Status.Arena_DemandAlreadyContribute)) {\n\t\t\tincrementObjective();\n\t\t\ta.unit.addStatus(Status.Arena_DemandAlreadyContribute);\n\t\t}\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 76,
			"done": 2
		},
		{
			"id": "ArenaUnitToKill",
			"name": "",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"feature": "HideInCheatMenu"
			},
			"script": "function onInit() {\n\tvar units = [];\n\tfor (u in getFoeUnits()) {\n\t\tif ( !u.hasStatus(Status.Champion) ) {\n\t\t\tunits.push(u);\n\t\t}\n\t}\n\tvar selectedUnit = units[randInt(0, units.length-1)];\n\tselectedUnit.addStatus(Status.Arena_DemandTarget, 1);\n}\n\nfunction onDeath(a) {\n\tif( a.target.hasStatus(Status.Arena_DemandTarget) ) {\n\t\tsuccessObjective();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 76,
			"done": 2
		},
		{
			"id": "ArenaAllyContact",
			"name": "",
			"desc": "Chaque compagnon doit finir son tour adjacent à un allié.",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"globalEvents": true,
				"vars": {
					"melee": false
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onBeginRound() {\n\tvars.melee = false;\n}\n\nfunction onEndTurn() {\n\tif (isPlayer(skill.unit)) {\n\t\tfor (u in getAllies(skill.unit)) {\n\t\t\tif (u.isMelee(skill.unit)) {\n\t\t\t\tvars.melee = true;\n\t\t\t}\n\t\t}\n\t\tif (vars.melee) {\n\t\t\tif (!skill.unit.hasStatus(Status.Arena_DemandAlreadyContribute)) {\n\t\t\t\tskill.unit.addStatus(Status.Arena_DemandAlreadyContribute);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfailObjective();\n\t\t}\n\t}\n}\n\nfunction onEndRound() {\n\tvar isGood = true;\n\tfor (u in getPlayerUnits()) {\n\t\tif (u.isAlive() && !u.hasStatus(Status.Arena_DemandAlreadyContribute)) {\n\t\t\tfailObjective();\n\t\t\tisGood = false;\n\t\t}\n\t}\n\tif (isGood) {\n\t\tsuccessObjective();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 76,
			"done": 2
		},
		{
			"id": "ArenaEnemyContact",
			"name": "",
			"desc": "Chaque compagnon doit finir son tour adjacent à un ennemi.",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"globalEvents": true,
				"vars": {
					"melee": false
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onBeginRound() {\n\tvars.melee = false;\n}\n\nfunction onEndTurn() {\n\tif (isPlayer(skill.unit)) {\n\t\tfor (u in getFoes(skill.unit)) {\n\t\t\tif (u.isMelee(skill.unit)) {\n\t\t\t\tvars.melee = true;\n\t\t\t}\n\t\t}\n\t\tif (vars.melee) {\n\n\t\t\tif (!skill.unit.hasStatus(Status.Arena_DemandAlreadyContribute)) {\n\t\t\t\tskill.unit.addStatus(Status.Arena_DemandAlreadyContribute);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfailObjective();\n\t\t}\n\t}\n}\n\nfunction onEndRound() {\n\tvar isGood = true;\n\tfor (u in getPlayerUnits()) {\n\t\tif (u.isAlive() && !u.hasStatus(Status.Arena_DemandAlreadyContribute)) {\n\t\t\tfailObjective();\n\t\t\tisGood = false;\n\t\t}\n\t}\n\tif (isGood) {\n\t\tsuccessObjective();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 76,
			"done": 2
		},
		{
			"id": "ArenaNoFocus",
			"name": "",
			"desc": "Ne pas attaquer deux fois la même unité.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"feature": "Alazar1_Update"
			},
			"script": "function onDamageDealt(a) {\n\tif (isPlayer(a.unit)) {\n\t\tif (!isPlayer(a.target)) {\n\t\t\tif (a.target.hasStatus(Status.Arena_Hit)) {\n\t\t\t\tfailObjective();\n\t\t\t}\n\t\t\ta.target.addStatus(Status.Arena_Hit);\n\t\t\ta.target.addStatus(Status.Arena_DemandAlreadyContribute);\n\t\t}\n\t}\n}\n\nfunction onEndRound() {\n\tsuccessObjective();\n}",
			"notes": "",
			"iconeDone": true,
			"group": 76,
			"done": 2
		},
		{
			"id": "ArenaEveryDamage",
			"name": "",
			"desc": "Tous les ennemis doivent subir des dégâts.",
			"mode": 2,
			"range": {
				"allowedTargets": 0
			},
			"props": {
				"globalEvents": true,
				"feature": "Alazar1_Update"
			},
			"script": "function onDamageTaken(a) {\n\tif (isPlayer(a.unit)) {\n\t\tif (!isPlayer(a.target)) {\n\t\t\tif (!a.target.hasStatus(Status.Arena_Hit)) {\n\t\t\t\ta.target.addStatus(Status.Arena_Hit);\n\t\t\t\ta.target.addStatus(Status.Arena_DemandAlreadyContribute);\n\t\t\t}\n\t\t}\n\t}\n\tvar isGood = true;\n\tfor (u in getFoeUnits()) {\n\t\tif (u.isAlive() && !u.hasStatus(Status.Arena_Hit)) {\n\t\t\tisGood = false;\n\t\t}\n\t}\n\tif (isGood) {\n\t\tsuccessObjective();\n\t}\n}\n\nfunction onEndRound() {\n\tvar isGood = true;\n\tfor (u in getFoeUnits()) {\n\t\tif (u.isAlive() && !u.hasStatus(Status.Arena_Hit)) {\n\t\t\tisGood = false;\n\t\t}\n\t}\n\tif (isGood) {\n\t\tsuccessObjective();\n\t}\n\telse {\n\t\tfailObjective();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 76,
			"done": 2
		},
		{
			"id": "ArenaNoMovement",
			"name": "",
			"desc": "[Cible alliée] ne doit pas se déplacer.",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"globalEvents": true,
				"feature": "Alazar1_Update"
			},
			"script": "function onInit() {\n\tvar units = getPlayerUnits();\n\tvar selectedUnit = units[randInt(0, units.length-1)];\n\tselectedUnit.addStatus(Status.Arena_DemandTarget, 1);\n}\n\nfunction onMove(a) {\n\tif (a.unit.hasStatus(Status.Arena_DemandTarget)) {\n\t\tfailObjective();\n\t}\n}\n\nfunction onEndRound() {\n\tsuccessObjective();\n}",
			"notes": "",
			"iconeDone": true,
			"group": 76,
			"done": 2
		},
		{
			"id": "ArenaEveryMovement",
			"name": "",
			"desc": "Chaque compagnon doit se déplacer.",
			"mode": 2,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"globalEvents": true,
				"vars": {
					"hasMoved": false
				},
				"feature": "Alazar1_Update"
			},
			"script": "function onBeginRound() {\n}\n\nfunction onMove(m) {\n\tif (isPlayer(skill.unit)) {\n\t\tif (!m.unit.hasStatus(Status.Arena_DemandAlreadyContribute)) {\n\t\t\tm.unit.addStatus(Status.Arena_DemandAlreadyContribute);\n\t\t}\n\t}\n}\n\nfunction onEndTurn() {\n\tif (isPlayer(skill.unit)) {\n\t\tif (!skill.unit.hasStatus(Status.Arena_DemandAlreadyContribute)) {\n\t\t\tfailObjective();\n\t\t}\n\t}\n}\n\nfunction onEndRound() {\n\tvar isGood = true;\n\tfor (u in getPlayerUnits()) {\n\t\tif (u.isAlive() && !u.hasStatus(Status.Arena_DemandAlreadyContribute)) {\n\t\t\tfailObjective();\n\t\t\tisGood = false;\n\t\t}\n\t}\n\tif (isGood) {\n\t\tsuccessObjective();\n\t}\n}",
			"notes": "",
			"iconeDone": true,
			"group": 76,
			"done": 2
		},
		{
			"id": "PestiferedFromCellingZone",
			"name": "",
			"desc": "",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 1.5,
				"allowedTargets": 6
			},
			"props": {
				"castFx": "prefabs/fx/environment/CellingFall/CellingFall_Sign.fx"
			},
			"script": "function onSkill() {\n\tcreateEvent(Skill.PestiferedFromCelling, 1);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 77,
			"done": 2
		},
		{
			"id": "PestiferedFromCelling",
			"name": "Effondrement",
			"desc": "Un pestiféré s'apprête à traverser le plafond !",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 1.5,
				"allowedTargets": 4
			},
			"props": {
				"castFx": "prefabs/fx/environment/CellingFall/CellingFall.fx",
				"flags": 2
			},
			"script": "function onEval(a) {\n\ta.dmg = ceil(a.target.health * 0.5);\n}\n\nfunction onPostSkill() {\n\tprocessEvent(\"PestiferedFromCelling\");\n}",
			"notes": "",
			"minDmg": 5,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 7
			},
			"iconeDone": true,
			"group": 77,
			"done": 2
		},
		{
			"id": "SportTeamLeader",
			"name": "Nommer Ouvreur",
			"desc": "L'ouvreur reçoit le ballon et engage la partie.",
			"mode": 4,
			"range": {},
			"props": {
				"flags": 8,
				"defaultAction": false
			},
			"script": "function onSkill() {\n\tsetTeamLeader();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 9
			},
			"iconeDone": true,
			"group": 78,
			"done": 2
		},
		{
			"id": "SportRun",
			"name": "Courir",
			"desc": "L'unité charge en ligne droite.\n\n<idesc>SportTackle</idesc>\n<idesc>SportDodge</idesc>",
			"mode": 3,
			"range": {
				"flags": 1,
				"baseDistance": 10,
				"allowedTargets": 6
			},
			"props": {
				"defaultAction": false
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 15,
				"y": 17
			},
			"iconeDone": true,
			"group": 78,
			"done": 2
		},
		{
			"id": "SportPass",
			"name": "Passer",
			"desc": "Tente de faire une passe à un allié.",
			"mode": 1,
			"range": {
				"baseDistance": 0,
				"allowedTargets": 1
			},
			"props": {
				"defaultAction": true,
				"specialAnim": "Throw",
				"noDamage": true,
				"extraFx": "prefabs/fx/activity/Rouste/ThrowBall.fx"
			},
			"script": "function onSkill() {\n\tmakePass();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 12,
				"y": 9
			},
			"iconeDone": true,
			"group": 78,
			"done": 2
		},
		{
			"id": "SportKick",
			"name": "Tirer",
			"desc": "Tire une chandelle pour dégager la balle.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 0,
				"allowedTargets": 6,
				"baseDistance": 0,
				"typeModel": "prefabs/huds/dropZone.prefab",
				"flags": 8
			},
			"props": {
				"defaultAction": true,
				"specialAnim": "Kick",
				"extraFx": "prefabs/fx/activity/Rouste/Kick.fx"
			},
			"script": "function onSkill() {\n\tkick();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 17,
				"y": 17
			},
			"iconeDone": true,
			"group": 78,
			"done": 2
		},
		{
			"id": "SportPunch",
			"name": "Avoiner",
			"desc": "Frappe un adversaire.\nA une chance de mettre l'adversaire à terre.",
			"mode": 0,
			"range": {
				"allowedTargets": 0
			},
			"props": {
				"vars": {
					"value1": 50
				},
				"useWithoutWeapon": true,
				"specialAnim": "Punch",
				"dmgAttribute": 0,
				"isAttack": true,
				"defaultAction": true,
				"preventEngage": true,
				"orientTarget": true
			},
			"script": "function onEval(a) {\n\tif(a.target.hasStatus(Status.SportDown))\n\t\tdontAllow();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 16,
				"y": 17
			},
			"minDmg": 0,
			"maxDmg": 0,
			"iconeDone": true,
			"group": 78,
			"done": 2
		},
		{
			"id": "SportStandUp",
			"name": "Se relever",
			"desc": "L'unité se relève.",
			"mode": 4,
			"range": {},
			"props": {
				"defaultAction": false
			},
			"script": "function onSkill() {\n\tstandUp(skill.unit);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 9,
				"y": 8
			},
			"iconeDone": true,
			"group": 78,
			"done": 2
		},
		{
			"id": "SportAssist",
			"name": "Assister",
			"desc": "Relève un allié.",
			"mode": 0,
			"range": {
				"allowedTargets": 1
			},
			"props": {
				"useWithoutWeapon": true,
				"defaultAction": true,
				"feature": "Alazar1_Update"
			},
			"script": "function onEval(a) {\n\tif(!a.target.hasStatus(Status.SportDown))\n\t\tdontAllow();\n}\n\nfunction onSkill() {\n\tstandUp(skill.target);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 78,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 0,
				"y": 16
			},
			"done": 2
		},
		{
			"id": "SportGuard",
			"name": "Garder",
			"desc": "Jusqu'à son prochain déplacement, cette unité gagne [SportGuard].",
			"mode": 0,
			"range": {
				"allowedTargets": 3
			},
			"props": {
				"feature": "Alazar1_Update",
				"tooltipStatus": [
					{
						"st": "SportGuard"
					}
				]
			},
			"script": "function onSkill() {\n\tskill.unit.addStatus(Status.SportGuard);\n}",
			"notes": "",
			"iconeDone": true,
			"group": 78,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 1,
				"y": 16
			},
			"done": 2
		},
		{
			"id": "SportDodge",
			"name": "Esquive",
			"desc": "Cette unité tentera d'esquiver les tacles d'adversaires à proximité.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 10,
				"y": 9
			},
			"iconeDone": true,
			"group": 78,
			"done": 2
		},
		{
			"id": "SportTackle",
			"name": "Tacle",
			"desc": "Cette unité tentera de mettre au sol tout adversaire passant à portée.",
			"mode": 2,
			"range": {
				"radius": 2
			},
			"props": {},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 13,
				"y": 9
			},
			"iconeDone": true,
			"group": 78,
			"done": 2
		},
		{
			"id": "SportFendOff",
			"name": "Raffuter",
			"desc": "Cette unité tentera de mettre au sol un adversaire dans sa trajectoire de course.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 11,
				"y": 9
			},
			"iconeDone": true,
			"group": 78,
			"done": 2
		},
		{
			"id": "SportReplay",
			"name": "Rejouer",
			"desc": "Cette unité pourra rejouer si elle reçoit le ballon.",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 78,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 2,
				"y": 16
			},
			"done": 2
		},
		{
			"id": "SportAnimalCharge",
			"name": "Charge",
			"desc": "Charge en ligne droite, mettant à terre toute les unités sur son passage.",
			"mode": 3,
			"range": {
				"flags": 1,
				"baseDistance": 12,
				"allowedTargets": 6
			},
			"props": {
				"dmgAttribute": 0,
				"feature": "Alazar1_Update"
			},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 78,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 4,
				"y": 19
			},
			"done": 2
		},
		{
			"id": "SportBallDrop",
			"name": "Zone de chute",
			"desc": "Le ballon retombera quelque part dans la zone d'effet.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 4,
				"baseDistance": 100000
			},
			"props": {},
			"script": "function onSkill() {}",
			"notes": "",
			"icon": {
				"file": "ui/elements/battle/player_timeline.png",
				"size": 70,
				"x": 1,
				"y": 1
			},
			"iconeDone": true,
			"group": 78,
			"done": 2
		},
		{
			"id": "CelestiumSearch",
			"name": "Examiner la relique",
			"desc": "L'unité travaille sur la relique du Célestium.\n\nNécessite d'être à proximité de la relique.",
			"mode": 4,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 79,
			"done": 2,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 16,
				"y": 18
			}
		},
		{
			"id": "CelestiumRepair",
			"name": "Réparer la relique",
			"desc": "L'unité répare la relique du Célestium.\n\nNécessite d'être à proximité de la relique.",
			"mode": 4,
			"range": {},
			"props": {},
			"script": "",
			"notes": "",
			"iconeDone": true,
			"group": 79,
			"done": 2,
			"icon": {
				"file": "ui/Icons/BattleIcons_02_96PX.png",
				"size": 96,
				"x": 18,
				"y": 18
			}
		},
		{
			"id": "Gouge",
			"name": "Suriner",
			"desc": "[DMG] à la cible avec [VALUE]% de chances de l'<st>étourdir</st>.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 1,
				"vars": {
					"chances": 50,
					"stunned": false
				}
			},
			"script": "function onHit(a) {\n\tif( proba(vars.chances) ) {\n\ta.target.addStatus(Status.Stun);\n\t}\n\tif( a.target.hasStatus(Status.Stunned) ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"minDmg": 2,
			"maxDmg": 4,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"group": 80,
			"done": 2
		},
		{
			"id": "Bladestormzzz",
			"name": "Tempête de lame",
			"desc": "Inflige [DMG] à tous les ennemis dans la zone. Attaque ::value1:: fois supplémentaire si plusieurs ennemis sont adjacents.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 2,
				"allowedTargets": 5,
				"baseDistance": 0
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"value1": 1,
					"value2": 2
				},
				"isAttack": true
			},
			"script": "function onSkill() {\n\tvar enemies = 0;\n\tvar count = 1;\n\tfor( u in getFoes(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) ) {\n\t\tenemies++;\n\t\t}\n\t}\n\tif( enemies >= 2 ) {\n\t\tcount += vars.value1;\n\t}\n\tfor( i in 0...count ) {\n\t\t\tattack();\n\t}\n}",
			"notes": "",
			"minDmg": 4,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"group": 80,
			"done": 2
		},
		{
			"id": "Thrashing",
			"name": "Raclée",
			"desc": "Si stun deal",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"scaledValue": 5,
				"scaledValueAttribute": 0
			},
			"script": "function onEval(a) {\n\tif( a.target.hasStatus(Status.Stun) ) {\n\t\ta.dmg += skill.value;\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"minDmg": 3,
			"maxDmg": 5,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Sweep",
			"name": "Balayage",
			"desc": "[DMG] aux unités dans une zone et [VALUE] de plus à chaque unité <st>étourdie</st>.",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 3,
				"angle": 180,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"scaledValue": 10,
				"scaledValueAttribute": 0
			},
			"script": "function onEval(a) {\n\tif( a.target.hasStatus(Status.Stun) )\n\t\ta.dmg += skill.value;\n}",
			"notes": "Bear ",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"minDmg": 4,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idee6",
			"name": "Coup Puissant",
			"desc": "[DMG] dans la zone.\nSi l'attaque inflige au moins un coup critique, <st>désoriente</st> les unités touchées.",
			"mode": 5,
			"range": {
				"type": 1,
				"radius": 1,
				"angle": 120
			},
			"props": {
				"dmgAttribute": 0,
				"value": 1
			},
			"script": "function onDamage(a) {\n\tif( a.isCritical)\n\t\ta.target.addStatus(Status.Dazed);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"minDmg": 6,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idee15",
			"name": "Soif de sang",
			"desc": "Si la cible <st>saigne</st>, l'unité boit de son sang et regagne [VALUE] [Health].",
			"mode": 0,
			"range": {},
			"props": {
				"value": 10
			},
			"script": "function onSkill() {\n//\tif( skill.target.hasStatus(Status.Bleeding) )\n\t\tskill.unit.gainsHealth(skill.value);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idee19",
			"name": "Mots de la Croisade",
			"desc": "Crée une zone. Tant que cette unité ou ses alliés sont dans la zone, ils gagnent Rage.",
			"mode": 5,
			"range": {
				"type": 0,
				"angle": 90,
				"radius": 5,
				"baseDistance": 10
			},
			"props": {
				"dmgAttribute": 1,
				"globalEvents": true,
				"needDisengaged": true,
				"vars": {
					"flag": false
				}
			},
			"script": "function onSkill() {\n\tif( vars.flag == false ) {\n\t\tcreateZone();\n\t\treturn;\n\t}\n\tcancelZone();\n}\nfunction onMoveEvent(m) {\n\tm.unit.addStatus(Status.Angry, 1, true);\n}\nfunction onMove(m) {\n\tif( m.unit.side != skill.unit.side ) return;\n\tvar z = getZone();\n\tif( z == null ) return;\n\tm.addZoneEvent(z,onMoveEvent);\n}",
			"notes": "Bannière !",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"minDmg": 5,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idee24",
			"name": "Heurt de bouclier",
			"desc": "[DMG] à la cible puis retire [VALUE] statuts positifs aléatoires à la cible.",
			"mode": 0,
			"range": {},
			"props": {
				"dmgAttribute": 0,
				"scaledValue": 1,
				"scaledValueAttribute": 1,
				"useWithoutWeapon": true,
				"vars": {
					"guarddmg": 1
				}
			},
			"script": "function onDamage(a) {\n\t\tvar count = 0;\n\t\tfor( s in a.target.getAllStatus() ) {\n\t\t\tif( !s.isBonus ) continue;\n\t\t\ts.cancel();\n\t\t\tcount++;\n\t\t\tif( count == skill.value ) break;\n\t\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"minDmg": 3,
			"maxDmg": 5,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idee28",
			"name": "Interception",
			"desc": "L'unité se désengage librement et charge en ligne droite. Toutes les unités sur le chemin sont <st>POUSSÉES</st> sur [VALUE]m.",
			"mode": 3,
			"range": {
				"baseDistance": 5
			},
			"props": {
				"value": 3,
				"dmgAttribute": 0
			},
			"script": "function onHit(a) {\n\ta.target.addStatus(Status.Vulnerability);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"minDmg": 2,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idee33",
			"name": "Levée de bouclier",
			"desc": "Cible une zone et se <st>concentre</st>. Au début du prochain Round, cette unité et tous ses alliés dans la zone gagnent [VALUE] [Guard].",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"allowedTargets": 2,
				"baseDistance": 0
			},
			"props": {
				"scaledValue": 4,
				"scaledValueAttribute": 0,
				"needDisengaged": true
			},
			"script": "function onSkill() {\n\tif( waitNextTurn() ) {\n\t\tprepareAttack();\n\t\tcreateZone();\n\t\tskill.unit.addStatus(Status.Targeting);\n\t\treturn;\n\t}\n\tfor(t in skill.getTargets() )\n\t\tt.target.addStatus(Status.ExtraGuard, skill.value);\n\tcancelZone();\n}",
			"notes": "Bonus à retardement",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idee41",
			"name": "Soif de sang",
			"desc": "DMG en plus si meurt. Dmg en plus si tue.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true,
				"value": 5,
				"useWithoutWeapon": true
			},
			"script": "function onDeath(a) {\n\tif( a.target.side != skill.unit.side ) {\n\t\tskill.unit.addSkillEffect(skill,Attribute.DamageBonusPercent,skill.value);\n\t}\n\tif( a.unit == skill.unit && a.target.side != skill.unit.side ) {\n\t\tskill.unit.addSkillEffect(skill,Attribute.DamageBonusPercent,skill.value);\n\t}\n}",
			"notes": "OK",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Judgement",
			"name": "Jugement",
			"desc": "L'unité bascule entre Aura de Pitié et Aura de Vindicte.",
			"mode": 4,
			"range": {},
			"props": {
				"vars": {
					"aura": true
				}
			},
			"script": "function onBeginRound() {\n\tif( !skill.unit.hasStatus(Status.RighteousnessAura) && !skill.unit.hasStatus(Status.RetributionAura) ) {\n\t\tskill.unit.addStatus(Status.RighteousnessAura);\n\t}\n}\nfunction onSkill() {\n\tif( skill.unit.consumeStatus(Status.RighteousnessAura) ) {\n\t\tskill.unit.addStatus(Status.RetributionAura);\n\t} else {\n\t\tskill.unit.addStatus(Status.RighteousnessAura);\n\t\tskill.unit.consumeStatus(Status.RetributionAura);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idea213",
			"name": "Tir de recul",
			"desc": "Bleed & poison trigger",
			"mode": 1,
			"range": {
				"minDistance": 1,
				"baseDistance": 8
			},
			"props": {
				"dmgAttribute": 1,
				"value": 2,
				"needDisengaged": true,
				"vars": {
					"poisondamage": 1,
					"bleedingdamage": 3
				}
			},
			"script": "function onDamage(a) {\n\ta.target.pushback({ unit : skill.unit }, skill.value);\n\tif( skill.level >= 3 ) {\n\t\tfor( s in a.target.getAllStatus() )\n\t\tif( s.kind == Status.Poison ) {\n\t\t\ta.target.looseLife(skill, s.count * vars.poisondamage);\n\t\t}\n\t\tfor( st in a.target.getAllStatus() )\n\t\tif( st.kind == Status.Bleeding ) {\n\t\t\ta.target.looseLife(skill, st.count * vars.bleedingdamage);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"minDmg": 11,
			"maxDmg": 14,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idea214",
			"name": "Orgueil",
			"desc": "Perd ::health:: [Health] et gagne [VALUE] [Power] si une compétence à infligé des dégâts.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"health": 3
				},
				"value": 3,
				"useWithoutWeapon": true
			},
			"script": "function onDamageDealt(a) {\n\t\tskill.unit.looseLife(skill, vars.health);\n\t\tskill.unit.addSkillEffect(skill,Attribute.Power,skill.value);\n}",
			"notes": "Frenzy",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idea248",
			"name": "Solution acide",
			"desc": "Les compétences ont ::chances::% de chances de <st>fragiliser</st> les ennemis. + détruire garde",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"chances": 20
				},
				"useWithoutWeapon": true
			},
			"script": "function onSkillPlayed(s) {\n\tfor(t in s.getTargets() ) {\n\t\tif( proba(vars.chances) ) {\n\t\t\tt.target.addStatus(Status.Fragility);\n\t\t}\n\t\tif( proba(vars.chances) ) {\n\t\t\tt.target.gainsGuard(-t.target.guard);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idea253",
			"name": "Hémorragie",
			"desc": "Si la cible saigne, la première attaque du tour permet à <st>saignement</st> d'infliger ses dégâts.",
			"mode": 2,
			"range": {},
			"props": {
				"useWithoutWeapon": true,
				"value": 50,
				"globalEvents": true
			},
			"script": "function onDamageDealt(a) {\n\tif( a.target.hasStatus(Status.Bleeding) && proba(skill.value) && a.unit == skill.unit ) {\n\t\ta.target.looseLife(skill, 10);\n\t}\n\tif( a.isCritical && skill.level >= 2 ) {\n\t\ta.target.looseLife(skill, 10);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idea254",
			"name": "Filet tranchant",
			"desc": "<st>Ralentit</st> les unités dans la zone.",
			"mode": 5,
			"range": {
				"type": 0,
				"radius": 3,
				"baseDistance": 10
			},
			"props": {
				"useWithoutWeapon": true,
				"value": 3,
				"vars": {
					"used": 0
				},
				"globalEvents": true
			},
			"script": "function onSkill() {\n\tfor( t in skill.getTargets() ) {\n\t\tt.target.addStatus(Status.Slowed);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idea255",
			"name": "Harpons à lancer",
			"desc": "Quand une unité ennemie est <st>ralentie</st>, lui lance un harpon infligeant [DMG].",
			"mode": 2,
			"range": {
				"baseDistance": 10
			},
			"props": {
				"vars": {
					"chances": 30
				},
				"useWithoutWeapon": true,
				"dmgAttribute": 0
			},
			"script": "function onStatus(s) {\n\tif( s.unit.side != skill.unit.side ) {\n\t\tattackTarget(s.unit);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/WM_Icons.png",
				"size": 42,
				"x": 6,
				"y": 0
			},
			"minDmg": 5,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Idea256",
			"name": "Démence",
			"desc": "Chaque fois qu'une compétence de cette unité touche plusieurs unités, elle applique [Bleeding].",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				]
			},
			"script": "function onSkillPlayed(s) {\n\tvar arr = [];\n\tfor( t in s.getTargets() ) {\n\t\tif( t.dmg > 0 ) {\n\t\t\tarr.push(t.target);\n\t\t}\n\t\tif( arr.length >= 2 ) {\n\t\t\tfor( t in arr ) {\n\t\t\t\tt.addStatus(Status.Bleeding);\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "Si >3, malus",
			"icon": {
				"file": "ui/Icons/BattleIcons96PX.png",
				"size": 96,
				"x": 1,
				"y": 5
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Elusive",
			"name": "Insaisissable",
			"desc": "Quand <st>riposte</st> est retiré, gagne <st>esquive</st>.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"hasriposte": false
				},
				"useWithoutWeapon": true
			},
			"script": "function onStatus(st) {\n\tif( st.kind == Status.Riposte ) {\n\t\tvars.hasriposte = true;\n\t}\n}\n\nfunction onDamageDealt(a) {\n\tif( vars.hasriposte && !skill.unit.hasStatus(Status.Riposte) ) {\n\t\tvars.hasriposte = false;\n\t\tskill.unit.addStatus(Status.Dodge);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Protector",
			"name": "Protecteur",
			"desc": "À la fin de son tour, cette unité applique <stb>Protégé</stb> à tous les alliés adjacents.",
			"mode": 2,
			"range": {},
			"props": {
				"useWithoutWeapon": true
			},
			"script": "function onEndTurn() {\n\tvar arr = [];\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) ) {\n\t\t\tarr.push(u);\n\t\t}\n\t}\n\tfor( u in arr ) {\n\t\tu.addStatus(Status.Protection);\n\t\tif( skill.level >= 2 && u.isEngaged() ) {\n\t\t\tu.addStatus(Status.Deflection);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Resilience",
			"name": "Résilience",
			"desc": "Gagne [VALUE] <st>[Guard] temporaire</st> pour chaque ennemi adjacent à la fin de son tour.",
			"mode": 2,
			"range": {},
			"props": {
				"value": 1,
				"useWithoutWeapon": true
			},
			"script": "function onEndTurn() {\n\tvar arr = [];\n\tfor( u in getFoes(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) ) {\n\t\t\tarr.push(u);\n\t\t}\n\t}\n\tif( skill.level == 1 ) {\n\t\tfor( u in arr ) {\n\t\t\tskill.unit.addStatus(Status.ExtraGuard, skill.value);\n\t\t}\n\t}\n\tif( skill.level >= 3 ) {\n\t\tfor( u in arr) {\n\t\t\tskill.unit.gainsGuard(skill.value);\n\t\t}\n\t}\n}",
			"notes": "OK",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "VenomArrow",
			"name": "Flèche venimeuse",
			"desc": "Inflige [DMG] à la cible et lui applique [VALUE] [Poison]s.\n\n[CapaCritical] : Applique également le Poison à tous les ennemis adjacents à la cible.",
			"mode": 1,
			"range": {
				"baseDistance": 8
			},
			"props": {
				"needDisengaged": true,
				"vars": {
					"chance": 50
				},
				"dmgAttribute": 1,
				"scaledValue": 2,
				"scaledValueAttribute": 1,
				"tooltipStatus": [
					{
						"st": "Poison"
					}
				]
			},
			"script": "function onHit(a) {\n\ta.target.addStatus(Status.Poison, skill.value );\n\tif( skill.level >= 2 && a.isCritical ) {\n\t\tfor( u in getFoes(skill.unit) ) {\n\t\t\tif( u.isMelee(a.target) ) {\n\t\t\t\tu.addStatus(Status.Poison, skill.value );\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "Spread on crit",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"minDmg": 4,
			"maxDmg": 7,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Rupture",
			"name": "Éventration",
			"desc": "Un coup d’épée violent transperce la cible et lui inflige [DMG] en lui appliquant <stm>Saignement</stm>. Si la cible saigne déjà, l’attaque est un coup critique.",
			"mode": 0,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Bleeding"
					}
				],
				"dmgAttribute": 0
			},
			"script": "function onEval(a) {\n\tif( a.target.hasStatus(Status.Bleeding) ) {\n\t\ta.criticalHitPercent = 100;\n\t}\n}\n\nfunction onHit(a) {\n\ta.target.addStatus(Status.Bleeding);\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"minDmg": 8,
			"maxDmg": 10,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Ideax",
			"name": "Entre les deux yeux",
			"desc": "Inflige [DMG] à la cible plus [VALUE] pour chaque application de [Poison].",
			"mode": 0,
			"range": {},
			"props": {
				"isHeroic": true,
				"apCost": 1,
				"dmgAttribute": 1,
				"scaledValue": 1,
				"scaledValueAttribute": 1
			},
			"script": "function onEval(a) {\n\tfor( s in a.target.getAllStatus() )\n\t\tif( s.kind == Status.Poison ) {\n\t\t\ta.dmg += s.count * skill.value;\n\t\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"minDmg": 8,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "FormLine",
			"name": "Formez la ligne !",
			"desc": "[Support] : L'allié gagne <st>esquive</st>.",
			"mode": 0,
			"range": {
				"allowedTargets": 1,
				"baseDistance": 6
			},
			"props": {
				"vars": {
					"chances": 50
				},
				"useWithoutWeapon": true
			},
			"script": "function onSkill() {\n\tif( checkSupport() ) {\n\t\tskill.target.addStatus(Status.Dodge);\n\t\tfor( u in getAllies(skill.unit) ) {\n\t\t\tif( u.isMelee(skill.target) && skill.level >= 2 && proba(vars.chances) ) {\n\t\t\t\tu.addStatus(Status.Dodge);\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "Spread",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "OldPowerfulAxeThrow",
			"name": "Puissant lancer de hache",
			"desc": "[DMG] à la cible.",
			"mode": 1,
			"range": {
				"baseDistance": 4
			},
			"props": {
				"dmgAttribute": 0,
				"needDisengaged": true,
				"scaledValue": 15,
				"scaledValueAttribute": 0
			},
			"script": "function onDamage(a) {\n\tif( proba(skill.value) && skill.level == 2 && checkReinforce(a) ) {\n\t\ta.target.addStatus(Status.Stun);\n\t}\n\tif( proba(skill.value) && skill.level >= 3 ) {\n\t\ta.target.addStatus(Status.Stunned);\n\t}\n}",
			"notes": "Stun ?",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"minDmg": 2,
			"maxDmg": 6,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "BelerionHorn",
			"name": "Le Cor de Belerion",
			"desc": "Tous les alliés engagés gagnent [VALUE] [Power].\n\nTous les alliés non-engagés gagnent [VALUE] [Dexterity].",
			"mode": 2,
			"range": {},
			"props": {
				"scaledValue": 2,
				"scaledValueAttribute": 0,
				"globalEvents": true,
				"vars": {
					"chances": 20,
					"powerbuffed": false,
					"dexteritybuffed": false
				}
			},
			"script": "function onBeginAction() {\n\tfor( u in getAllies(skill.unit)) {\n\t\tif( u.isEngaged() ) {\n\t\t\tu.cancelSkillEffects(skill);\n\t\t\tu.addSkillEffect(skill, Attribute.Power, skill.value);\n\t\t\tif( skill.level >= 3 ) {\n\t\t\t\tu.addSkillEffect(skill, Attribute.CritHitPercent, skill.value);\n\t\t\t}\n\t\t}\n\t\tif( !u.isEngaged() ) {\n\t\t\tu.cancelSkillEffects(skill);\n\t\t\tu.addSkillEffect(skill, Attribute.Dexterity, skill.value);\n\t\t\tif( skill.level >= 3 ) {\n\t\t\t\tu.addSkillEffect(skill, Attribute.CritHitPercent, skill.value);\n\t\t\t}\n\t\t}\n\t}\n}",
			"notes": "Crit",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "RagingBlowzzz",
			"name": "Coup rageur",
			"desc": "[DMG] aux unités dans la zone. <st>Enrage</st> si au moins [VALUE] unités sont touchées.",
			"mode": 5,
			"range": {
				"type": 1,
				"angle": 260,
				"radius": 2.3,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"value": 3
			},
			"script": "function onPostSkill() {\n\tvar arr = [];\n\tfor( t in skill.getTargets() )\n\t\tif( t.dmg > 0 ) {\n\t\t\tarr.push(t.target);\n\t\t}\n\tif( arr.length >= 3 ) {\n\t\t\tskill.unit.addStatus(Status.Bleeding);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"minDmg": 4,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Fury",
			"name": "Fureur",
			"desc": "[DMG] aux unités dans la zone.",
			"mode": 5,
			"range": {
				"type": 1,
				"angle": 180,
				"radius": 2.3,
				"allowedTargets": 5
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"bonushit": false,
					"attacks": 1
				},
				"value": 0
			},
			"script": "function onBeginAction() {\n\tvars.bonushit = false;\n}\n\nfunction onDamage(a) {\n\tif( skill.level >= 2 && a.isCritical && vars.bonushit == false) {\n\t\tvars.bonushit = true;\n\t\tattack();\n\t}\n}",
			"notes": "Crit relance",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"minDmg": 3,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "AnimalSpirit",
			"name": "Esprit animal",
			"desc": "Tant que bonus, deal plus.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"chances": 50
				},
				"useWithoutWeapon": true
			},
			"script": "function onSkillPlayed(s) {\n\t\tfor( u in getFoes(skill.unit) ) {\n\t\t\tif( proba(vars.chances) && skill.unit.hasStatus(Status.Angry) ) {\n\t\t\t\tu.addStatus(Status.Vulnerability);\n\t\t\t}\n\t\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "PurifyNest",
			"name": "Purifier",
			"desc": "Purifie un nid de rats.",
			"mode": 0,
			"range": {},
			"props": {
				"vars": {
					"allowed": false
				}
			},
			"script": "function onBeginAction() {\n\tvars.allowed = false;\n\tfor( u in getFoes(skill.unit) )\n\t\tif( u.kind == UnitClass.RatNest && u.health == 0 && u.isMelee(skill.unit) ) {\n\t\t\tvars.allowed = true;\n\t\t\tbreak;\n\t\t}\n}\n\nfunction onEval(s) {\n\tif( s.target.kind != UnitClass.RatNest || s.target.health > 0 )\n\t\tdontAllow();\n}\n\nfunction onSkill() {\n\tkill();\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Attract",
			"name": "Attirer",
			"desc": "[DMG] à la cible, l'attire jusqu'en mêlée et l'engage.",
			"mode": 1,
			"range": {
				"flags": 1,
				"baseDistance": 6
			},
			"props": {
				"dmgAttribute": 0,
				"vars": {
					"distance": 6
				},
				"needDisengaged": true,
				"useWithoutWeapon": true
			},
			"script": "function onDamage(a) {\n\tif( skill.level >= 2 && checkReinforce(a) ) {\n\t\ta.target.addStatus(Status.Bleeding);\n\t}\n\ta.target.pushback({ unit : skill.unit },-vars.distance);\n\tif( a.target.isMelee(skill.unit) ) {\n\t\ta.target.engage(skill.unit);\n\t}\n}",
			"notes": "OK",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"minDmg": 2,
			"maxDmg": 5,
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "ConstrictiveGuts",
			"name": "Tripes constrictives",
			"desc": "L'ennemi engagé ne peut pas se désengager.",
			"mode": 2,
			"range": {},
			"props": {
				"globalEvents": true
			},
			"script": "",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Testlink",
			"name": "Ok",
			"desc": "",
			"mode": 2,
			"range": {},
			"props": {},
			"script": "function onDamageTaken(a) {\n\tvar dmgtaken = a.dmg;\n\tfor( u in getAllies(skill.unit) ) {\n\t\tu.damages(skill, dmgtaken);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "Neutralisation",
			"name": "Neutralisation",
			"desc": "Quand cette unité termine son tour en étant adjacent à un ennemi, il subit <stm>Vulnérabilité</stm>.",
			"mode": 2,
			"range": {},
			"props": {
				"vars": {
					"rounds": 1
				},
				"tooltipStatus": [
					{
						"st": "Vulnerability"
					}
				]
			},
			"script": "function onEndTurn() {\n\tfor( u in getFoes(skill.unit) ) {\n\t\tif( u.isMelee(skill.unit) ) {\n\t\t\tu.addStatus(Status.Vulnerability);\n\t\t}\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		},
		{
			"id": "OutlawsPreparation",
			"name": "Préparation des hors-la-loi",
			"desc": "Cette unité et tous ses alliés, s'ils ne sont pas engagés à la fin de leur tour, gagnent <stb>Fureur</stb>.",
			"mode": 2,
			"range": {},
			"props": {
				"tooltipStatus": [
					{
						"st": "Fury"
					}
				],
				"globalEvents": true
			},
			"script": "function onEndTurn() {\n\tfor( u in getAllies(skill.unit) ) {\n\t\tif( !u.isEngaged() ) {\n\t\t\tu.addStatus(Status.Fury);\n\t\t}\n\t}\n\tif( !skill.unit.isEngaged() ) {\n\t\tskill.unit.addStatus(Status.Fury);\n\t}\n}",
			"notes": "",
			"icon": {
				"file": "ui/Icons/statusIcons.png",
				"size": 32,
				"x": 10,
				"y": 1
			},
			"__ignoreLoc__": true,
			"iconeDone": true,
			"group": 80,
			"done": 2
		}
	],
	"props": {
		"hasIndex": true,
		"displayIcon": "icon",
		"hasGroup": true
	},
	"separators": [
		{
			"title": "Base",
			"id": "AA_DefaultSkill"
		},
		{
			"title": "BattleModes",
			"id": "Flee"
		},
		{
			"title": "Utilitaries",
			"level": 1,
			"id": "Wrath"
		},
		{
			"title": "BasicAttacks",
			"level": 1,
			"id": "Cleave"
		},
		{
			"title": "Strategy",
			"id": "OpportunityStrategy"
		},
		{
			"title": "Level10",
			"id": "Intervention"
		},
		{
			"level": 1,
			"title": "SwapWeapon",
			"id": "WeaponSwapSword"
		},
		{
			"title": "Level12",
			"id": "SuppressFire"
		},
		{
			"title": "Classes",
			"id": "Bulwark"
		},
		{
			"title": "Sword",
			"level": 1,
			"id": "Bulwark"
		},
		{
			"title": "Bow",
			"level": 1,
			"id": "ReinforcedArrows"
		},
		{
			"title": "Dagger",
			"level": 1,
			"id": "PoisonedWeapon"
		},
		{
			"title": "Polearm",
			"level": 1,
			"id": "LightningCharge"
		},
		{
			"title": "Axe",
			"level": 1,
			"id": "Madness"
		},
		{
			"title": "Mace",
			"level": 1,
			"id": "Opportunism"
		},
		{
			"title": "Lefthands",
			"id": "Protection"
		},
		{
			"title": "Enemies",
			"id": "Poisoning"
		},
		{
			"level": 1,
			"title": "Bandits",
			"id": "Poisoning"
		},
		{
			"level": 2,
			"title": "WeeklyBandits",
			"id": "FugitiveSword2HBandits"
		},
		{
			"title": "Deserters",
			"level": 1,
			"id": "Bravado"
		},
		{
			"level": 2,
			"title": "WeeklyDeserters",
			"id": "FugitiveMaceDeserters"
		},
		{
			"title": "Legion",
			"level": 1,
			"id": "MaintainingTheLine"
		},
		{
			"level": 2,
			"title": "WeeklyLegion",
			"id": "FugitivePolearmLegion"
		},
		{
			"title": "Civilians",
			"level": 1,
			"id": "ForkStrike"
		},
		{
			"title": "Guard",
			"level": 1,
			"id": "HeavyStrike"
		},
		{
			"level": 2,
			"title": "WeeklyGuard",
			"id": "FugitiveAxe2hGuard"
		},
		{
			"title": "Companions",
			"level": 1,
			"id": "Bladestorm"
		},
		{
			"level": 2,
			"title": "WeeklyCompanions",
			"id": "FugitiveMace2HCompanions"
		},
		{
			"title": "Inquisition",
			"level": 1,
			"id": "ForcefulInterrogation"
		},
		{
			"level": 2,
			"title": "WeeklyInquisition",
			"id": "FugitiveSwordInquisition"
		},
		{
			"level": 1,
			"title": "Trackers",
			"id": "WildMarking"
		},
		{
			"level": 2,
			"title": "WeeklyTrackers",
			"id": "FugitiveTrackersBow"
		},
		{
			"level": 1,
			"title": "Alazar",
			"id": "CautiousStrike"
		},
		{
			"level": 2,
			"title": "Escape",
			"id": "DodgeEndTurn"
		},
		{
			"title": "Animal",
			"level": 1,
			"id": "TuskBlow"
		},
		{
			"level": 2,
			"title": "Boars",
			"id": "TuskBlow"
		},
		{
			"level": 2,
			"title": "Wolf",
			"id": "Bite"
		},
		{
			"level": 2,
			"title": "Horse",
			"id": "Crush"
		},
		{
			"level": 2,
			"title": "Rats&Molerats",
			"id": "InfectiousBite"
		},
		{
			"level": 2,
			"title": "Plagueriddens",
			"id": "Vomiting"
		},
		{
			"level": 2,
			"title": "Crawlers",
			"id": "DeepBite"
		},
		{
			"level": 2,
			"title": "GhostPack",
			"id": "TerrifyingAppearance"
		},
		{
			"level": 2,
			"title": "Mosquitos",
			"id": "DreadfulSting"
		},
		{
			"level": 2,
			"title": "Bear",
			"id": "MonstrousPawStrike"
		},
		{
			"title": "Champions",
			"level": 1,
			"id": "Uncontrollable"
		},
		{
			"level": 2,
			"title": "S1 Matthias Lund",
			"id": "Uncontrollable"
		},
		{
			"level": 2,
			"title": "ArenaG1 Smot",
			"id": "ToxicBlade"
		},
		{
			"level": 2,
			"title": "G1 Ruin Nepti",
			"id": "Nepti"
		},
		{
			"level": 2,
			"title": "E1 Kaghal",
			"id": "PiercingArrow"
		},
		{
			"level": 2,
			"title": "G1 Alaxa",
			"id": "SliceAndDice"
		},
		{
			"level": 2,
			"title": "H1 Bionn",
			"id": "BionnAttack"
		},
		{
			"level": 2,
			"title": "G2 Fenris",
			"id": "FenrisSeek"
		},
		{
			"level": 2,
			"title": "Arena1G2 Kogo Toro",
			"id": "LightningSpin"
		},
		{
			"level": 2,
			"title": "Arena2G2 TrivetteRagnol",
			"id": "SoakedAxe"
		},
		{
			"level": 2,
			"title": "G2 Ruin Behedite",
			"id": "BeheditePenalty"
		},
		{
			"level": 2,
			"title": "S1 Ruin Dagan",
			"id": "DaganPunishment"
		},
		{
			"level": 2,
			"title": "A1 Christoph Gluck",
			"id": "GluckStiffingAttack"
		},
		{
			"level": 2,
			"title": "A1 Crawler",
			"id": "CrawlerChaosClaws"
		},
		{
			"level": 2,
			"title": "ArenaE1 Kriskhed",
			"id": "TacticalSlam"
		},
		{
			"level": 2,
			"title": "ArenaA1 Lisbeth",
			"id": "ImpalingStrike"
		},
		{
			"level": 2,
			"title": "ArenaH1 Nairolf Ecila",
			"id": "UnbreakableBond1"
		},
		{
			"title": "Status",
			"id": "Savagery"
		},
		{
			"title": "Injuries",
			"id": "Tear"
		},
		{
			"title": "Gear",
			"id": "OilStrengthProcWeak"
		},
		{
			"level": 1,
			"title": "Oil",
			"id": "OilStrengthProcWeak"
		},
		{
			"title": "BeltAccs",
			"level": 1,
			"id": "BeltAccPoisonExtra"
		},
		{
			"title": "AnimAcc",
			"level": 1,
			"id": "AnimAccAllyMelee"
		},
		{
			"title": "Global",
			"id": "FireZone"
		},
		{
			"level": 1,
			"title": "Environment",
			"id": "FireZone"
		},
		{
			"level": 1,
			"title": "EnvironmentSkill",
			"id": "RockSlideZone"
		},
		{
			"title": "Traps",
			"level": 1,
			"id": "PoisonTrap"
		},
		{
			"title": "Misc",
			"level": 1,
			"id": "Plague_Madness"
		},
		{
			"level": 1,
			"title": "AIBehaviour",
			"id": "AIBehaviourDefault"
		},
		{
			"title": "Modes",
			"id": "ArenaVulnerability"
		},
		{
			"title": "Arena_VoxPopuli",
			"level": 1,
			"id": "ArenaVulnerability"
		},
		{
			"title": "Arena_Rules",
			"level": 1,
			"id": "ArenaRulePoisonZone"
		},
		{
			"title": "Arena_Challenges",
			"level": 1,
			"id": "ArenaUnitToEngage"
		},
		{
			"level": 1,
			"title": "ForsakenVillage",
			"id": "PestiferedFromCellingZone"
		},
		{
			"level": 1,
			"title": "Sport",
			"id": "SportTeamLeader"
		},
		{
			"level": 1,
			"title": "Celestium",
			"id": "CelestiumSearch"
		},
		{
			"title": "Ideas",
			"id": "Gouge"
		}
	]
},